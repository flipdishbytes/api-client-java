/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.flipdish.apiclient.api;

import com.flipdish.apiclient.ApiException;
import com.flipdish.apiclient.model.AppConfigSalesChannel;
import java.io.File;
import com.flipdish.apiclient.model.MobileAppsSubmission;
import com.flipdish.apiclient.model.RestApiArrayResultMobileAppsStatistics;
import com.flipdish.apiclient.model.RestApiErrorResult;
import com.flipdish.apiclient.model.RestApiForbiddenResult;
import com.flipdish.apiclient.model.RestApiIntegerResult;
import com.flipdish.apiclient.model.RestApiResultAppConfigSalesChannel;
import com.flipdish.apiclient.model.RestApiResultMobileAppsImage;
import com.flipdish.apiclient.model.RestApiResultMobileAppsSubmission;
import com.flipdish.apiclient.model.RestApiResultMobileAppsSubmissionDetails;
import com.flipdish.apiclient.model.RestApiResultMobileAppsSubmissionStatus;
import com.flipdish.apiclient.model.RestApiResultRestApiIntegerResult;
import com.flipdish.apiclient.model.RestApiResultUpdateMobileAppsSubmissionStatus;
import com.flipdish.apiclient.model.RestApiUnauthorizedResult;
import com.flipdish.apiclient.model.UpdateMobileAppsSubmissionStatus;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MobileAppsApi
 */
@Ignore
public class MobileAppsApiTest {

    private final MobileAppsApi api = new MobileAppsApi();

    
    /**
     * Get sales channel configuration
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAppConfigSalesChannelTest() throws ApiException {
        String appId = null;
        RestApiResultAppConfigSalesChannel response = api.getAppConfigSalesChannel(appId);

        // TODO: test validations
    }
    
    /**
     * Get statistics mobile apps
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStatisticsTest() throws ApiException {
        String appId = null;
        List<String> platformTypes = null;
        RestApiArrayResultMobileAppsStatistics response = api.getStatistics(appId, platformTypes);

        // TODO: test validations
    }
    
    /**
     * Get submission details mobile apps
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubmissionDetailsTest() throws ApiException {
        String appId = null;
        RestApiResultMobileAppsSubmissionDetails response = api.getSubmissionDetails(appId);

        // TODO: test validations
    }
    
    /**
     * Get submission status mobile apps
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubmissionStatusTest() throws ApiException {
        String appId = null;
        Integer submissionId = null;
        RestApiResultMobileAppsSubmissionStatus response = api.getSubmissionStatus(appId, submissionId);

        // TODO: test validations
    }
    
    /**
     * Publish mobile apps
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void publishTest() throws ApiException {
        String appId = null;
        Integer submissionId = null;
        String platformType = null;
        RestApiResultRestApiIntegerResult response = api.publish(appId, submissionId, platformType);

        // TODO: test validations
    }
    
    /**
     * Re-submission form mobile apps
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resubmissionTest() throws ApiException {
        String appId = null;
        MobileAppsSubmission mobileAppsSubmission = null;
        RestApiResultMobileAppsSubmission response = api.resubmission(appId, mobileAppsSubmission);

        // TODO: test validations
    }
    
    /**
     * Submission form mobile apps
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void submissionTest() throws ApiException {
        String appId = null;
        MobileAppsSubmission mobileAppsSubmission = null;
        RestApiResultMobileAppsSubmission response = api.submission(appId, mobileAppsSubmission);

        // TODO: test validations
    }
    
    /**
     * Unpublish mobile apps
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unpublishTest() throws ApiException {
        String appId = null;
        Integer submissionId = null;
        String platformType = null;
        RestApiIntegerResult response = api.unpublish(appId, submissionId, platformType);

        // TODO: test validations
    }
    
    /**
     * Update the application sales channel configuration
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAppConfigSalesChannelTest() throws ApiException {
        String appId = null;
        AppConfigSalesChannel appConfigSalesChannel = null;
        RestApiResultAppConfigSalesChannel response = api.updateAppConfigSalesChannel(appId, appConfigSalesChannel);

        // TODO: test validations
    }
    
    /**
     * Update submission status
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSubmissionStatusTest() throws ApiException {
        String appId = null;
        Integer submissionId = null;
        UpdateMobileAppsSubmissionStatus updateMobileAppsSubmissionStatus = null;
        RestApiResultUpdateMobileAppsSubmissionStatus response = api.updateSubmissionStatus(appId, submissionId, updateMobileAppsSubmissionStatus);

        // TODO: test validations
    }
    
    /**
     * Upload image mobile apps
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uploadImageTest() throws ApiException {
        String appId = null;
        File image = null;
        RestApiResultMobileAppsImage response = api.uploadImage(appId, image);

        // TODO: test validations
    }
    
}
