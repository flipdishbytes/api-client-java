/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.flipdish.apiclient.api;

import com.flipdish.apiclient.ApiException;
import com.flipdish.apiclient.model.EmvTerminal;
import com.flipdish.apiclient.model.HydraRegistrationRequest;
import com.flipdish.apiclient.model.RestApiArrayResultEmvTerminalWithAssignments;
import com.flipdish.apiclient.model.RestApiArrayResultKioskCashPaymentSettings;
import com.flipdish.apiclient.model.RestApiErrorResult;
import com.flipdish.apiclient.model.RestApiForbiddenResult;
import com.flipdish.apiclient.model.RestApiPaginationResultHydraDeviceDetails;
import com.flipdish.apiclient.model.RestApiResultHydraConfig;
import com.flipdish.apiclient.model.RestApiResultHydraDeviceDetails;
import com.flipdish.apiclient.model.RestApiResultHydraStatus;
import com.flipdish.apiclient.model.RestApiResultPaymentTerminalDetails;
import com.flipdish.apiclient.model.RestApiResultPaymentTerminalTransactionDetails;
import com.flipdish.apiclient.model.RestApiUnauthorizedResult;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for HydraApi
 */
@Ignore
public class HydraApiTest {

    private final HydraApi api = new HydraApi();

    
    /**
     * Assign an EMV terminal to a kiosk
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void assignEmvTest() throws ApiException {
        String appId = null;
        Integer hydraConfigId = null;
        Integer emvTerminalId = null;
        api.assignEmv(appId, hydraConfigId, emvTerminalId);

        // TODO: test validations
    }
    
    /**
     * [Private]
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void attachStoreToKioskTest() throws ApiException {
        String appId = null;
        Integer storeId = null;
        String deviceId = null;
        RestApiResultHydraStatus response = api.attachStoreToKiosk(appId, storeId, deviceId);

        // TODO: test validations
    }
    
    /**
     * [Private]
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void attachStoreToTerminalTest() throws ApiException {
        String appId = null;
        String deviceId = null;
        Integer storeId = null;
        RestApiResultHydraStatus response = api.attachStoreToTerminal(appId, deviceId, storeId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cancelEmvPaymentTest() throws ApiException {
        Integer orderId = null;
        String appId = null;
        api.cancelEmvPayment(orderId, appId);

        // TODO: test validations
    }
    
    /**
     * [Private]
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void detachStoreFromTerminalTest() throws ApiException {
        String appId = null;
        String deviceId = null;
        Integer storeId = null;
        RestApiResultHydraStatus response = api.detachStoreFromTerminal(appId, deviceId, storeId);

        // TODO: test validations
    }
    
    /**
     * [Private]
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAttachedDeviceTest() throws ApiException {
        String appId = null;
        String deviceType = null;
        String deviceId = null;
        RestApiResultHydraDeviceDetails response = api.getAttachedDevice(appId, deviceType, deviceId);

        // TODO: test validations
    }
    
    /**
     * [Private]
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAttachedDevicesTest() throws ApiException {
        String appId = null;
        String deviceType = null;
        Integer pageIndex = null;
        Integer pageSize = null;
        Integer storeId = null;
        String deviceName = null;
        String deviceSerial = null;
        RestApiPaginationResultHydraDeviceDetails response = api.getAttachedDevices(appId, deviceType, pageIndex, pageSize, storeId, deviceName, deviceSerial);

        // TODO: test validations
    }
    
    /**
     * [Private]
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEMVTerminalDetailsTest() throws ApiException {
        String appId = null;
        RestApiResultPaymentTerminalDetails response = api.getEMVTerminalDetails(appId);

        // TODO: test validations
    }
    
    /**
     * [Private]
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEmvOrderStateTest() throws ApiException {
        Integer orderId = null;
        String appId = null;
        RestApiResultPaymentTerminalTransactionDetails response = api.getEmvOrderState(orderId, appId);

        // TODO: test validations
    }
    
    /**
     * Get the status of Cash Payment Methon on Kisok
     *
     * [BETA - this endpoint is under development, do not use it in your production system]
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getKioskCashPaymentSettingsTest() throws ApiException {
        String appId = null;
        String deviceId = null;
        RestApiArrayResultKioskCashPaymentSettings response = api.getKioskCashPaymentSettings(appId, deviceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRegistrationTest() throws ApiException {
        RestApiResultHydraStatus response = api.getRegistration();

        // TODO: test validations
    }
    
    /**
     * [Private]
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSettingsTest() throws ApiException {
        RestApiResultHydraConfig response = api.getSettings();

        // TODO: test validations
    }
    
    /**
     * [Private]
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void hydraCreateEmvTest() throws ApiException {
        String appId = null;
        EmvTerminal emv = null;
        Object response = api.hydraCreateEmv(appId, emv);

        // TODO: test validations
    }
    
    /**
     * [Private]
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void hydraDeleteEmvTest() throws ApiException {
        String appId = null;
        Integer id = null;
        Object response = api.hydraDeleteEmv(appId, id);

        // TODO: test validations
    }
    
    /**
     * [Private]
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void hydraDetachStoreFromKioskTest() throws ApiException {
        String appId = null;
        Integer storeId = null;
        String deviceId = null;
        RestApiResultHydraStatus response = api.hydraDetachStoreFromKiosk(appId, storeId, deviceId);

        // TODO: test validations
    }
    
    /**
     * List EMV terminals belonging to the given AppNameId
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void hydraGetEmvsForAppIdTest() throws ApiException {
        String appId = null;
        RestApiArrayResultEmvTerminalWithAssignments response = api.hydraGetEmvsForAppId(appId);

        // TODO: test validations
    }
    
    /**
     * [Private]
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void loginWithDeviceIdTest() throws ApiException {
        String deviceId = null;
        String hydraUserType = null;
        String serialNumber = null;
        api.loginWithDeviceId(deviceId, hydraUserType, serialNumber);

        // TODO: test validations
    }
    
    /**
     * [Private]
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void registerTest() throws ApiException {
        String appId = null;
        HydraRegistrationRequest hydraRegistration = null;
        RestApiResultHydraStatus response = api.register(appId, hydraRegistration);

        // TODO: test validations
    }
    
    /**
     * [Private]
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unAssignTest() throws ApiException {
        String appId = null;
        String deviceId = null;
        api.unAssign(appId, deviceId);

        // TODO: test validations
    }
    
    /**
     * Unassign the currently assigned EMV terminal from a kiosk
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unassignEmvTest() throws ApiException {
        String appId = null;
        Integer hydraConfigId = null;
        api.unassignEmv(appId, hydraConfigId);

        // TODO: test validations
    }
    
    /**
     * Update the Cash Payment Methon Visiability on Kisok
     *
     * [BETA - this endpoint is under development, do not use it in your production system]
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateKioskCashVisibilitySettingsTest() throws ApiException {
        String appId = null;
        String deviceId = null;
        Boolean isCashEnabled = null;
        api.updateKioskCashVisibilitySettings(appId, deviceId, isCashEnabled);

        // TODO: test validations
    }
    
}
