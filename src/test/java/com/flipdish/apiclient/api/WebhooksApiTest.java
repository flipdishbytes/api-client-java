/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.flipdish.apiclient.api;

import com.flipdish.apiclient.ApiException;
import java.time.OffsetDateTime;
import com.flipdish.apiclient.model.RestApiArrayResultWebhookSubscription;
import com.flipdish.apiclient.model.RestApiErrorResult;
import com.flipdish.apiclient.model.RestApiForbiddenResult;
import com.flipdish.apiclient.model.RestApiIntegerResult;
import com.flipdish.apiclient.model.RestApiPaginationResultWebhookLog;
import com.flipdish.apiclient.model.RestApiStringArrayResult;
import com.flipdish.apiclient.model.RestApiUnauthorizedResult;
import com.flipdish.apiclient.model.WebhookSubscription;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for WebhooksApi
 */
@Ignore
public class WebhooksApiTest {

    private final WebhooksApi api = new WebhooksApi();

    
    /**
     * Create a webhook subscription for you Oauth client
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void craeteWebhookSubscriptionTest() throws ApiException {
        String clientId = null;
        WebhookSubscription webhookSubscription = null;
        RestApiIntegerResult response = api.craeteWebhookSubscription(clientId, webhookSubscription);

        // TODO: test validations
    }
    
    /**
     * Add event name to your webhook subscription
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createWebhookSubscriptionEventNamesTest() throws ApiException {
        String clientId = null;
        Integer webhookSubscriptionId = null;
        String eventName = null;
        api.createWebhookSubscriptionEventNames(clientId, webhookSubscriptionId, eventName);

        // TODO: test validations
    }
    
    /**
     * Delete you webhook subscription
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteWebhookSubscriptionTest() throws ApiException {
        String clientId = null;
        Integer webhookSubscriptionId = null;
        api.deleteWebhookSubscription(clientId, webhookSubscriptionId);

        // TODO: test validations
    }
    
    /**
     * Remove event name to your webhook subscription
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteWebhookSubscriptionEventNameTest() throws ApiException {
        String clientId = null;
        Integer webhookSubscriptionId = null;
        String eventName = null;
        api.deleteWebhookSubscriptionEventName(clientId, webhookSubscriptionId, eventName);

        // TODO: test validations
    }
    
    /**
     * Get all webhook subscription event names
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWebhookEventNamesTest() throws ApiException {
        RestApiStringArrayResult response = api.getWebhookEventNames();

        // TODO: test validations
    }
    
    /**
     * Get your webhook subscriptions selected event names
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWebhookEventNamesBySubscriptionIdTest() throws ApiException {
        String clientId = null;
        Integer webhookSubscriptionId = null;
        RestApiStringArrayResult response = api.getWebhookEventNamesBySubscriptionId(clientId, webhookSubscriptionId);

        // TODO: test validations
    }
    
    /**
     * Get logs for your webhook subscription
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWebhookLogsTest() throws ApiException {
        String clientId = null;
        Integer webhookSubscriptionId = null;
        OffsetDateTime start = null;
        OffsetDateTime end = null;
        Integer page = null;
        Integer limit = null;
        RestApiPaginationResultWebhookLog response = api.getWebhookLogs(clientId, webhookSubscriptionId, start, end, page, limit);

        // TODO: test validations
    }
    
    /**
     * Get all webhook subscriptions by your Oauth client id
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWebhookSubscriptionsTest() throws ApiException {
        String clientId = null;
        RestApiArrayResultWebhookSubscription response = api.getWebhookSubscriptions(clientId);

        // TODO: test validations
    }
    
    /**
     * Update a webhook subscription object
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateWebhookSubscriptionTest() throws ApiException {
        String clientId = null;
        Integer webhookSubscriptionId = null;
        WebhookSubscription webhookSubscription = null;
        api.updateWebhookSubscription(clientId, webhookSubscriptionId, webhookSubscription);

        // TODO: test validations
    }
    
}
