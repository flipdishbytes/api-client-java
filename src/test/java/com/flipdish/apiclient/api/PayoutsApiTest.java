/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.flipdish.apiclient.api;

import org.threeten.bp.OffsetDateTime;
import com.flipdish.apiclient.model.PayoutDetail;
import com.flipdish.apiclient.model.RestApiArrayResultPayoutSummary;
import com.flipdish.apiclient.model.RestApiErrorResult;
import com.flipdish.apiclient.model.RestApiForbiddenResult;
import com.flipdish.apiclient.model.RestApiPaginationResultPayout;
import com.flipdish.apiclient.model.RestApiPaginationResultPayoutChargeback;
import com.flipdish.apiclient.model.RestApiPaginationResultPayoutOrder;
import com.flipdish.apiclient.model.RestApiPaginationResultPayoutOtherCharge;
import com.flipdish.apiclient.model.RestApiPaginationResultPayoutRefund;
import com.flipdish.apiclient.model.RestApiUnauthorizedResult;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PayoutsApi
 */
@Ignore
public class PayoutsApiTest {

    private final PayoutsApi api = new PayoutsApi();

    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getPayoutTest() throws Exception {
        String appId = null;
        Integer bankAccountId = null;
        Integer payoutId = null;
        PayoutDetail response = api.getPayout(appId, bankAccountId, payoutId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getPayoutChargebacksTest() throws Exception {
        String appId = null;
        Integer bankAccountId = null;
        Integer payoutId = null;
        Integer page = null;
        Integer limit = null;
        List<Integer> storeIds = null;
        RestApiPaginationResultPayoutChargeback response = api.getPayoutChargebacks(appId, bankAccountId, payoutId, page, limit, storeIds);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getPayoutOrdersTest() throws Exception {
        String appId = null;
        Integer bankAccountId = null;
        Integer payoutId = null;
        Integer page = null;
        Integer limit = null;
        List<Integer> storeIds = null;
        RestApiPaginationResultPayoutOrder response = api.getPayoutOrders(appId, bankAccountId, payoutId, page, limit, storeIds);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getPayoutOtherChargesTest() throws Exception {
        String appId = null;
        Integer bankAccountId = null;
        Integer payoutId = null;
        Integer page = null;
        Integer limit = null;
        List<Integer> storeIds = null;
        RestApiPaginationResultPayoutOtherCharge response = api.getPayoutOtherCharges(appId, bankAccountId, payoutId, page, limit, storeIds);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getPayoutRefundsTest() throws Exception {
        String appId = null;
        Integer bankAccountId = null;
        Integer payoutId = null;
        Integer page = null;
        Integer limit = null;
        List<Integer> storeIds = null;
        RestApiPaginationResultPayoutRefund response = api.getPayoutRefunds(appId, bankAccountId, payoutId, page, limit, storeIds);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getPayoutSummariesTest() throws Exception {
        String appId = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        List<Integer> payoutRequestIdsBankAccountIds = null;
        List<String> payoutRequestIdsStates = null;
        RestApiArrayResultPayoutSummary response = api.getPayoutSummaries(appId, startDate, endDate, payoutRequestIdsBankAccountIds, payoutRequestIdsStates);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getPayoutsTest() throws Exception {
        String appId = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        Integer page = null;
        Integer limit = null;
        List<Integer> payoutRequestIdsBankAccountIds = null;
        List<String> payoutRequestIdsStates = null;
        RestApiPaginationResultPayout response = api.getPayouts(appId, startDate, endDate, page, limit, payoutRequestIdsBankAccountIds, payoutRequestIdsStates);

        // TODO: test validations
    }
    
}
