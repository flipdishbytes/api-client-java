/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.flipdish.apiclient.api;

import com.flipdish.apiclient.model.RestApiErrorResult;
import com.flipdish.apiclient.model.RestApiForbiddenResult;
import com.flipdish.apiclient.model.RestApiResultBuildResultModel;
import com.flipdish.apiclient.model.RestApiUnauthorizedResult;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for WhiteLabelBuildsApi
 */
@Ignore
public class WhiteLabelBuildsApiTest {

    private final WhiteLabelBuildsApi api = new WhiteLabelBuildsApi();

    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void healthCheckTest() throws Exception {
        String response = api.healthCheck();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void submitAndroidAppsTest() throws Exception {
        String whiteLabelIds = null;
        String branch = null;
        String buildType = null;
        RestApiResultBuildResultModel response = api.submitAndroidApps(whiteLabelIds, branch, buildType);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void submitAndroidBuildTest() throws Exception {
        String appId = null;
        String branch = null;
        String lane = null;
        String buildType = null;
        RestApiResultBuildResultModel response = api.submitAndroidBuild(appId, branch, lane, buildType);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void submitIosAppsTest() throws Exception {
        String whiteLabelIds = null;
        String branch = null;
        String buildType = null;
        RestApiResultBuildResultModel response = api.submitIosApps(whiteLabelIds, branch, buildType);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void submitIosBuildTest() throws Exception {
        String appId = null;
        String buildType = null;
        String branch = null;
        Boolean submitForReview = null;
        RestApiResultBuildResultModel response = api.submitIosBuild(appId, buildType, branch, submitForReview);

        // TODO: test validations
    }
    
}
