/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.flipdish.apiclient.api;

import com.flipdish.apiclient.model.RestApiArrayResultUserFlipdishAccount;
import com.flipdish.apiclient.model.RestApiArrayResultUserNote;
import com.flipdish.apiclient.model.RestApiArrayResultUserStoreInfo;
import com.flipdish.apiclient.model.RestApiDefaultResponse;
import com.flipdish.apiclient.model.RestApiErrorResult;
import com.flipdish.apiclient.model.RestApiForbiddenResult;
import com.flipdish.apiclient.model.RestApiPaginationResultUserSearch;
import com.flipdish.apiclient.model.RestApiResultUserInfo;
import com.flipdish.apiclient.model.RestApiResultUserRole;
import com.flipdish.apiclient.model.RestApiStringArrayResult;
import com.flipdish.apiclient.model.RestApiStringResult;
import com.flipdish.apiclient.model.RestApiUnauthorizedResult;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UsersApi
 */
@Ignore
public class UsersApiTest {

    private final UsersApi api = new UsersApi();

    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void addUserNoteTest() throws Exception {
        Integer userId = null;
        String note = null;
        RestApiDefaultResponse response = api.addUserNote(userId, note);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void addUserToRoleTest() throws Exception {
        Integer userId = null;
        String roleName = null;
        RestApiResultUserRole response = api.addUserToRole(userId, roleName);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void anonymizeUserTest() throws Exception {
        Integer userId = null;
        RestApiDefaultResponse response = api.anonymizeUser(userId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void blockUserPhoneNumberTest() throws Exception {
        Integer userId = null;
        RestApiDefaultResponse response = api.blockUserPhoneNumber(userId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getPreviousOrderCountForStoreTest() throws Exception {
        Integer userId = null;
        Integer storeId = null;
        RestApiStringResult response = api.getPreviousOrderCountForStore(userId, storeId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getRestaurantUserAccountsTest() throws Exception {
        Integer userId = null;
        RestApiArrayResultUserFlipdishAccount response = api.getRestaurantUserAccounts(userId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getRestaurantUserStoresTest() throws Exception {
        Integer userId = null;
        RestApiArrayResultUserStoreInfo response = api.getRestaurantUserStores(userId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getRolesTest() throws Exception {
        RestApiStringArrayResult response = api.getRoles();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getRolesAndUnassignedRolesTest() throws Exception {
        Integer userId = null;
        RestApiResultUserRole response = api.getRolesAndUnassignedRoles(userId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getUserByIdTest() throws Exception {
        Integer userId = null;
        RestApiResultUserInfo response = api.getUserById(userId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getUserNotesTest() throws Exception {
        Integer userId = null;
        RestApiArrayResultUserNote response = api.getUserNotes(userId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void markUserAsFraudulentTest() throws Exception {
        Integer userId = null;
        RestApiDefaultResponse response = api.markUserAsFraudulent(userId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void markUserAsSuspiciousTest() throws Exception {
        Integer userId = null;
        RestApiDefaultResponse response = api.markUserAsSuspicious(userId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void removeUserFromRoleTest() throws Exception {
        Integer userId = null;
        String roleName = null;
        RestApiResultUserRole response = api.removeUserFromRole(userId, roleName);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void resetMfaTest() throws Exception {
        Integer userId = null;
        RestApiDefaultResponse response = api.resetMfa(userId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void searchUsersTest() throws Exception {
        String searchQuery = null;
        Boolean hasUserLoggedIn = null;
        String userDiscriminator = null;
        String searchIn = null;
        Integer pageIndex = null;
        Integer pageSize = null;
        RestApiPaginationResultUserSearch response = api.searchUsers(searchQuery, hasUserLoggedIn, userDiscriminator, searchIn, pageIndex, pageSize);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void setCustomerNameTest() throws Exception {
        Integer userId = null;
        String customerName = null;
        RestApiDefaultResponse response = api.setCustomerName(userId, customerName);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void setUserLanguageTest() throws Exception {
        Integer userId = null;
        String languageId = null;
        RestApiDefaultResponse response = api.setUserLanguage(userId, languageId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void unblockUserPhoneNumberTest() throws Exception {
        Integer userId = null;
        RestApiDefaultResponse response = api.unblockUserPhoneNumber(userId);

        // TODO: test validations
    }
    
}
