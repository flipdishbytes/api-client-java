/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.flipdish.apiclient.api;

import com.flipdish.apiclient.ApiException;
import com.flipdish.apiclient.model.CreateMenuSectionItemFromCatalogItems;
import java.io.File;
import com.flipdish.apiclient.model.MenuSectionItemBase;
import com.flipdish.apiclient.model.RestApiArrayResultMenuSectionItem;
import com.flipdish.apiclient.model.RestApiErrorResult;
import com.flipdish.apiclient.model.RestApiForbiddenResult;
import com.flipdish.apiclient.model.RestApiResultCreatedMenuSectionItems;
import com.flipdish.apiclient.model.RestApiResultMenuSectionItem;
import com.flipdish.apiclient.model.RestApiStringResult;
import com.flipdish.apiclient.model.RestApiUnauthorizedResult;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MenuSectionItemsApi
 */
@Ignore
public class MenuSectionItemsApiTest {

    private final MenuSectionItemsApi api = new MenuSectionItemsApi();

    
    /**
     * Clone menu section item
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cloneMenuSectionItemTest() throws ApiException {
        Integer menuId = null;
        Integer menuSectionId = null;
        Integer menuSectionItemId = null;
        RestApiResultMenuSectionItem response = api.cloneMenuSectionItem(menuId, menuSectionId, menuSectionItemId);

        // TODO: test validations
    }
    
    /**
     * Create menu section item
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createMenuSectionItemTest() throws ApiException {
        Integer menuId = null;
        Integer menuSectionId = null;
        MenuSectionItemBase menuSectionItem = null;
        Object response = api.createMenuSectionItem(menuId, menuSectionId, menuSectionItem);

        // TODO: test validations
    }
    
    /**
     * Create menu section items from a list of Catalog Items
     *
     * BETA - this endpoint is under development, do not use it in your production system
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createMenuSectionItemFromCatalogItemsTest() throws ApiException {
        Integer menuId = null;
        Integer menuSectionId = null;
        CreateMenuSectionItemFromCatalogItems createFromCatalogItems = null;
        Object response = api.createMenuSectionItemFromCatalogItems(menuId, menuSectionId, createFromCatalogItems);

        // TODO: test validations
    }
    
    /**
     * Delete menu section item
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteMenuSectionItemTest() throws ApiException {
        Integer menuId = null;
        Integer menuSectionId = null;
        Integer menuSectionItemId = null;
        api.deleteMenuSectionItem(menuId, menuSectionId, menuSectionItemId);

        // TODO: test validations
    }
    
    /**
     * Delete menu section item image
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteMenuSectionItemImageTest() throws ApiException {
        Integer menuId = null;
        Integer menuSectionId = null;
        Integer menuSectionItemId = null;
        api.deleteMenuSectionItemImage(menuId, menuSectionId, menuSectionItemId);

        // TODO: test validations
    }
    
    /**
     * Get menu item by identifier
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMenuItemByIdTest() throws ApiException {
        Integer menuId = null;
        Integer menuSectionId = null;
        Integer menuSectionItemId = null;
        RestApiResultMenuSectionItem response = api.getMenuItemById(menuId, menuSectionId, menuSectionItemId);

        // TODO: test validations
    }
    
    /**
     * Get menu items
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMenuItemsTest() throws ApiException {
        Integer menuId = null;
        Integer menuSectionId = null;
        RestApiArrayResultMenuSectionItem response = api.getMenuItems(menuId, menuSectionId);

        // TODO: test validations
    }
    
    /**
     * [PRIVATE API] Move an Item within a menu
     *
     * [PRIVATE API]
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void moveMenuItemTest() throws ApiException {
        Integer menuId = null;
        Integer menuSectionId = null;
        Integer menuSectionItemId = null;
        Integer destinationDisplayOrder = null;
        api.moveMenuItem(menuId, menuSectionId, menuSectionItemId, destinationDisplayOrder);

        // TODO: test validations
    }
    
    /**
     * Set tax rate for menu item
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setSectionItemTaxTest() throws ApiException {
        Integer menuId = null;
        Integer menuSectionId = null;
        Integer menuSectionItemId = null;
        Integer taxRateId = null;
        api.setSectionItemTax(menuId, menuSectionId, menuSectionItemId, taxRateId);

        // TODO: test validations
    }
    
    /**
     * Update menu section item
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateMenuSectionItemTest() throws ApiException {
        Integer menuId = null;
        Integer menuSectionId = null;
        Integer menuSectionItemId = null;
        MenuSectionItemBase menuSectionItem = null;
        Double undoAfter = null;
        api.updateMenuSectionItem(menuId, menuSectionId, menuSectionItemId, menuSectionItem, undoAfter);

        // TODO: test validations
    }
    
    /**
     * Upload menu section item image
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uploadMenuSectionItemImageTest() throws ApiException {
        Integer menuId = null;
        Integer menuSectionId = null;
        Integer menuSectionItemId = null;
        File image = null;
        RestApiStringResult response = api.uploadMenuSectionItemImage(menuId, menuSectionId, menuSectionItemId, image);

        // TODO: test validations
    }
    
}
