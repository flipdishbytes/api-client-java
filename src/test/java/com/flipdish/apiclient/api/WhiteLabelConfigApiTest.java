/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.flipdish.apiclient.api;

import com.flipdish.apiclient.model.AppGeneralConfigModel;
import com.flipdish.apiclient.model.AppStoreConfigModel;
import com.flipdish.apiclient.model.HttpPostedFileBase;
import com.flipdish.apiclient.model.PlayStoreConfigModel;
import com.flipdish.apiclient.model.RestApiErrorResult;
import com.flipdish.apiclient.model.RestApiForbiddenResult;
import com.flipdish.apiclient.model.RestApiResultAppGeneralConfigModel;
import com.flipdish.apiclient.model.RestApiResultAppStoreConfigModel;
import com.flipdish.apiclient.model.RestApiResultAssetResultModel;
import com.flipdish.apiclient.model.RestApiResultPlayStoreConfigModel;
import com.flipdish.apiclient.model.RestApiResultWhiteLabelConfigModel;
import com.flipdish.apiclient.model.RestApiUnauthorizedResult;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for WhiteLabelConfigApi
 */
@Ignore
public class WhiteLabelConfigApiTest {

    private final WhiteLabelConfigApi api = new WhiteLabelConfigApi();

    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getAppGeneralConfigTest() throws Exception {
        String appId = null;
        RestApiResultAppGeneralConfigModel response = api.getAppGeneralConfig(appId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getAppStoreConfigTest() throws Exception {
        String appId = null;
        RestApiResultAppStoreConfigModel response = api.getAppStoreConfig(appId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getPlayStoreConfigTest() throws Exception {
        String appId = null;
        RestApiResultPlayStoreConfigModel response = api.getPlayStoreConfig(appId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getWhiteLabelConfigTest() throws Exception {
        Integer wlid = null;
        RestApiResultWhiteLabelConfigModel response = api.getWhiteLabelConfig(wlid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getWhiteLabelConfigByAppNameIdTest() throws Exception {
        String appId = null;
        RestApiResultWhiteLabelConfigModel response = api.getWhiteLabelConfigByAppNameId(appId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void healthCheckTest() throws Exception {
        String response = api.healthCheck();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateAppGeneralConfigTest() throws Exception {
        String appId = null;
        AppGeneralConfigModel appGeneralConfig = null;
        RestApiResultAppGeneralConfigModel response = api.updateAppGeneralConfig(appId, appGeneralConfig);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateAppStoreConfigTest() throws Exception {
        String appId = null;
        AppStoreConfigModel appStoreConfig = null;
        RestApiResultAppStoreConfigModel response = api.updateAppStoreConfig(appId, appStoreConfig);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updatePlayStoreConfigTest() throws Exception {
        String appId = null;
        PlayStoreConfigModel playStoreConfig = null;
        RestApiResultPlayStoreConfigModel response = api.updatePlayStoreConfig(appId, playStoreConfig);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void uploadAppStoreIconTest() throws Exception {
        String appId = null;
        HttpPostedFileBase file = null;
        RestApiResultAssetResultModel response = api.uploadAppStoreIcon(appId, file);

        // TODO: test validations
    }
    
}
