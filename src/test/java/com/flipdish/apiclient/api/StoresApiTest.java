/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.flipdish.apiclient.api;

import com.flipdish.apiclient.ApiException;
import com.flipdish.apiclient.model.BusinessHoursOverrideBase;
import com.flipdish.apiclient.model.BusinessHoursPeriodBase;
import com.flipdish.apiclient.model.Coordinates;
import org.threeten.bp.OffsetDateTime;
import com.flipdish.apiclient.model.PreOrderConfig;
import com.flipdish.apiclient.model.RestApiArrayResultBusinessHoursPeriod;
import com.flipdish.apiclient.model.RestApiArrayResultPreOrderTime;
import com.flipdish.apiclient.model.RestApiArrayResultRestApiDefaultResponse;
import com.flipdish.apiclient.model.RestApiArrayResultStoreStatistics;
import com.flipdish.apiclient.model.RestApiErrorResult;
import com.flipdish.apiclient.model.RestApiForbiddenResult;
import com.flipdish.apiclient.model.RestApiPaginationResultBusinessHoursOverride;
import com.flipdish.apiclient.model.RestApiPaginationResultStore;
import com.flipdish.apiclient.model.RestApiPaginationResultStoreHeader;
import com.flipdish.apiclient.model.RestApiPaginationResultStoreValidationConfig;
import com.flipdish.apiclient.model.RestApiResultAssignedBankAccount;
import com.flipdish.apiclient.model.RestApiResultBusinessHoursOverride;
import com.flipdish.apiclient.model.RestApiResultBusinessHoursPeriod;
import com.flipdish.apiclient.model.RestApiResultCoordinates;
import com.flipdish.apiclient.model.RestApiResultPreOrderConfig;
import com.flipdish.apiclient.model.RestApiResultServiceCharge;
import com.flipdish.apiclient.model.RestApiResultStore;
import com.flipdish.apiclient.model.RestApiResultStoreAddress;
import com.flipdish.apiclient.model.RestApiResultStoreEndOfDayReport;
import com.flipdish.apiclient.model.RestApiUnauthorizedResult;
import com.flipdish.apiclient.model.ServiceCharge;
import com.flipdish.apiclient.model.StoreAddressBase;
import com.flipdish.apiclient.model.StoreAddressForm;
import com.flipdish.apiclient.model.StoreBase;
import com.flipdish.apiclient.model.StoreCloneSettings;
import com.flipdish.apiclient.model.StoreCreateBase;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for StoresApi
 */
@Ignore
public class StoresApiTest {

    private final StoresApi api = new StoresApi();

    
    /**
     * Archive store
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void archiveStoreTest() throws ApiException {
        Integer storeId = null;
        api.archiveStore(storeId);

        // TODO: test validations
    }
    
    /**
     * Assign Menu to Store
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void assignMenuTest() throws ApiException {
        Integer storeId = null;
        Integer menuId = null;
        RestApiArrayResultRestApiDefaultResponse response = api.assignMenu(storeId, menuId);

        // TODO: test validations
    }
    
    /**
     * Clone store with store clone settings
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cloneStoreTest() throws ApiException {
        Integer storeId = null;
        StoreCloneSettings settings = null;
        RestApiResultStore response = api.cloneStore(storeId, settings);

        // TODO: test validations
    }
    
    /**
     * Configure Store Service Charge; Idempotent Operation
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void configureStoreServiceChargeTest() throws ApiException {
        Integer storeId = null;
        ServiceCharge serviceCharge = null;
        RestApiResultServiceCharge response = api.configureStoreServiceCharge(storeId, serviceCharge);

        // TODO: test validations
    }
    
    /**
     * Create Business Hours Override for a store
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createBusinessHoursOverrideByStoreIdTest() throws ApiException {
        Integer storeId = null;
        BusinessHoursOverrideBase businessHoursOverride = null;
        RestApiResultBusinessHoursOverride response = api.createBusinessHoursOverrideByStoreId(storeId, businessHoursOverride);

        // TODO: test validations
    }
    
    /**
     * Create store with Store Group identifier
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createStoreTest() throws ApiException {
        Integer storeGroupId = null;
        StoreCreateBase store = null;
        RestApiResultStore response = api.createStore(storeGroupId, store);

        // TODO: test validations
    }
    
    /**
     * Delete Business Hours Override for a store
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteBusinessHoursOverrideTest() throws ApiException {
        Integer storeId = null;
        Integer businessHoursOverrideId = null;
        RestApiArrayResultRestApiDefaultResponse response = api.deleteBusinessHoursOverride(storeId, businessHoursOverrideId);

        // TODO: test validations
    }
    
    /**
     * Get Stores Bank Account Id
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBankAccountForStoreTest() throws ApiException {
        Integer storeId = null;
        RestApiResultAssignedBankAccount response = api.getBankAccountForStore(storeId);

        // TODO: test validations
    }
    
    /**
     * Get Business hours
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBusinessHoursTest() throws ApiException {
        Integer storeId = null;
        String deliveryType = null;
        RestApiArrayResultBusinessHoursPeriod response = api.getBusinessHours(storeId, deliveryType);

        // TODO: test validations
    }
    
    /**
     * Get business hours overrides by store identifier
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBusinessHoursOverrideByStoreIdTest() throws ApiException {
        Integer storeId = null;
        OffsetDateTime after = null;
        Integer page = null;
        Integer limit = null;
        RestApiPaginationResultBusinessHoursOverride response = api.getBusinessHoursOverrideByStoreId(storeId, after, page, limit);

        // TODO: test validations
    }
    
    /**
     * Get store end of day report
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEndOfDayReportTest() throws ApiException {
        Integer storeId = null;
        OffsetDateTime date = null;
        RestApiResultStoreEndOfDayReport response = api.getEndOfDayReport(storeId, date);

        // TODO: test validations
    }
    
    /**
     * Get the pre order config for a store, by type
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPreOrderConfigTest() throws ApiException {
        Integer storeId = null;
        String deliveryType = null;
        RestApiResultPreOrderConfig response = api.getPreOrderConfig(storeId, deliveryType);

        // TODO: test validations
    }
    
    /**
     * Get the Preview times of the pre-order configuration
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPreOrderPreviewTest() throws ApiException {
        Integer storeId = null;
        String deliveryType = null;
        Integer preOrderConfigLeadTimeMinutes = null;
        Integer preOrderConfigIntervalMinutes = null;
        Integer preOrderConfigMaxOrderAheadDays = null;
        Boolean preOrderConfigIncludeAsap = null;
        Boolean preOrderConfigIncludeMoreGranularInitialTime = null;
        String preOrderConfigCutOffTimePreviousDayBasic = null;
        String preOrderConfigCutOffTimeCurrentDayBasic = null;
        String preOrderConfigPreOrderTimeDisplayType = null;
        Boolean preOrderConfigAlwaysAppearOpen = null;
        Boolean preOrderConfigRequireExplicitSelectAlways = null;
        RestApiArrayResultPreOrderTime response = api.getPreOrderPreview(storeId, deliveryType, preOrderConfigLeadTimeMinutes, preOrderConfigIntervalMinutes, preOrderConfigMaxOrderAheadDays, preOrderConfigIncludeAsap, preOrderConfigIncludeMoreGranularInitialTime, preOrderConfigCutOffTimePreviousDayBasic, preOrderConfigCutOffTimeCurrentDayBasic, preOrderConfigPreOrderTimeDisplayType, preOrderConfigAlwaysAppearOpen, preOrderConfigRequireExplicitSelectAlways);

        // TODO: test validations
    }
    
    /**
     * Get store by identifier
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStoreByIdTest() throws ApiException {
        Integer storeId = null;
        RestApiResultStore response = api.getStoreById(storeId);

        // TODO: test validations
    }
    
    /**
     * Get all stores by app name id
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStoreHeadersByAppIdTest() throws ApiException {
        String appId = null;
        String storeNameQuery = null;
        Integer page = null;
        Integer limit = null;
        RestApiPaginationResultStoreHeader response = api.getStoreHeadersByAppId(appId, storeNameQuery, page, limit);

        // TODO: test validations
    }
    
    /**
     * Get stores statistics by app name id and storeIds
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStoreNetSalesTest() throws ApiException {
        String appId = null;
        List<Integer> storeId = null;
        RestApiArrayResultStoreStatistics response = api.getStoreNetSales(appId, storeId);

        // TODO: test validations
    }
    
    /**
     * Retrieve Store Service Charge
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStoreServiceChargeTest() throws ApiException {
        Integer storeId = null;
        ServiceCharge response = api.getStoreServiceCharge(storeId);

        // TODO: test validations
    }
    
    /**
     * Get all stores, excluding archived ones
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStoresTest() throws ApiException {
        String searchQuery = null;
        Integer page = null;
        Integer limit = null;
        Integer storeGroupId = null;
        RestApiPaginationResultStore response = api.getStores(searchQuery, page, limit, storeGroupId);

        // TODO: test validations
    }
    
    /**
     * Get all stores by app name id
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStoresByAppIdTest() throws ApiException {
        String appId = null;
        String searchQuery = null;
        Integer page = null;
        Integer limit = null;
        RestApiPaginationResultStore response = api.getStoresByAppId(appId, searchQuery, page, limit);

        // TODO: test validations
    }
    
    /**
     * Get store validation by storeIds
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStoresByStoreIdWithValidationsTest() throws ApiException {
        List<Integer> storeId = null;
        String appId = null;
        Integer page = null;
        Integer limit = null;
        RestApiPaginationResultStoreValidationConfig response = api.getStoresByStoreIdWithValidations(storeId, appId, page, limit);

        // TODO: test validations
    }
    
    /**
     * Publish store
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void publishStoreTest() throws ApiException {
        Integer storeId = null;
        api.publishStore(storeId);

        // TODO: test validations
    }
    
    /**
     * Set Business hours
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setBusinessHoursTest() throws ApiException {
        Integer storeId = null;
        String deliveryType = null;
        BusinessHoursPeriodBase businessHoursPeriod = null;
        RestApiResultBusinessHoursPeriod response = api.setBusinessHours(storeId, deliveryType, businessHoursPeriod);

        // TODO: test validations
    }
    
    /**
     * UPDATE pre order config for a store, by type
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setPreOrdeEnabledTest() throws ApiException {
        Integer storeId = null;
        String deliveryType = null;
        Boolean enabled = null;
        RestApiArrayResultRestApiDefaultResponse response = api.setPreOrdeEnabled(storeId, deliveryType, enabled);

        // TODO: test validations
    }
    
    /**
     * Unpublish store
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unpublishStoreTest() throws ApiException {
        Integer storeId = null;
        api.unpublishStore(storeId);

        // TODO: test validations
    }
    
    /**
     * UPDATE pre order config for a store, by type
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePreOrderConfigTest() throws ApiException {
        Integer storeId = null;
        String deliveryType = null;
        PreOrderConfig preOrderConfig = null;
        RestApiArrayResultRestApiDefaultResponse response = api.updatePreOrderConfig(storeId, deliveryType, preOrderConfig);

        // TODO: test validations
    }
    
    /**
     * Update store by identifier
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateStoreTest() throws ApiException {
        Integer storeId = null;
        StoreBase store = null;
        RestApiResultStore response = api.updateStore(storeId, store);

        // TODO: test validations
    }
    
    /**
     * Update store address
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateStoreAddressTest() throws ApiException {
        Integer storeId = null;
        StoreAddressBase storeAddress = null;
        RestApiResultStoreAddress response = api.updateStoreAddress(storeId, storeAddress);

        // TODO: test validations
    }
    
    /**
     * Update store address coordinates
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateStoreAddressCoordinatesTest() throws ApiException {
        Integer storeId = null;
        Coordinates coordinates = null;
        String appNameId = null;
        RestApiResultCoordinates response = api.updateStoreAddressCoordinates(storeId, coordinates, appNameId);

        // TODO: test validations
    }
    
    /**
     * Update store address
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateStoreAddressFormTest() throws ApiException {
        Integer storeId = null;
        StoreAddressForm address = null;
        Object response = api.updateStoreAddressForm(storeId, address);

        // TODO: test validations
    }
    
}
