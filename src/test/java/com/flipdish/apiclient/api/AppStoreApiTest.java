/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.flipdish.apiclient.api;

import com.flipdish.apiclient.ApiException;
import com.flipdish.apiclient.model.AppDetail;
import com.flipdish.apiclient.model.AppDetailBase;
import java.io.File;
import com.flipdish.apiclient.model.RestApiErrorResult;
import com.flipdish.apiclient.model.RestApiForbiddenResult;
import com.flipdish.apiclient.model.RestApiPaginationResultAppSummary;
import com.flipdish.apiclient.model.RestApiResultAppDetail;
import com.flipdish.apiclient.model.RestApiStringResult;
import com.flipdish.apiclient.model.RestApiUnauthorizedResult;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AppStoreApi
 */
@Ignore
public class AppStoreApiTest {

    private final AppStoreApi api = new AppStoreApi();

    
    /**
     * Update app store app verification
     *
     * [BETA - this endpoint is under development, do not use it in your production system][Note: Only Flipdish staff can verify apps]
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void appVerificationUpdateTest() throws ApiException {
        String appStoreAppId = null;
        String verificationStatus = null;
        api.appVerificationUpdate(appStoreAppId, verificationStatus);

        // TODO: test validations
    }
    
    /**
     * Create app store app
     *
     * [BETA - this endpoint is under development, do not use it in your production system]
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAppStoreAppTest() throws ApiException {
        AppDetailBase appDetailBase = null;
        RestApiResultAppDetail response = api.createAppStoreApp(appDetailBase);

        // TODO: test validations
    }
    
    /**
     * Delete app store app
     *
     * [BETA - this endpoint is under development, do not use it in your production system]
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAppStoreAppTest() throws ApiException {
        String appStoreAppId = null;
        RestApiStringResult response = api.deleteAppStoreApp(appStoreAppId);

        // TODO: test validations
    }
    
    /**
     * Get app store app details
     *
     * [BETA - this endpoint is under development, do not use it in your production system]
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAppStoreAppTest() throws ApiException {
        String appStoreAppId = null;
        AppDetail response = api.getAppStoreApp(appStoreAppId);

        // TODO: test validations
    }
    
    /**
     * Get list of app store app summaries
     *
     * Only returns verified applications [BETA - this endpoint is under development, do not use it in your production system]
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAppStoreAppsTest() throws ApiException {
        String search = null;
        Integer page = null;
        Integer limit = null;
        Boolean excludeNotOwned = null;
        RestApiPaginationResultAppSummary response = api.getAppStoreApps(search, page, limit, excludeNotOwned);

        // TODO: test validations
    }
    
    /**
     * Update app store app
     *
     * [BETA - this endpoint is under development, do not use it in your production system]
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAppStoreAppTest() throws ApiException {
        String appStoreAppId = null;
        AppDetail appDetail = null;
        api.updateAppStoreApp(appStoreAppId, appDetail);

        // TODO: test validations
    }
    
    /**
     * Upload the app store app logo \\ icon
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uploadAppStoreAppLogoTest() throws ApiException {
        String appStoreAppId = null;
        File image = null;
        api.uploadAppStoreAppLogo(appStoreAppId, image);

        // TODO: test validations
    }
    
}
