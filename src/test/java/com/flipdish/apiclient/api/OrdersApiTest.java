/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.flipdish.apiclient.api;

import com.flipdish.apiclient.ApiException;
import com.flipdish.apiclient.model.Accept;
import org.threeten.bp.OffsetDateTime;
import com.flipdish.apiclient.model.OrderDeliveryInformationBase;
import com.flipdish.apiclient.model.OrderFulfillmentStatusUpdate;
import com.flipdish.apiclient.model.Refund;
import com.flipdish.apiclient.model.Reject;
import com.flipdish.apiclient.model.RestApiArrayResultOrderFulfillmentStatus;
import com.flipdish.apiclient.model.RestApiErrorResult;
import com.flipdish.apiclient.model.RestApiForbiddenResult;
import com.flipdish.apiclient.model.RestApiPaginationResultOrder;
import com.flipdish.apiclient.model.RestApiPaginationResultOrderSummary;
import com.flipdish.apiclient.model.RestApiResultOrder;
import com.flipdish.apiclient.model.RestApiResultOrderDeliveryInformation;
import com.flipdish.apiclient.model.RestApiResultOrderFulfillmentStatus;
import com.flipdish.apiclient.model.RestApiResultOrderFulfillmentStatusWithConfigurationActions;
import com.flipdish.apiclient.model.RestApiUnauthorizedResult;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for OrdersApi
 */
@Ignore
public class OrdersApiTest {

    private final OrdersApi api = new OrdersApi();

    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void acceptOrderTest() throws ApiException {
        Integer id = null;
        Accept acceptObject = null;
        api.acceptOrder(id, acceptObject);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void dispatchOrderTest() throws ApiException {
        Integer id = null;
        api.dispatchOrder(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDeliveryInformationTest() throws ApiException {
        Integer orderId = null;
        RestApiResultOrderDeliveryInformation response = api.getDeliveryInformation(orderId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFulfillmentStateTest() throws ApiException {
        Integer orderId = null;
        RestApiResultOrderFulfillmentStatus response = api.getFulfillmentState(orderId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFulfillmentStatusWithDetailsAndActionsTest() throws ApiException {
        Integer orderId = null;
        RestApiResultOrderFulfillmentStatusWithConfigurationActions response = api.getFulfillmentStatusWithDetailsAndActions(orderId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOrderByIdTest() throws ApiException {
        Integer id = null;
        RestApiResultOrder response = api.getOrderById(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOrdersTest() throws ApiException {
        List<Integer> physicalRestaurantId = null;
        List<String> state = null;
        OffsetDateTime from = null;
        OffsetDateTime to = null;
        Integer page = null;
        Integer limit = null;
        RestApiPaginationResultOrder response = api.getOrders(physicalRestaurantId, state, from, to, page, limit);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOrdersSummaryTest() throws ApiException {
        String appId = null;
        String searchQuery = null;
        List<Integer> physicalRestaurantId = null;
        List<String> state = null;
        Integer page = null;
        Integer limit = null;
        Boolean orderByRequestedForTime = null;
        List<String> channels = null;
        List<Integer> orderIds = null;
        OffsetDateTime from = null;
        OffsetDateTime to = null;
        RestApiPaginationResultOrderSummary response = api.getOrdersSummary(appId, searchQuery, physicalRestaurantId, state, page, limit, orderByRequestedForTime, channels, orderIds, from, to);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void refundOrderTest() throws ApiException {
        Integer id = null;
        Refund refundObject = null;
        api.refundOrder(id, refundObject);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rejectOrderTest() throws ApiException {
        Integer id = null;
        Reject rejectObject = null;
        api.rejectOrder(id, rejectObject);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchFulfillmentStatusesTest() throws ApiException {
        String appId = null;
        String orderIds = null;
        RestApiArrayResultOrderFulfillmentStatus response = api.searchFulfillmentStatuses(appId, orderIds);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateDeliveryInformationTest() throws ApiException {
        Integer orderId = null;
        OrderDeliveryInformationBase deliveryInformation = null;
        api.updateDeliveryInformation(orderId, deliveryInformation);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateFulfillmentStateTest() throws ApiException {
        Integer orderId = null;
        OrderFulfillmentStatusUpdate fulfillmentStatusRequest = null;
        api.updateFulfillmentState(orderId, fulfillmentStatusRequest);

        // TODO: test validations
    }
    
}
