/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.flipdish.apiclient.api;

import com.flipdish.apiclient.ApiException;
import com.flipdish.apiclient.model.CardReaderRegistrationRequest;
import com.flipdish.apiclient.model.RestApiErrorResult;
import com.flipdish.apiclient.model.RestApiForbiddenResult;
import com.flipdish.apiclient.model.RestApiResultBluetoothTerminalStatus;
import com.flipdish.apiclient.model.RestApiResultCardReader;
import com.flipdish.apiclient.model.RestApiResultStripeTerminalConnectionToken;
import com.flipdish.apiclient.model.RestApiResultStripeTerminalLocation;
import com.flipdish.apiclient.model.RestApiResultStripeTerminalPrivateKey;
import com.flipdish.apiclient.model.RestApiUnauthorizedResult;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CardReadersApi
 */
@Ignore
public class CardReadersApiTest {

    private final CardReadersApi api = new CardReadersApi();

    
    /**
     * Get Authorization Key for Stripe Terminal
     *
     * Can only be called by Kiosk  [BETA - this endpoint is under development, do not use it in your production system]
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void authorizeStripeTerminalTest() throws ApiException {
        String appId = null;
        RestApiResultStripeTerminalPrivateKey response = api.authorizeStripeTerminal(appId);

        // TODO: test validations
    }
    
    /**
     * Cancel currently initiated install update for bluetooth terminal
     *
     * [BETA - this endpoint is under development, do not use it in your production system]
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cancelCurrentlyInitiatedBluetoothDeviceUpdateTest() throws ApiException {
        String appId = null;
        String deviceId = null;
        String terminalType = null;
        api.cancelCurrentlyInitiatedBluetoothDeviceUpdate(appId, deviceId, terminalType);

        // TODO: test validations
    }
    
    /**
     * Get Location ID for Stripe Terminal
     *
     * Can only be called by Kiosk  [BETA - this endpoint is under development, do not use it in your production system]
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void generateStripeTerminalLocationTest() throws ApiException {
        String appId = null;
        RestApiResultStripeTerminalLocation response = api.generateStripeTerminalLocation(appId);

        // TODO: test validations
    }
    
    /**
     * Get the status of the bluetooth terminal
     *
     * [BETA - this endpoint is under development, do not use it in your production system]
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBluetoothTerminalStatusTest() throws ApiException {
        String appId = null;
        String deviceId = null;
        RestApiResultBluetoothTerminalStatus response = api.getBluetoothTerminalStatus(appId, deviceId);

        // TODO: test validations
    }
    
    /**
     * Get Connection Token For a Stripe Terminal
     *
     * Can only be called by Kiosk
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStripeConnectionTokenTest() throws ApiException {
        String appId = null;
        RestApiResultStripeTerminalConnectionToken response = api.getStripeConnectionToken(appId);

        // TODO: test validations
    }
    
    /**
     * Trigger check for Bluetooth device update on Kiosk
     *
     * [BETA - this endpoint is under development, do not use it in your production system]
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void initiateBluetoothTerminalDeviceUpdateCheckTest() throws ApiException {
        String appId = null;
        String deviceId = null;
        String terminalType = null;
        api.initiateBluetoothTerminalDeviceUpdateCheck(appId, deviceId, terminalType);

        // TODO: test validations
    }
    
    /**
     * Initiate stripe terminal pairing mode
     *
     * [BETA - this endpoint is under development, do not use it in your production system]
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void initiateKioskBluetoothPairingModeTest() throws ApiException {
        String appId = null;
        String deviceId = null;
        String terminalType = null;
        api.initiateKioskBluetoothPairingMode(appId, deviceId, terminalType);

        // TODO: test validations
    }
    
    /**
     * Initiate Kiosk Update Install for bluetooth terminal
     *
     * [BETA - this endpoint is under development, do not use it in your production system]
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void initiateKioskBluetoothUpdateInstallTest() throws ApiException {
        String appId = null;
        String deviceId = null;
        String terminalType = null;
        api.initiateKioskBluetoothUpdateInstall(appId, deviceId, terminalType);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void registerStripeTerminalTest() throws ApiException {
        CardReaderRegistrationRequest request = null;
        String appId = null;
        RestApiResultCardReader response = api.registerStripeTerminal(request, appId);

        // TODO: test validations
    }
    
    /**
     * Unpair the currently paired stripe terminal
     *
     * [BETA - this endpoint is under development, do not use it in your production system]
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unpairCurrentlyPairedBluetoothDeviceTest() throws ApiException {
        String appId = null;
        String deviceId = null;
        api.unpairCurrentlyPairedBluetoothDevice(appId, deviceId);

        // TODO: test validations
    }
    
}
