/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.flipdish.apiclient.api;

import com.flipdish.apiclient.ApiCallback;
import com.flipdish.apiclient.ApiClient;
import com.flipdish.apiclient.ApiException;
import com.flipdish.apiclient.ApiResponse;
import com.flipdish.apiclient.Configuration;
import com.flipdish.apiclient.Pair;
import com.flipdish.apiclient.ProgressRequestBody;
import com.flipdish.apiclient.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.flipdish.apiclient.model.RestApiArrayResultApmCurrencyDataPoint;
import com.flipdish.apiclient.model.RestApiArrayResultApmDataPoint;
import com.flipdish.apiclient.model.RestApiArrayResultApmHourlyDataPoint;
import com.flipdish.apiclient.model.RestApiErrorResult;
import com.flipdish.apiclient.model.RestApiForbiddenResult;
import com.flipdish.apiclient.model.RestApiPaginationResultPhoneCall;
import com.flipdish.apiclient.model.RestApiResultApmStatistics;
import com.flipdish.apiclient.model.RestApiUnauthorizedResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ApmApi {
    private ApiClient apiClient;

    public ApmApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ApmApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getBasicStatistics
     * @param appId App Name (required)
     * @param storeId List of stores to search by (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBasicStatisticsCall(String appId, List<Integer> storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/apm/statistics"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storeId != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "storeId", storeId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBasicStatisticsValidateBeforeCall(String appId, List<Integer> storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getBasicStatistics(Async)");
        }
        

        com.squareup.okhttp.Call call = getBasicStatisticsCall(appId, storeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * [PRIVATE API] Get Basic Statistics
     * 
     * @param appId App Name (required)
     * @param storeId List of stores to search by (optional)
     * @return RestApiResultApmStatistics
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultApmStatistics getBasicStatistics(String appId, List<Integer> storeId) throws ApiException {
        ApiResponse<RestApiResultApmStatistics> resp = getBasicStatisticsWithHttpInfo(appId, storeId);
        return resp.getData();
    }

    /**
     * [PRIVATE API] Get Basic Statistics
     * 
     * @param appId App Name (required)
     * @param storeId List of stores to search by (optional)
     * @return ApiResponse&lt;RestApiResultApmStatistics&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultApmStatistics> getBasicStatisticsWithHttpInfo(String appId, List<Integer> storeId) throws ApiException {
        com.squareup.okhttp.Call call = getBasicStatisticsValidateBeforeCall(appId, storeId, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultApmStatistics>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * [PRIVATE API] Get Basic Statistics (asynchronously)
     * 
     * @param appId App Name (required)
     * @param storeId List of stores to search by (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBasicStatisticsAsync(String appId, List<Integer> storeId, final ApiCallback<RestApiResultApmStatistics> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBasicStatisticsValidateBeforeCall(appId, storeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultApmStatistics>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCalendarWeekStatistics
     * @param appId App Name (required)
     * @param storeId List of stores to search by (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCalendarWeekStatisticsCall(String appId, List<Integer> storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/apm/statistics/calendar"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storeId != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "storeId", storeId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCalendarWeekStatisticsValidateBeforeCall(String appId, List<Integer> storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getCalendarWeekStatistics(Async)");
        }
        

        com.squareup.okhttp.Call call = getCalendarWeekStatisticsCall(appId, storeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * [PRIVATE API] Get Calendar statistics
     * 
     * @param appId App Name (required)
     * @param storeId List of stores to search by (optional)
     * @return RestApiArrayResultApmHourlyDataPoint
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiArrayResultApmHourlyDataPoint getCalendarWeekStatistics(String appId, List<Integer> storeId) throws ApiException {
        ApiResponse<RestApiArrayResultApmHourlyDataPoint> resp = getCalendarWeekStatisticsWithHttpInfo(appId, storeId);
        return resp.getData();
    }

    /**
     * [PRIVATE API] Get Calendar statistics
     * 
     * @param appId App Name (required)
     * @param storeId List of stores to search by (optional)
     * @return ApiResponse&lt;RestApiArrayResultApmHourlyDataPoint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiArrayResultApmHourlyDataPoint> getCalendarWeekStatisticsWithHttpInfo(String appId, List<Integer> storeId) throws ApiException {
        com.squareup.okhttp.Call call = getCalendarWeekStatisticsValidateBeforeCall(appId, storeId, null, null);
        Type localVarReturnType = new TypeToken<RestApiArrayResultApmHourlyDataPoint>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * [PRIVATE API] Get Calendar statistics (asynchronously)
     * 
     * @param appId App Name (required)
     * @param storeId List of stores to search by (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCalendarWeekStatisticsAsync(String appId, List<Integer> storeId, final ApiCallback<RestApiArrayResultApmHourlyDataPoint> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCalendarWeekStatisticsValidateBeforeCall(appId, storeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiArrayResultApmHourlyDataPoint>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCallsStatistics
     * @param appId App Name (required)
     * @param aggregateDataBy Aggregate data by day \\ week (required)
     * @param dataPointLimit Amount of data points per request (optional)
     * @param storeId List of stores to search by (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCallsStatisticsCall(String appId, String aggregateDataBy, Integer dataPointLimit, List<Integer> storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/apm/statistics/calls/{aggregateDataBy}"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "aggregateDataBy" + "\\}", apiClient.escapeString(aggregateDataBy.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (dataPointLimit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dataPointLimit", dataPointLimit));
        if (storeId != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "storeId", storeId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCallsStatisticsValidateBeforeCall(String appId, String aggregateDataBy, Integer dataPointLimit, List<Integer> storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getCallsStatistics(Async)");
        }
        
        // verify the required parameter 'aggregateDataBy' is set
        if (aggregateDataBy == null) {
            throw new ApiException("Missing the required parameter 'aggregateDataBy' when calling getCallsStatistics(Async)");
        }
        

        com.squareup.okhttp.Call call = getCallsStatisticsCall(appId, aggregateDataBy, dataPointLimit, storeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * [PRIVATE API] Get Calls Statistics
     * 
     * @param appId App Name (required)
     * @param aggregateDataBy Aggregate data by day \\ week (required)
     * @param dataPointLimit Amount of data points per request (optional)
     * @param storeId List of stores to search by (optional)
     * @return RestApiArrayResultApmDataPoint
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiArrayResultApmDataPoint getCallsStatistics(String appId, String aggregateDataBy, Integer dataPointLimit, List<Integer> storeId) throws ApiException {
        ApiResponse<RestApiArrayResultApmDataPoint> resp = getCallsStatisticsWithHttpInfo(appId, aggregateDataBy, dataPointLimit, storeId);
        return resp.getData();
    }

    /**
     * [PRIVATE API] Get Calls Statistics
     * 
     * @param appId App Name (required)
     * @param aggregateDataBy Aggregate data by day \\ week (required)
     * @param dataPointLimit Amount of data points per request (optional)
     * @param storeId List of stores to search by (optional)
     * @return ApiResponse&lt;RestApiArrayResultApmDataPoint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiArrayResultApmDataPoint> getCallsStatisticsWithHttpInfo(String appId, String aggregateDataBy, Integer dataPointLimit, List<Integer> storeId) throws ApiException {
        com.squareup.okhttp.Call call = getCallsStatisticsValidateBeforeCall(appId, aggregateDataBy, dataPointLimit, storeId, null, null);
        Type localVarReturnType = new TypeToken<RestApiArrayResultApmDataPoint>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * [PRIVATE API] Get Calls Statistics (asynchronously)
     * 
     * @param appId App Name (required)
     * @param aggregateDataBy Aggregate data by day \\ week (required)
     * @param dataPointLimit Amount of data points per request (optional)
     * @param storeId List of stores to search by (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCallsStatisticsAsync(String appId, String aggregateDataBy, Integer dataPointLimit, List<Integer> storeId, final ApiCallback<RestApiArrayResultApmDataPoint> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCallsStatisticsValidateBeforeCall(appId, aggregateDataBy, dataPointLimit, storeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiArrayResultApmDataPoint>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOrderStatistics
     * @param appId App Name (required)
     * @param aggregateDataBy Aggregate data by day \\ week (required)
     * @param dataPointLimit Amount of data points per request (optional)
     * @param storeId List of stores to search by (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOrderStatisticsCall(String appId, String aggregateDataBy, Integer dataPointLimit, List<Integer> storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/apm/statistics/orders/{aggregateDataBy}"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "aggregateDataBy" + "\\}", apiClient.escapeString(aggregateDataBy.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (dataPointLimit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dataPointLimit", dataPointLimit));
        if (storeId != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "storeId", storeId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOrderStatisticsValidateBeforeCall(String appId, String aggregateDataBy, Integer dataPointLimit, List<Integer> storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getOrderStatistics(Async)");
        }
        
        // verify the required parameter 'aggregateDataBy' is set
        if (aggregateDataBy == null) {
            throw new ApiException("Missing the required parameter 'aggregateDataBy' when calling getOrderStatistics(Async)");
        }
        

        com.squareup.okhttp.Call call = getOrderStatisticsCall(appId, aggregateDataBy, dataPointLimit, storeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * [PRIVATE API] Get Order Statistics (Value of Orders)
     * 
     * @param appId App Name (required)
     * @param aggregateDataBy Aggregate data by day \\ week (required)
     * @param dataPointLimit Amount of data points per request (optional)
     * @param storeId List of stores to search by (optional)
     * @return RestApiArrayResultApmCurrencyDataPoint
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiArrayResultApmCurrencyDataPoint getOrderStatistics(String appId, String aggregateDataBy, Integer dataPointLimit, List<Integer> storeId) throws ApiException {
        ApiResponse<RestApiArrayResultApmCurrencyDataPoint> resp = getOrderStatisticsWithHttpInfo(appId, aggregateDataBy, dataPointLimit, storeId);
        return resp.getData();
    }

    /**
     * [PRIVATE API] Get Order Statistics (Value of Orders)
     * 
     * @param appId App Name (required)
     * @param aggregateDataBy Aggregate data by day \\ week (required)
     * @param dataPointLimit Amount of data points per request (optional)
     * @param storeId List of stores to search by (optional)
     * @return ApiResponse&lt;RestApiArrayResultApmCurrencyDataPoint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiArrayResultApmCurrencyDataPoint> getOrderStatisticsWithHttpInfo(String appId, String aggregateDataBy, Integer dataPointLimit, List<Integer> storeId) throws ApiException {
        com.squareup.okhttp.Call call = getOrderStatisticsValidateBeforeCall(appId, aggregateDataBy, dataPointLimit, storeId, null, null);
        Type localVarReturnType = new TypeToken<RestApiArrayResultApmCurrencyDataPoint>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * [PRIVATE API] Get Order Statistics (Value of Orders) (asynchronously)
     * 
     * @param appId App Name (required)
     * @param aggregateDataBy Aggregate data by day \\ week (required)
     * @param dataPointLimit Amount of data points per request (optional)
     * @param storeId List of stores to search by (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOrderStatisticsAsync(String appId, String aggregateDataBy, Integer dataPointLimit, List<Integer> storeId, final ApiCallback<RestApiArrayResultApmCurrencyDataPoint> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOrderStatisticsValidateBeforeCall(appId, aggregateDataBy, dataPointLimit, storeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiArrayResultApmCurrencyDataPoint>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPaginatedCallList
     * @param appId App Name (required)
     * @param page Requested page index (optional)
     * @param limit Requested page limit (optional)
     * @param storeId List of stores to search by (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPaginatedCallListCall(String appId, Integer page, Integer limit, List<Integer> storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/apm/calls"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (storeId != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "storeId", storeId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPaginatedCallListValidateBeforeCall(String appId, Integer page, Integer limit, List<Integer> storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getPaginatedCallList(Async)");
        }
        

        com.squareup.okhttp.Call call = getPaginatedCallListCall(appId, page, limit, storeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * [PRIVATE API] Get paginated APM call list
     * 
     * @param appId App Name (required)
     * @param page Requested page index (optional)
     * @param limit Requested page limit (optional)
     * @param storeId List of stores to search by (optional)
     * @return RestApiPaginationResultPhoneCall
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiPaginationResultPhoneCall getPaginatedCallList(String appId, Integer page, Integer limit, List<Integer> storeId) throws ApiException {
        ApiResponse<RestApiPaginationResultPhoneCall> resp = getPaginatedCallListWithHttpInfo(appId, page, limit, storeId);
        return resp.getData();
    }

    /**
     * [PRIVATE API] Get paginated APM call list
     * 
     * @param appId App Name (required)
     * @param page Requested page index (optional)
     * @param limit Requested page limit (optional)
     * @param storeId List of stores to search by (optional)
     * @return ApiResponse&lt;RestApiPaginationResultPhoneCall&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiPaginationResultPhoneCall> getPaginatedCallListWithHttpInfo(String appId, Integer page, Integer limit, List<Integer> storeId) throws ApiException {
        com.squareup.okhttp.Call call = getPaginatedCallListValidateBeforeCall(appId, page, limit, storeId, null, null);
        Type localVarReturnType = new TypeToken<RestApiPaginationResultPhoneCall>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * [PRIVATE API] Get paginated APM call list (asynchronously)
     * 
     * @param appId App Name (required)
     * @param page Requested page index (optional)
     * @param limit Requested page limit (optional)
     * @param storeId List of stores to search by (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPaginatedCallListAsync(String appId, Integer page, Integer limit, List<Integer> storeId, final ApiCallback<RestApiPaginationResultPhoneCall> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPaginatedCallListValidateBeforeCall(appId, page, limit, storeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiPaginationResultPhoneCall>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
