/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.flipdish.apiclient.api;

import com.flipdish.apiclient.ApiCallback;
import com.flipdish.apiclient.ApiClient;
import com.flipdish.apiclient.ApiException;
import com.flipdish.apiclient.ApiResponse;
import com.flipdish.apiclient.Configuration;
import com.flipdish.apiclient.Pair;
import com.flipdish.apiclient.ProgressRequestBody;
import com.flipdish.apiclient.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.flipdish.apiclient.model.BusinessHoursOverrideBase;
import com.flipdish.apiclient.model.BusinessHoursPeriodBase;
import com.flipdish.apiclient.model.Coordinates;
import java.time.OffsetDateTime;
import com.flipdish.apiclient.model.RestApiArrayResultBusinessHoursPeriod;
import com.flipdish.apiclient.model.RestApiArrayResultProcessingFeeConfig;
import com.flipdish.apiclient.model.RestApiArrayResultRestApiDefaultResponse;
import com.flipdish.apiclient.model.RestApiErrorResult;
import com.flipdish.apiclient.model.RestApiForbiddenResult;
import com.flipdish.apiclient.model.RestApiPaginationResultBusinessHoursOverride;
import com.flipdish.apiclient.model.RestApiPaginationResultStore;
import com.flipdish.apiclient.model.RestApiResultBusinessHoursOverride;
import com.flipdish.apiclient.model.RestApiResultBusinessHoursPeriod;
import com.flipdish.apiclient.model.RestApiResultCoordinates;
import com.flipdish.apiclient.model.RestApiResultProcessingFeeConfig;
import com.flipdish.apiclient.model.RestApiResultStore;
import com.flipdish.apiclient.model.RestApiResultStoreAddress;
import com.flipdish.apiclient.model.RestApiUnauthorizedResult;
import com.flipdish.apiclient.model.StoreAddressBase;
import com.flipdish.apiclient.model.StoreBase;
import com.flipdish.apiclient.model.StoreCloneSettings;
import com.flipdish.apiclient.model.StoreCreateBase;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StoresApi {
    private ApiClient apiClient;

    public StoresApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StoresApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for cloneStore
     * @param storeId Store identifier (required)
     * @param settings Settings for cloning the store (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cloneStoreCall(Integer storeId, StoreCloneSettings settings, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = settings;

        // create path and map variables
        String localVarPath = "/api/v1.0/stores/{storeId}/clone"
            .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cloneStoreValidateBeforeCall(Integer storeId, StoreCloneSettings settings, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling cloneStore(Async)");
        }
        
        // verify the required parameter 'settings' is set
        if (settings == null) {
            throw new ApiException("Missing the required parameter 'settings' when calling cloneStore(Async)");
        }
        

        com.squareup.okhttp.Call call = cloneStoreCall(storeId, settings, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Clone store with store clone settings
     * 
     * @param storeId Store identifier (required)
     * @param settings Settings for cloning the store (required)
     * @return RestApiResultStore
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultStore cloneStore(Integer storeId, StoreCloneSettings settings) throws ApiException {
        ApiResponse<RestApiResultStore> resp = cloneStoreWithHttpInfo(storeId, settings);
        return resp.getData();
    }

    /**
     * Clone store with store clone settings
     * 
     * @param storeId Store identifier (required)
     * @param settings Settings for cloning the store (required)
     * @return ApiResponse&lt;RestApiResultStore&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultStore> cloneStoreWithHttpInfo(Integer storeId, StoreCloneSettings settings) throws ApiException {
        com.squareup.okhttp.Call call = cloneStoreValidateBeforeCall(storeId, settings, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultStore>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Clone store with store clone settings (asynchronously)
     * 
     * @param storeId Store identifier (required)
     * @param settings Settings for cloning the store (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cloneStoreAsync(Integer storeId, StoreCloneSettings settings, final ApiCallback<RestApiResultStore> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cloneStoreValidateBeforeCall(storeId, settings, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultStore>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createBusinessHoursOverrideByStoreId
     * @param storeId Store identifier (required)
     * @param businessHoursOverride Business Hours Override (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createBusinessHoursOverrideByStoreIdCall(Integer storeId, BusinessHoursOverrideBase businessHoursOverride, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = businessHoursOverride;

        // create path and map variables
        String localVarPath = "/api/v1.0/stores/{storeId}/businesshoursoverrides"
            .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createBusinessHoursOverrideByStoreIdValidateBeforeCall(Integer storeId, BusinessHoursOverrideBase businessHoursOverride, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling createBusinessHoursOverrideByStoreId(Async)");
        }
        
        // verify the required parameter 'businessHoursOverride' is set
        if (businessHoursOverride == null) {
            throw new ApiException("Missing the required parameter 'businessHoursOverride' when calling createBusinessHoursOverrideByStoreId(Async)");
        }
        

        com.squareup.okhttp.Call call = createBusinessHoursOverrideByStoreIdCall(storeId, businessHoursOverride, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create Business Hours Override for a store
     * 
     * @param storeId Store identifier (required)
     * @param businessHoursOverride Business Hours Override (required)
     * @return RestApiResultBusinessHoursOverride
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultBusinessHoursOverride createBusinessHoursOverrideByStoreId(Integer storeId, BusinessHoursOverrideBase businessHoursOverride) throws ApiException {
        ApiResponse<RestApiResultBusinessHoursOverride> resp = createBusinessHoursOverrideByStoreIdWithHttpInfo(storeId, businessHoursOverride);
        return resp.getData();
    }

    /**
     * Create Business Hours Override for a store
     * 
     * @param storeId Store identifier (required)
     * @param businessHoursOverride Business Hours Override (required)
     * @return ApiResponse&lt;RestApiResultBusinessHoursOverride&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultBusinessHoursOverride> createBusinessHoursOverrideByStoreIdWithHttpInfo(Integer storeId, BusinessHoursOverrideBase businessHoursOverride) throws ApiException {
        com.squareup.okhttp.Call call = createBusinessHoursOverrideByStoreIdValidateBeforeCall(storeId, businessHoursOverride, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultBusinessHoursOverride>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create Business Hours Override for a store (asynchronously)
     * 
     * @param storeId Store identifier (required)
     * @param businessHoursOverride Business Hours Override (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createBusinessHoursOverrideByStoreIdAsync(Integer storeId, BusinessHoursOverrideBase businessHoursOverride, final ApiCallback<RestApiResultBusinessHoursOverride> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createBusinessHoursOverrideByStoreIdValidateBeforeCall(storeId, businessHoursOverride, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultBusinessHoursOverride>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createStore
     * @param storeGroupId Store Group identifier (required)
     * @param store Store (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createStoreCall(Integer storeGroupId, StoreCreateBase store, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = store;

        // create path and map variables
        String localVarPath = "/api/v1.0/stores";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storeGroupId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storeGroupId", storeGroupId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createStoreValidateBeforeCall(Integer storeGroupId, StoreCreateBase store, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeGroupId' is set
        if (storeGroupId == null) {
            throw new ApiException("Missing the required parameter 'storeGroupId' when calling createStore(Async)");
        }
        
        // verify the required parameter 'store' is set
        if (store == null) {
            throw new ApiException("Missing the required parameter 'store' when calling createStore(Async)");
        }
        

        com.squareup.okhttp.Call call = createStoreCall(storeGroupId, store, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create store with Store Group identifier
     * 
     * @param storeGroupId Store Group identifier (required)
     * @param store Store (required)
     * @return RestApiResultStore
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultStore createStore(Integer storeGroupId, StoreCreateBase store) throws ApiException {
        ApiResponse<RestApiResultStore> resp = createStoreWithHttpInfo(storeGroupId, store);
        return resp.getData();
    }

    /**
     * Create store with Store Group identifier
     * 
     * @param storeGroupId Store Group identifier (required)
     * @param store Store (required)
     * @return ApiResponse&lt;RestApiResultStore&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultStore> createStoreWithHttpInfo(Integer storeGroupId, StoreCreateBase store) throws ApiException {
        com.squareup.okhttp.Call call = createStoreValidateBeforeCall(storeGroupId, store, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultStore>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create store with Store Group identifier (asynchronously)
     * 
     * @param storeGroupId Store Group identifier (required)
     * @param store Store (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createStoreAsync(Integer storeGroupId, StoreCreateBase store, final ApiCallback<RestApiResultStore> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createStoreValidateBeforeCall(storeGroupId, store, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultStore>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteBusinessHoursOverride
     * @param storeId  (required)
     * @param businessHoursOverrideId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteBusinessHoursOverrideCall(Integer storeId, Integer businessHoursOverrideId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/stores/{storeId}/businesshoursoverrides/{businessHoursOverrideId}"
            .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()))
            .replaceAll("\\{" + "businessHoursOverrideId" + "\\}", apiClient.escapeString(businessHoursOverrideId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteBusinessHoursOverrideValidateBeforeCall(Integer storeId, Integer businessHoursOverrideId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling deleteBusinessHoursOverride(Async)");
        }
        
        // verify the required parameter 'businessHoursOverrideId' is set
        if (businessHoursOverrideId == null) {
            throw new ApiException("Missing the required parameter 'businessHoursOverrideId' when calling deleteBusinessHoursOverride(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteBusinessHoursOverrideCall(storeId, businessHoursOverrideId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete Business Hours Override for a store
     * 
     * @param storeId  (required)
     * @param businessHoursOverrideId  (required)
     * @return RestApiArrayResultRestApiDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiArrayResultRestApiDefaultResponse deleteBusinessHoursOverride(Integer storeId, Integer businessHoursOverrideId) throws ApiException {
        ApiResponse<RestApiArrayResultRestApiDefaultResponse> resp = deleteBusinessHoursOverrideWithHttpInfo(storeId, businessHoursOverrideId);
        return resp.getData();
    }

    /**
     * Delete Business Hours Override for a store
     * 
     * @param storeId  (required)
     * @param businessHoursOverrideId  (required)
     * @return ApiResponse&lt;RestApiArrayResultRestApiDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiArrayResultRestApiDefaultResponse> deleteBusinessHoursOverrideWithHttpInfo(Integer storeId, Integer businessHoursOverrideId) throws ApiException {
        com.squareup.okhttp.Call call = deleteBusinessHoursOverrideValidateBeforeCall(storeId, businessHoursOverrideId, null, null);
        Type localVarReturnType = new TypeToken<RestApiArrayResultRestApiDefaultResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete Business Hours Override for a store (asynchronously)
     * 
     * @param storeId  (required)
     * @param businessHoursOverrideId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteBusinessHoursOverrideAsync(Integer storeId, Integer businessHoursOverrideId, final ApiCallback<RestApiArrayResultRestApiDefaultResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteBusinessHoursOverrideValidateBeforeCall(storeId, businessHoursOverrideId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiArrayResultRestApiDefaultResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBusinessHours
     * @param storeId Store identifier (required)
     * @param deliveryType Deliery type (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBusinessHoursCall(Integer storeId, String deliveryType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/stores/{storeId}/availability/{deliveryType}"
            .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()))
            .replaceAll("\\{" + "deliveryType" + "\\}", apiClient.escapeString(deliveryType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBusinessHoursValidateBeforeCall(Integer storeId, String deliveryType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling getBusinessHours(Async)");
        }
        
        // verify the required parameter 'deliveryType' is set
        if (deliveryType == null) {
            throw new ApiException("Missing the required parameter 'deliveryType' when calling getBusinessHours(Async)");
        }
        

        com.squareup.okhttp.Call call = getBusinessHoursCall(storeId, deliveryType, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Bussiness hours
     * 
     * @param storeId Store identifier (required)
     * @param deliveryType Deliery type (required)
     * @return RestApiArrayResultBusinessHoursPeriod
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiArrayResultBusinessHoursPeriod getBusinessHours(Integer storeId, String deliveryType) throws ApiException {
        ApiResponse<RestApiArrayResultBusinessHoursPeriod> resp = getBusinessHoursWithHttpInfo(storeId, deliveryType);
        return resp.getData();
    }

    /**
     * Get Bussiness hours
     * 
     * @param storeId Store identifier (required)
     * @param deliveryType Deliery type (required)
     * @return ApiResponse&lt;RestApiArrayResultBusinessHoursPeriod&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiArrayResultBusinessHoursPeriod> getBusinessHoursWithHttpInfo(Integer storeId, String deliveryType) throws ApiException {
        com.squareup.okhttp.Call call = getBusinessHoursValidateBeforeCall(storeId, deliveryType, null, null);
        Type localVarReturnType = new TypeToken<RestApiArrayResultBusinessHoursPeriod>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Bussiness hours (asynchronously)
     * 
     * @param storeId Store identifier (required)
     * @param deliveryType Deliery type (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBusinessHoursAsync(Integer storeId, String deliveryType, final ApiCallback<RestApiArrayResultBusinessHoursPeriod> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBusinessHoursValidateBeforeCall(storeId, deliveryType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiArrayResultBusinessHoursPeriod>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBusinessHoursOverrideByStoreId
     * @param storeId Store identifier (required)
     * @param after Return results that ended after this datetime. Default value is the current datetime. (optional)
     * @param page Requested page index (optional)
     * @param limit Requested page limit (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBusinessHoursOverrideByStoreIdCall(Integer storeId, OffsetDateTime after, Integer page, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/stores/{storeId}/businesshoursoverrides"
            .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (after != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("after", after));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBusinessHoursOverrideByStoreIdValidateBeforeCall(Integer storeId, OffsetDateTime after, Integer page, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling getBusinessHoursOverrideByStoreId(Async)");
        }
        

        com.squareup.okhttp.Call call = getBusinessHoursOverrideByStoreIdCall(storeId, after, page, limit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get business hours overrides by store identifier
     * 
     * @param storeId Store identifier (required)
     * @param after Return results that ended after this datetime. Default value is the current datetime. (optional)
     * @param page Requested page index (optional)
     * @param limit Requested page limit (optional)
     * @return RestApiPaginationResultBusinessHoursOverride
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiPaginationResultBusinessHoursOverride getBusinessHoursOverrideByStoreId(Integer storeId, OffsetDateTime after, Integer page, Integer limit) throws ApiException {
        ApiResponse<RestApiPaginationResultBusinessHoursOverride> resp = getBusinessHoursOverrideByStoreIdWithHttpInfo(storeId, after, page, limit);
        return resp.getData();
    }

    /**
     * Get business hours overrides by store identifier
     * 
     * @param storeId Store identifier (required)
     * @param after Return results that ended after this datetime. Default value is the current datetime. (optional)
     * @param page Requested page index (optional)
     * @param limit Requested page limit (optional)
     * @return ApiResponse&lt;RestApiPaginationResultBusinessHoursOverride&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiPaginationResultBusinessHoursOverride> getBusinessHoursOverrideByStoreIdWithHttpInfo(Integer storeId, OffsetDateTime after, Integer page, Integer limit) throws ApiException {
        com.squareup.okhttp.Call call = getBusinessHoursOverrideByStoreIdValidateBeforeCall(storeId, after, page, limit, null, null);
        Type localVarReturnType = new TypeToken<RestApiPaginationResultBusinessHoursOverride>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get business hours overrides by store identifier (asynchronously)
     * 
     * @param storeId Store identifier (required)
     * @param after Return results that ended after this datetime. Default value is the current datetime. (optional)
     * @param page Requested page index (optional)
     * @param limit Requested page limit (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBusinessHoursOverrideByStoreIdAsync(Integer storeId, OffsetDateTime after, Integer page, Integer limit, final ApiCallback<RestApiPaginationResultBusinessHoursOverride> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBusinessHoursOverrideByStoreIdValidateBeforeCall(storeId, after, page, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiPaginationResultBusinessHoursOverride>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getProcessingFeeConfigsByStoreId
     * @param storeId Store identifier (required)
     * @param appNameId App Name Id(Not used, still here for compatability reasons) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getProcessingFeeConfigsByStoreIdCall(Integer storeId, String appNameId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/stores/{storeId}/processingfeeconfigs"
            .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (appNameId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("appNameId", appNameId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getProcessingFeeConfigsByStoreIdValidateBeforeCall(Integer storeId, String appNameId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling getProcessingFeeConfigsByStoreId(Async)");
        }
        

        com.squareup.okhttp.Call call = getProcessingFeeConfigsByStoreIdCall(storeId, appNameId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get processing fee configs by store identifier
     * 
     * @param storeId Store identifier (required)
     * @param appNameId App Name Id(Not used, still here for compatability reasons) (optional)
     * @return RestApiArrayResultProcessingFeeConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiArrayResultProcessingFeeConfig getProcessingFeeConfigsByStoreId(Integer storeId, String appNameId) throws ApiException {
        ApiResponse<RestApiArrayResultProcessingFeeConfig> resp = getProcessingFeeConfigsByStoreIdWithHttpInfo(storeId, appNameId);
        return resp.getData();
    }

    /**
     * Get processing fee configs by store identifier
     * 
     * @param storeId Store identifier (required)
     * @param appNameId App Name Id(Not used, still here for compatability reasons) (optional)
     * @return ApiResponse&lt;RestApiArrayResultProcessingFeeConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiArrayResultProcessingFeeConfig> getProcessingFeeConfigsByStoreIdWithHttpInfo(Integer storeId, String appNameId) throws ApiException {
        com.squareup.okhttp.Call call = getProcessingFeeConfigsByStoreIdValidateBeforeCall(storeId, appNameId, null, null);
        Type localVarReturnType = new TypeToken<RestApiArrayResultProcessingFeeConfig>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get processing fee configs by store identifier (asynchronously)
     * 
     * @param storeId Store identifier (required)
     * @param appNameId App Name Id(Not used, still here for compatability reasons) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getProcessingFeeConfigsByStoreIdAsync(Integer storeId, String appNameId, final ApiCallback<RestApiArrayResultProcessingFeeConfig> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getProcessingFeeConfigsByStoreIdValidateBeforeCall(storeId, appNameId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiArrayResultProcessingFeeConfig>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getProcessingFeeConfigsByStoreIdAndPaymentAccountType
     * @param storeId Store identifier (required)
     * @param paymentAccountType  (required)
     * @param appNameId App Name Id(Not used, still here for compatability reasons) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getProcessingFeeConfigsByStoreIdAndPaymentAccountTypeCall(Integer storeId, String paymentAccountType, String appNameId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/stores/{storeId}/processingfeeconfigs/{paymentAccountType}"
            .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()))
            .replaceAll("\\{" + "paymentAccountType" + "\\}", apiClient.escapeString(paymentAccountType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (appNameId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("appNameId", appNameId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getProcessingFeeConfigsByStoreIdAndPaymentAccountTypeValidateBeforeCall(Integer storeId, String paymentAccountType, String appNameId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling getProcessingFeeConfigsByStoreIdAndPaymentAccountType(Async)");
        }
        
        // verify the required parameter 'paymentAccountType' is set
        if (paymentAccountType == null) {
            throw new ApiException("Missing the required parameter 'paymentAccountType' when calling getProcessingFeeConfigsByStoreIdAndPaymentAccountType(Async)");
        }
        

        com.squareup.okhttp.Call call = getProcessingFeeConfigsByStoreIdAndPaymentAccountTypeCall(storeId, paymentAccountType, appNameId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get processing fee configs by store identifier
     * 
     * @param storeId Store identifier (required)
     * @param paymentAccountType  (required)
     * @param appNameId App Name Id(Not used, still here for compatability reasons) (optional)
     * @return RestApiResultProcessingFeeConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultProcessingFeeConfig getProcessingFeeConfigsByStoreIdAndPaymentAccountType(Integer storeId, String paymentAccountType, String appNameId) throws ApiException {
        ApiResponse<RestApiResultProcessingFeeConfig> resp = getProcessingFeeConfigsByStoreIdAndPaymentAccountTypeWithHttpInfo(storeId, paymentAccountType, appNameId);
        return resp.getData();
    }

    /**
     * Get processing fee configs by store identifier
     * 
     * @param storeId Store identifier (required)
     * @param paymentAccountType  (required)
     * @param appNameId App Name Id(Not used, still here for compatability reasons) (optional)
     * @return ApiResponse&lt;RestApiResultProcessingFeeConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultProcessingFeeConfig> getProcessingFeeConfigsByStoreIdAndPaymentAccountTypeWithHttpInfo(Integer storeId, String paymentAccountType, String appNameId) throws ApiException {
        com.squareup.okhttp.Call call = getProcessingFeeConfigsByStoreIdAndPaymentAccountTypeValidateBeforeCall(storeId, paymentAccountType, appNameId, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultProcessingFeeConfig>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get processing fee configs by store identifier (asynchronously)
     * 
     * @param storeId Store identifier (required)
     * @param paymentAccountType  (required)
     * @param appNameId App Name Id(Not used, still here for compatability reasons) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getProcessingFeeConfigsByStoreIdAndPaymentAccountTypeAsync(Integer storeId, String paymentAccountType, String appNameId, final ApiCallback<RestApiResultProcessingFeeConfig> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getProcessingFeeConfigsByStoreIdAndPaymentAccountTypeValidateBeforeCall(storeId, paymentAccountType, appNameId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultProcessingFeeConfig>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getStoreById
     * @param storeId Store identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getStoreByIdCall(Integer storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/stores/{storeId}"
            .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStoreByIdValidateBeforeCall(Integer storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling getStoreById(Async)");
        }
        

        com.squareup.okhttp.Call call = getStoreByIdCall(storeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get store by identifier
     * 
     * @param storeId Store identifier (required)
     * @return RestApiResultStore
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultStore getStoreById(Integer storeId) throws ApiException {
        ApiResponse<RestApiResultStore> resp = getStoreByIdWithHttpInfo(storeId);
        return resp.getData();
    }

    /**
     * Get store by identifier
     * 
     * @param storeId Store identifier (required)
     * @return ApiResponse&lt;RestApiResultStore&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultStore> getStoreByIdWithHttpInfo(Integer storeId) throws ApiException {
        com.squareup.okhttp.Call call = getStoreByIdValidateBeforeCall(storeId, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultStore>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get store by identifier (asynchronously)
     * 
     * @param storeId Store identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStoreByIdAsync(Integer storeId, final ApiCallback<RestApiResultStore> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStoreByIdValidateBeforeCall(storeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultStore>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getStores
     * @param searchQuery Search query (optional)
     * @param page Requested page index (optional)
     * @param limit Requested page limit (optional)
     * @param storeGroupId Store Group Id (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getStoresCall(String searchQuery, Integer page, Integer limit, Integer storeGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/stores";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (searchQuery != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("searchQuery", searchQuery));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (storeGroupId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storeGroupId", storeGroupId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStoresValidateBeforeCall(String searchQuery, Integer page, Integer limit, Integer storeGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getStoresCall(searchQuery, page, limit, storeGroupId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all stores
     * 
     * @param searchQuery Search query (optional)
     * @param page Requested page index (optional)
     * @param limit Requested page limit (optional)
     * @param storeGroupId Store Group Id (optional)
     * @return RestApiPaginationResultStore
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiPaginationResultStore getStores(String searchQuery, Integer page, Integer limit, Integer storeGroupId) throws ApiException {
        ApiResponse<RestApiPaginationResultStore> resp = getStoresWithHttpInfo(searchQuery, page, limit, storeGroupId);
        return resp.getData();
    }

    /**
     * Get all stores
     * 
     * @param searchQuery Search query (optional)
     * @param page Requested page index (optional)
     * @param limit Requested page limit (optional)
     * @param storeGroupId Store Group Id (optional)
     * @return ApiResponse&lt;RestApiPaginationResultStore&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiPaginationResultStore> getStoresWithHttpInfo(String searchQuery, Integer page, Integer limit, Integer storeGroupId) throws ApiException {
        com.squareup.okhttp.Call call = getStoresValidateBeforeCall(searchQuery, page, limit, storeGroupId, null, null);
        Type localVarReturnType = new TypeToken<RestApiPaginationResultStore>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all stores (asynchronously)
     * 
     * @param searchQuery Search query (optional)
     * @param page Requested page index (optional)
     * @param limit Requested page limit (optional)
     * @param storeGroupId Store Group Id (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStoresAsync(String searchQuery, Integer page, Integer limit, Integer storeGroupId, final ApiCallback<RestApiPaginationResultStore> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStoresValidateBeforeCall(searchQuery, page, limit, storeGroupId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiPaginationResultStore>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getStoresByAppId
     * @param appId App Name Id (required)
     * @param searchQuery Search query (optional)
     * @param page Requested page index (optional)
     * @param limit Requested page limit (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getStoresByAppIdCall(String appId, String searchQuery, Integer page, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/stores"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (searchQuery != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("searchQuery", searchQuery));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStoresByAppIdValidateBeforeCall(String appId, String searchQuery, Integer page, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getStoresByAppId(Async)");
        }
        

        com.squareup.okhttp.Call call = getStoresByAppIdCall(appId, searchQuery, page, limit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all stores by app name id
     * 
     * @param appId App Name Id (required)
     * @param searchQuery Search query (optional)
     * @param page Requested page index (optional)
     * @param limit Requested page limit (optional)
     * @return RestApiPaginationResultStore
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiPaginationResultStore getStoresByAppId(String appId, String searchQuery, Integer page, Integer limit) throws ApiException {
        ApiResponse<RestApiPaginationResultStore> resp = getStoresByAppIdWithHttpInfo(appId, searchQuery, page, limit);
        return resp.getData();
    }

    /**
     * Get all stores by app name id
     * 
     * @param appId App Name Id (required)
     * @param searchQuery Search query (optional)
     * @param page Requested page index (optional)
     * @param limit Requested page limit (optional)
     * @return ApiResponse&lt;RestApiPaginationResultStore&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiPaginationResultStore> getStoresByAppIdWithHttpInfo(String appId, String searchQuery, Integer page, Integer limit) throws ApiException {
        com.squareup.okhttp.Call call = getStoresByAppIdValidateBeforeCall(appId, searchQuery, page, limit, null, null);
        Type localVarReturnType = new TypeToken<RestApiPaginationResultStore>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all stores by app name id (asynchronously)
     * 
     * @param appId App Name Id (required)
     * @param searchQuery Search query (optional)
     * @param page Requested page index (optional)
     * @param limit Requested page limit (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStoresByAppIdAsync(String appId, String searchQuery, Integer page, Integer limit, final ApiCallback<RestApiPaginationResultStore> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStoresByAppIdValidateBeforeCall(appId, searchQuery, page, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiPaginationResultStore>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setBusinessHours
     * @param storeId Store identifier (required)
     * @param deliveryType Deliery type (required)
     * @param businessHoursPeriod Business Hours Period (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setBusinessHoursCall(Integer storeId, String deliveryType, BusinessHoursPeriodBase businessHoursPeriod, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = businessHoursPeriod;

        // create path and map variables
        String localVarPath = "/api/v1.0/stores/{storeId}/availability/{deliveryType}"
            .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()))
            .replaceAll("\\{" + "deliveryType" + "\\}", apiClient.escapeString(deliveryType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setBusinessHoursValidateBeforeCall(Integer storeId, String deliveryType, BusinessHoursPeriodBase businessHoursPeriod, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling setBusinessHours(Async)");
        }
        
        // verify the required parameter 'deliveryType' is set
        if (deliveryType == null) {
            throw new ApiException("Missing the required parameter 'deliveryType' when calling setBusinessHours(Async)");
        }
        
        // verify the required parameter 'businessHoursPeriod' is set
        if (businessHoursPeriod == null) {
            throw new ApiException("Missing the required parameter 'businessHoursPeriod' when calling setBusinessHours(Async)");
        }
        

        com.squareup.okhttp.Call call = setBusinessHoursCall(storeId, deliveryType, businessHoursPeriod, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Set Bussiness hours
     * 
     * @param storeId Store identifier (required)
     * @param deliveryType Deliery type (required)
     * @param businessHoursPeriod Business Hours Period (required)
     * @return RestApiResultBusinessHoursPeriod
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultBusinessHoursPeriod setBusinessHours(Integer storeId, String deliveryType, BusinessHoursPeriodBase businessHoursPeriod) throws ApiException {
        ApiResponse<RestApiResultBusinessHoursPeriod> resp = setBusinessHoursWithHttpInfo(storeId, deliveryType, businessHoursPeriod);
        return resp.getData();
    }

    /**
     * Set Bussiness hours
     * 
     * @param storeId Store identifier (required)
     * @param deliveryType Deliery type (required)
     * @param businessHoursPeriod Business Hours Period (required)
     * @return ApiResponse&lt;RestApiResultBusinessHoursPeriod&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultBusinessHoursPeriod> setBusinessHoursWithHttpInfo(Integer storeId, String deliveryType, BusinessHoursPeriodBase businessHoursPeriod) throws ApiException {
        com.squareup.okhttp.Call call = setBusinessHoursValidateBeforeCall(storeId, deliveryType, businessHoursPeriod, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultBusinessHoursPeriod>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Set Bussiness hours (asynchronously)
     * 
     * @param storeId Store identifier (required)
     * @param deliveryType Deliery type (required)
     * @param businessHoursPeriod Business Hours Period (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setBusinessHoursAsync(Integer storeId, String deliveryType, BusinessHoursPeriodBase businessHoursPeriod, final ApiCallback<RestApiResultBusinessHoursPeriod> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setBusinessHoursValidateBeforeCall(storeId, deliveryType, businessHoursPeriod, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultBusinessHoursPeriod>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateStore
     * @param storeId Store Group identifier (required)
     * @param store Store (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateStoreCall(Integer storeId, StoreBase store, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = store;

        // create path and map variables
        String localVarPath = "/api/v1.0/stores/{storeId}"
            .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateStoreValidateBeforeCall(Integer storeId, StoreBase store, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling updateStore(Async)");
        }
        
        // verify the required parameter 'store' is set
        if (store == null) {
            throw new ApiException("Missing the required parameter 'store' when calling updateStore(Async)");
        }
        

        com.squareup.okhttp.Call call = updateStoreCall(storeId, store, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update store by identifier
     * 
     * @param storeId Store Group identifier (required)
     * @param store Store (required)
     * @return RestApiResultStore
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultStore updateStore(Integer storeId, StoreBase store) throws ApiException {
        ApiResponse<RestApiResultStore> resp = updateStoreWithHttpInfo(storeId, store);
        return resp.getData();
    }

    /**
     * Update store by identifier
     * 
     * @param storeId Store Group identifier (required)
     * @param store Store (required)
     * @return ApiResponse&lt;RestApiResultStore&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultStore> updateStoreWithHttpInfo(Integer storeId, StoreBase store) throws ApiException {
        com.squareup.okhttp.Call call = updateStoreValidateBeforeCall(storeId, store, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultStore>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update store by identifier (asynchronously)
     * 
     * @param storeId Store Group identifier (required)
     * @param store Store (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateStoreAsync(Integer storeId, StoreBase store, final ApiCallback<RestApiResultStore> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateStoreValidateBeforeCall(storeId, store, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultStore>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateStoreAddress
     * @param storeId Store identifier (required)
     * @param storeAddress Store address (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateStoreAddressCall(Integer storeId, StoreAddressBase storeAddress, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = storeAddress;

        // create path and map variables
        String localVarPath = "/api/v1.0/stores/{storeId}/address"
            .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateStoreAddressValidateBeforeCall(Integer storeId, StoreAddressBase storeAddress, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling updateStoreAddress(Async)");
        }
        
        // verify the required parameter 'storeAddress' is set
        if (storeAddress == null) {
            throw new ApiException("Missing the required parameter 'storeAddress' when calling updateStoreAddress(Async)");
        }
        

        com.squareup.okhttp.Call call = updateStoreAddressCall(storeId, storeAddress, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update store address
     * 
     * @param storeId Store identifier (required)
     * @param storeAddress Store address (required)
     * @return RestApiResultStoreAddress
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultStoreAddress updateStoreAddress(Integer storeId, StoreAddressBase storeAddress) throws ApiException {
        ApiResponse<RestApiResultStoreAddress> resp = updateStoreAddressWithHttpInfo(storeId, storeAddress);
        return resp.getData();
    }

    /**
     * Update store address
     * 
     * @param storeId Store identifier (required)
     * @param storeAddress Store address (required)
     * @return ApiResponse&lt;RestApiResultStoreAddress&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultStoreAddress> updateStoreAddressWithHttpInfo(Integer storeId, StoreAddressBase storeAddress) throws ApiException {
        com.squareup.okhttp.Call call = updateStoreAddressValidateBeforeCall(storeId, storeAddress, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultStoreAddress>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update store address (asynchronously)
     * 
     * @param storeId Store identifier (required)
     * @param storeAddress Store address (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateStoreAddressAsync(Integer storeId, StoreAddressBase storeAddress, final ApiCallback<RestApiResultStoreAddress> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateStoreAddressValidateBeforeCall(storeId, storeAddress, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultStoreAddress>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateStoreAddressCoordinates
     * @param storeId Store identifier (required)
     * @param coordinates Store address coordinates (required)
     * @param appNameId App Name Id(Not used, still here for compatability reasons) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateStoreAddressCoordinatesCall(Integer storeId, Coordinates coordinates, String appNameId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = coordinates;

        // create path and map variables
        String localVarPath = "/api/v1.0/stores/{storeId}/address/coordinates"
            .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (appNameId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("appNameId", appNameId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateStoreAddressCoordinatesValidateBeforeCall(Integer storeId, Coordinates coordinates, String appNameId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling updateStoreAddressCoordinates(Async)");
        }
        
        // verify the required parameter 'coordinates' is set
        if (coordinates == null) {
            throw new ApiException("Missing the required parameter 'coordinates' when calling updateStoreAddressCoordinates(Async)");
        }
        

        com.squareup.okhttp.Call call = updateStoreAddressCoordinatesCall(storeId, coordinates, appNameId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update store address coordinates
     * 
     * @param storeId Store identifier (required)
     * @param coordinates Store address coordinates (required)
     * @param appNameId App Name Id(Not used, still here for compatability reasons) (optional)
     * @return RestApiResultCoordinates
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultCoordinates updateStoreAddressCoordinates(Integer storeId, Coordinates coordinates, String appNameId) throws ApiException {
        ApiResponse<RestApiResultCoordinates> resp = updateStoreAddressCoordinatesWithHttpInfo(storeId, coordinates, appNameId);
        return resp.getData();
    }

    /**
     * Update store address coordinates
     * 
     * @param storeId Store identifier (required)
     * @param coordinates Store address coordinates (required)
     * @param appNameId App Name Id(Not used, still here for compatability reasons) (optional)
     * @return ApiResponse&lt;RestApiResultCoordinates&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultCoordinates> updateStoreAddressCoordinatesWithHttpInfo(Integer storeId, Coordinates coordinates, String appNameId) throws ApiException {
        com.squareup.okhttp.Call call = updateStoreAddressCoordinatesValidateBeforeCall(storeId, coordinates, appNameId, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultCoordinates>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update store address coordinates (asynchronously)
     * 
     * @param storeId Store identifier (required)
     * @param coordinates Store address coordinates (required)
     * @param appNameId App Name Id(Not used, still here for compatability reasons) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateStoreAddressCoordinatesAsync(Integer storeId, Coordinates coordinates, String appNameId, final ApiCallback<RestApiResultCoordinates> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateStoreAddressCoordinatesValidateBeforeCall(storeId, coordinates, appNameId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultCoordinates>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
