/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.flipdish.apiclient.api;

import com.flipdish.apiclient.ApiCallback;
import com.flipdish.apiclient.ApiClient;
import com.flipdish.apiclient.ApiException;
import com.flipdish.apiclient.ApiResponse;
import com.flipdish.apiclient.Configuration;
import com.flipdish.apiclient.Pair;
import com.flipdish.apiclient.ProgressRequestBody;
import com.flipdish.apiclient.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import com.flipdish.apiclient.model.MenuBase;
import com.flipdish.apiclient.model.Metadata;
import com.flipdish.apiclient.model.RestApiArrayResultMetadata;
import com.flipdish.apiclient.model.RestApiErrorResult;
import com.flipdish.apiclient.model.RestApiForbiddenResult;
import com.flipdish.apiclient.model.RestApiResultMenu;
import com.flipdish.apiclient.model.RestApiResultMetadata;
import com.flipdish.apiclient.model.RestApiStringResult;
import com.flipdish.apiclient.model.RestApiUnauthorizedResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MenusApi {
    private ApiClient apiClient;

    public MenusApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MenusApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deleteMenuImage
     * @param menuId Menu identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteMenuImageCall(Integer menuId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/menus/{menuId}/image"
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteMenuImageValidateBeforeCall(Integer menuId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling deleteMenuImage(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteMenuImageCall(menuId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete menu image
     * 
     * @param menuId Menu identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteMenuImage(Integer menuId) throws ApiException {
        deleteMenuImageWithHttpInfo(menuId);
    }

    /**
     * Delete menu image
     * 
     * @param menuId Menu identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteMenuImageWithHttpInfo(Integer menuId) throws ApiException {
        com.squareup.okhttp.Call call = deleteMenuImageValidateBeforeCall(menuId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete menu image (asynchronously)
     * 
     * @param menuId Menu identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteMenuImageAsync(Integer menuId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteMenuImageValidateBeforeCall(menuId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteMenuItemMetadata
     * @param menuId Menu identifier (required)
     * @param storeId Store identifier (required)
     * @param menuItemId Menu item identifier (required)
     * @param key Metadata key (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteMenuItemMetadataCall(Integer menuId, Integer storeId, Integer menuItemId, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/menus/{menuId}/menuitem/{menuItemId}/metadata/{key}/store/{storeId}"
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()))
            .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()))
            .replaceAll("\\{" + "menuItemId" + "\\}", apiClient.escapeString(menuItemId.toString()))
            .replaceAll("\\{" + "key" + "\\}", apiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteMenuItemMetadataValidateBeforeCall(Integer menuId, Integer storeId, Integer menuItemId, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling deleteMenuItemMetadata(Async)");
        }
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling deleteMenuItemMetadata(Async)");
        }
        
        // verify the required parameter 'menuItemId' is set
        if (menuItemId == null) {
            throw new ApiException("Missing the required parameter 'menuItemId' when calling deleteMenuItemMetadata(Async)");
        }
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling deleteMenuItemMetadata(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteMenuItemMetadataCall(menuId, storeId, menuItemId, key, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete menu item metadata
     * 
     * @param menuId Menu identifier (required)
     * @param storeId Store identifier (required)
     * @param menuItemId Menu item identifier (required)
     * @param key Metadata key (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteMenuItemMetadata(Integer menuId, Integer storeId, Integer menuItemId, String key) throws ApiException {
        deleteMenuItemMetadataWithHttpInfo(menuId, storeId, menuItemId, key);
    }

    /**
     * Delete menu item metadata
     * 
     * @param menuId Menu identifier (required)
     * @param storeId Store identifier (required)
     * @param menuItemId Menu item identifier (required)
     * @param key Metadata key (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteMenuItemMetadataWithHttpInfo(Integer menuId, Integer storeId, Integer menuItemId, String key) throws ApiException {
        com.squareup.okhttp.Call call = deleteMenuItemMetadataValidateBeforeCall(menuId, storeId, menuItemId, key, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete menu item metadata (asynchronously)
     * 
     * @param menuId Menu identifier (required)
     * @param storeId Store identifier (required)
     * @param menuItemId Menu item identifier (required)
     * @param key Metadata key (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteMenuItemMetadataAsync(Integer menuId, Integer storeId, Integer menuItemId, String key, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteMenuItemMetadataValidateBeforeCall(menuId, storeId, menuItemId, key, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getMenuById
     * @param menuId Menu identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMenuByIdCall(Integer menuId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/menus/{menuId}"
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMenuByIdValidateBeforeCall(Integer menuId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling getMenuById(Async)");
        }
        

        com.squareup.okhttp.Call call = getMenuByIdCall(menuId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get menu by identifier
     * 
     * @param menuId Menu identifier (required)
     * @return RestApiResultMenu
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultMenu getMenuById(Integer menuId) throws ApiException {
        ApiResponse<RestApiResultMenu> resp = getMenuByIdWithHttpInfo(menuId);
        return resp.getData();
    }

    /**
     * Get menu by identifier
     * 
     * @param menuId Menu identifier (required)
     * @return ApiResponse&lt;RestApiResultMenu&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultMenu> getMenuByIdWithHttpInfo(Integer menuId) throws ApiException {
        com.squareup.okhttp.Call call = getMenuByIdValidateBeforeCall(menuId, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultMenu>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get menu by identifier (asynchronously)
     * 
     * @param menuId Menu identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMenuByIdAsync(Integer menuId, final ApiCallback<RestApiResultMenu> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMenuByIdValidateBeforeCall(menuId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultMenu>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getMenuItemMetadata
     * @param menuId Menu identifier (required)
     * @param storeId Store identifier (required)
     * @param menuItemId Menu item identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMenuItemMetadataCall(Integer menuId, Integer storeId, Integer menuItemId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/menus/{menuId}/menuitem/{menuItemId}/metadata/store/{storeId}"
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()))
            .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()))
            .replaceAll("\\{" + "menuItemId" + "\\}", apiClient.escapeString(menuItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMenuItemMetadataValidateBeforeCall(Integer menuId, Integer storeId, Integer menuItemId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling getMenuItemMetadata(Async)");
        }
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling getMenuItemMetadata(Async)");
        }
        
        // verify the required parameter 'menuItemId' is set
        if (menuItemId == null) {
            throw new ApiException("Missing the required parameter 'menuItemId' when calling getMenuItemMetadata(Async)");
        }
        

        com.squareup.okhttp.Call call = getMenuItemMetadataCall(menuId, storeId, menuItemId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get menu item metadata
     * 
     * @param menuId Menu identifier (required)
     * @param storeId Store identifier (required)
     * @param menuItemId Menu item identifier (required)
     * @return RestApiArrayResultMetadata
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiArrayResultMetadata getMenuItemMetadata(Integer menuId, Integer storeId, Integer menuItemId) throws ApiException {
        ApiResponse<RestApiArrayResultMetadata> resp = getMenuItemMetadataWithHttpInfo(menuId, storeId, menuItemId);
        return resp.getData();
    }

    /**
     * Get menu item metadata
     * 
     * @param menuId Menu identifier (required)
     * @param storeId Store identifier (required)
     * @param menuItemId Menu item identifier (required)
     * @return ApiResponse&lt;RestApiArrayResultMetadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiArrayResultMetadata> getMenuItemMetadataWithHttpInfo(Integer menuId, Integer storeId, Integer menuItemId) throws ApiException {
        com.squareup.okhttp.Call call = getMenuItemMetadataValidateBeforeCall(menuId, storeId, menuItemId, null, null);
        Type localVarReturnType = new TypeToken<RestApiArrayResultMetadata>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get menu item metadata (asynchronously)
     * 
     * @param menuId Menu identifier (required)
     * @param storeId Store identifier (required)
     * @param menuItemId Menu item identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMenuItemMetadataAsync(Integer menuId, Integer storeId, Integer menuItemId, final ApiCallback<RestApiArrayResultMetadata> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMenuItemMetadataValidateBeforeCall(menuId, storeId, menuItemId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiArrayResultMetadata>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getMenuItemMetadata_0
     * @param menuId Menu identifier (required)
     * @param storeId Store identifier (required)
     * @param menuItemId Menu item identifier (required)
     * @param key Metadata key (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMenuItemMetadata_0Call(Integer menuId, Integer storeId, Integer menuItemId, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/menus/{menuId}/menuitem/{menuItemId}/metadata/{key}/store/{storeId}"
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()))
            .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()))
            .replaceAll("\\{" + "menuItemId" + "\\}", apiClient.escapeString(menuItemId.toString()))
            .replaceAll("\\{" + "key" + "\\}", apiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMenuItemMetadata_0ValidateBeforeCall(Integer menuId, Integer storeId, Integer menuItemId, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling getMenuItemMetadata_0(Async)");
        }
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling getMenuItemMetadata_0(Async)");
        }
        
        // verify the required parameter 'menuItemId' is set
        if (menuItemId == null) {
            throw new ApiException("Missing the required parameter 'menuItemId' when calling getMenuItemMetadata_0(Async)");
        }
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getMenuItemMetadata_0(Async)");
        }
        

        com.squareup.okhttp.Call call = getMenuItemMetadata_0Call(menuId, storeId, menuItemId, key, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get menu item metadata by key
     * 
     * @param menuId Menu identifier (required)
     * @param storeId Store identifier (required)
     * @param menuItemId Menu item identifier (required)
     * @param key Metadata key (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getMenuItemMetadata_0(Integer menuId, Integer storeId, Integer menuItemId, String key) throws ApiException {
        getMenuItemMetadata_0WithHttpInfo(menuId, storeId, menuItemId, key);
    }

    /**
     * Get menu item metadata by key
     * 
     * @param menuId Menu identifier (required)
     * @param storeId Store identifier (required)
     * @param menuItemId Menu item identifier (required)
     * @param key Metadata key (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getMenuItemMetadata_0WithHttpInfo(Integer menuId, Integer storeId, Integer menuItemId, String key) throws ApiException {
        com.squareup.okhttp.Call call = getMenuItemMetadata_0ValidateBeforeCall(menuId, storeId, menuItemId, key, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get menu item metadata by key (asynchronously)
     * 
     * @param menuId Menu identifier (required)
     * @param storeId Store identifier (required)
     * @param menuItemId Menu item identifier (required)
     * @param key Metadata key (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMenuItemMetadata_0Async(Integer menuId, Integer storeId, Integer menuItemId, String key, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMenuItemMetadata_0ValidateBeforeCall(menuId, storeId, menuItemId, key, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getMenuItemOptionSetItemMetadata
     * @param menuId Menu identifier (required)
     * @param storeId Store identifier (required)
     * @param optionSetItemId Menu item option set item identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMenuItemOptionSetItemMetadataCall(Integer menuId, Integer storeId, Integer optionSetItemId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/menus/{menuId}/optionsetitem/{optionSetItemId}/metadata/store/{storeId}"
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()))
            .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()))
            .replaceAll("\\{" + "optionSetItemId" + "\\}", apiClient.escapeString(optionSetItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMenuItemOptionSetItemMetadataValidateBeforeCall(Integer menuId, Integer storeId, Integer optionSetItemId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling getMenuItemOptionSetItemMetadata(Async)");
        }
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling getMenuItemOptionSetItemMetadata(Async)");
        }
        
        // verify the required parameter 'optionSetItemId' is set
        if (optionSetItemId == null) {
            throw new ApiException("Missing the required parameter 'optionSetItemId' when calling getMenuItemOptionSetItemMetadata(Async)");
        }
        

        com.squareup.okhttp.Call call = getMenuItemOptionSetItemMetadataCall(menuId, storeId, optionSetItemId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get menu item option set item metadata by key
     * 
     * @param menuId Menu identifier (required)
     * @param storeId Store identifier (required)
     * @param optionSetItemId Menu item option set item identifier (required)
     * @return RestApiResultMetadata
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultMetadata getMenuItemOptionSetItemMetadata(Integer menuId, Integer storeId, Integer optionSetItemId) throws ApiException {
        ApiResponse<RestApiResultMetadata> resp = getMenuItemOptionSetItemMetadataWithHttpInfo(menuId, storeId, optionSetItemId);
        return resp.getData();
    }

    /**
     * Get menu item option set item metadata by key
     * 
     * @param menuId Menu identifier (required)
     * @param storeId Store identifier (required)
     * @param optionSetItemId Menu item option set item identifier (required)
     * @return ApiResponse&lt;RestApiResultMetadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultMetadata> getMenuItemOptionSetItemMetadataWithHttpInfo(Integer menuId, Integer storeId, Integer optionSetItemId) throws ApiException {
        com.squareup.okhttp.Call call = getMenuItemOptionSetItemMetadataValidateBeforeCall(menuId, storeId, optionSetItemId, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultMetadata>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get menu item option set item metadata by key (asynchronously)
     * 
     * @param menuId Menu identifier (required)
     * @param storeId Store identifier (required)
     * @param optionSetItemId Menu item option set item identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMenuItemOptionSetItemMetadataAsync(Integer menuId, Integer storeId, Integer optionSetItemId, final ApiCallback<RestApiResultMetadata> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMenuItemOptionSetItemMetadataValidateBeforeCall(menuId, storeId, optionSetItemId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultMetadata>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setMenuItemMetadata
     * @param menuId Menu identifier (required)
     * @param storeId Store identifier (required)
     * @param menuItemId Menu item identifier (required)
     * @param metadata Metadata object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setMenuItemMetadataCall(Integer menuId, Integer storeId, Integer menuItemId, Metadata metadata, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = metadata;

        // create path and map variables
        String localVarPath = "/api/v1.0/menus/{menuId}/menuitem/{menuItemId}/metadata/store/{storeId}"
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()))
            .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()))
            .replaceAll("\\{" + "menuItemId" + "\\}", apiClient.escapeString(menuItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setMenuItemMetadataValidateBeforeCall(Integer menuId, Integer storeId, Integer menuItemId, Metadata metadata, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling setMenuItemMetadata(Async)");
        }
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling setMenuItemMetadata(Async)");
        }
        
        // verify the required parameter 'menuItemId' is set
        if (menuItemId == null) {
            throw new ApiException("Missing the required parameter 'menuItemId' when calling setMenuItemMetadata(Async)");
        }
        
        // verify the required parameter 'metadata' is set
        if (metadata == null) {
            throw new ApiException("Missing the required parameter 'metadata' when calling setMenuItemMetadata(Async)");
        }
        

        com.squareup.okhttp.Call call = setMenuItemMetadataCall(menuId, storeId, menuItemId, metadata, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update menu item metadata
     * 
     * @param menuId Menu identifier (required)
     * @param storeId Store identifier (required)
     * @param menuItemId Menu item identifier (required)
     * @param metadata Metadata object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void setMenuItemMetadata(Integer menuId, Integer storeId, Integer menuItemId, Metadata metadata) throws ApiException {
        setMenuItemMetadataWithHttpInfo(menuId, storeId, menuItemId, metadata);
    }

    /**
     * Update menu item metadata
     * 
     * @param menuId Menu identifier (required)
     * @param storeId Store identifier (required)
     * @param menuItemId Menu item identifier (required)
     * @param metadata Metadata object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> setMenuItemMetadataWithHttpInfo(Integer menuId, Integer storeId, Integer menuItemId, Metadata metadata) throws ApiException {
        com.squareup.okhttp.Call call = setMenuItemMetadataValidateBeforeCall(menuId, storeId, menuItemId, metadata, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update menu item metadata (asynchronously)
     * 
     * @param menuId Menu identifier (required)
     * @param storeId Store identifier (required)
     * @param menuItemId Menu item identifier (required)
     * @param metadata Metadata object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setMenuItemMetadataAsync(Integer menuId, Integer storeId, Integer menuItemId, Metadata metadata, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setMenuItemMetadataValidateBeforeCall(menuId, storeId, menuItemId, metadata, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for setMenuItemOptionSetItemMetadata
     * @param menuId Menu identifier (required)
     * @param storeId Store identifier (required)
     * @param optionSetItemId Menu item option set item identifier (required)
     * @param metadata Metadata object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setMenuItemOptionSetItemMetadataCall(Integer menuId, Integer storeId, Integer optionSetItemId, Metadata metadata, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = metadata;

        // create path and map variables
        String localVarPath = "/api/v1.0/menus/{menuId}/optionsetitem/{optionSetItemId}/metadata/store/{storeId}"
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()))
            .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()))
            .replaceAll("\\{" + "optionSetItemId" + "\\}", apiClient.escapeString(optionSetItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setMenuItemOptionSetItemMetadataValidateBeforeCall(Integer menuId, Integer storeId, Integer optionSetItemId, Metadata metadata, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling setMenuItemOptionSetItemMetadata(Async)");
        }
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling setMenuItemOptionSetItemMetadata(Async)");
        }
        
        // verify the required parameter 'optionSetItemId' is set
        if (optionSetItemId == null) {
            throw new ApiException("Missing the required parameter 'optionSetItemId' when calling setMenuItemOptionSetItemMetadata(Async)");
        }
        
        // verify the required parameter 'metadata' is set
        if (metadata == null) {
            throw new ApiException("Missing the required parameter 'metadata' when calling setMenuItemOptionSetItemMetadata(Async)");
        }
        

        com.squareup.okhttp.Call call = setMenuItemOptionSetItemMetadataCall(menuId, storeId, optionSetItemId, metadata, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update menu item option set item metadata
     * 
     * @param menuId Menu identifier (required)
     * @param storeId Store identifier (required)
     * @param optionSetItemId Menu item option set item identifier (required)
     * @param metadata Metadata object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void setMenuItemOptionSetItemMetadata(Integer menuId, Integer storeId, Integer optionSetItemId, Metadata metadata) throws ApiException {
        setMenuItemOptionSetItemMetadataWithHttpInfo(menuId, storeId, optionSetItemId, metadata);
    }

    /**
     * Update menu item option set item metadata
     * 
     * @param menuId Menu identifier (required)
     * @param storeId Store identifier (required)
     * @param optionSetItemId Menu item option set item identifier (required)
     * @param metadata Metadata object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> setMenuItemOptionSetItemMetadataWithHttpInfo(Integer menuId, Integer storeId, Integer optionSetItemId, Metadata metadata) throws ApiException {
        com.squareup.okhttp.Call call = setMenuItemOptionSetItemMetadataValidateBeforeCall(menuId, storeId, optionSetItemId, metadata, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update menu item option set item metadata (asynchronously)
     * 
     * @param menuId Menu identifier (required)
     * @param storeId Store identifier (required)
     * @param optionSetItemId Menu item option set item identifier (required)
     * @param metadata Metadata object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setMenuItemOptionSetItemMetadataAsync(Integer menuId, Integer storeId, Integer optionSetItemId, Metadata metadata, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setMenuItemOptionSetItemMetadataValidateBeforeCall(menuId, storeId, optionSetItemId, metadata, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateMenu
     * @param menuId Menu identifier (required)
     * @param menu Menu (delta) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateMenuCall(Integer menuId, MenuBase menu, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = menu;

        // create path and map variables
        String localVarPath = "/api/v1.0/menus/{menuId}"
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateMenuValidateBeforeCall(Integer menuId, MenuBase menu, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling updateMenu(Async)");
        }
        
        // verify the required parameter 'menu' is set
        if (menu == null) {
            throw new ApiException("Missing the required parameter 'menu' when calling updateMenu(Async)");
        }
        

        com.squareup.okhttp.Call call = updateMenuCall(menuId, menu, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update menu
     * 
     * @param menuId Menu identifier (required)
     * @param menu Menu (delta) (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateMenu(Integer menuId, MenuBase menu) throws ApiException {
        updateMenuWithHttpInfo(menuId, menu);
    }

    /**
     * Update menu
     * 
     * @param menuId Menu identifier (required)
     * @param menu Menu (delta) (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateMenuWithHttpInfo(Integer menuId, MenuBase menu) throws ApiException {
        com.squareup.okhttp.Call call = updateMenuValidateBeforeCall(menuId, menu, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update menu (asynchronously)
     * 
     * @param menuId Menu identifier (required)
     * @param menu Menu (delta) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateMenuAsync(Integer menuId, MenuBase menu, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateMenuValidateBeforeCall(menuId, menu, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for uploadMenuImage
     * @param menuId Menu identifier (required)
     * @param image Menu image (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call uploadMenuImageCall(Integer menuId, File image, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/menus/{menuId}/image"
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (image != null)
        localVarFormParams.put("Image", image);

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call uploadMenuImageValidateBeforeCall(Integer menuId, File image, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling uploadMenuImage(Async)");
        }
        
        // verify the required parameter 'image' is set
        if (image == null) {
            throw new ApiException("Missing the required parameter 'image' when calling uploadMenuImage(Async)");
        }
        

        com.squareup.okhttp.Call call = uploadMenuImageCall(menuId, image, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Upload menu image
     * 
     * @param menuId Menu identifier (required)
     * @param image Menu image (required)
     * @return RestApiStringResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiStringResult uploadMenuImage(Integer menuId, File image) throws ApiException {
        ApiResponse<RestApiStringResult> resp = uploadMenuImageWithHttpInfo(menuId, image);
        return resp.getData();
    }

    /**
     * Upload menu image
     * 
     * @param menuId Menu identifier (required)
     * @param image Menu image (required)
     * @return ApiResponse&lt;RestApiStringResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiStringResult> uploadMenuImageWithHttpInfo(Integer menuId, File image) throws ApiException {
        com.squareup.okhttp.Call call = uploadMenuImageValidateBeforeCall(menuId, image, null, null);
        Type localVarReturnType = new TypeToken<RestApiStringResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Upload menu image (asynchronously)
     * 
     * @param menuId Menu identifier (required)
     * @param image Menu image (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call uploadMenuImageAsync(Integer menuId, File image, final ApiCallback<RestApiStringResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = uploadMenuImageValidateBeforeCall(menuId, image, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiStringResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
