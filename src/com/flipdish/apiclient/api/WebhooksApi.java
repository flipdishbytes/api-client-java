/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.flipdish.apiclient.api;

import com.flipdish.apiclient.ApiCallback;
import com.flipdish.apiclient.ApiClient;
import com.flipdish.apiclient.ApiException;
import com.flipdish.apiclient.ApiResponse;
import com.flipdish.apiclient.Configuration;
import com.flipdish.apiclient.Pair;
import com.flipdish.apiclient.ProgressRequestBody;
import com.flipdish.apiclient.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.OffsetDateTime;
import com.flipdish.apiclient.model.RestApiArrayResultWebhookSubscription;
import com.flipdish.apiclient.model.RestApiErrorResult;
import com.flipdish.apiclient.model.RestApiForbiddenResult;
import com.flipdish.apiclient.model.RestApiIntegerResult;
import com.flipdish.apiclient.model.RestApiPaginationResultWebhookLog;
import com.flipdish.apiclient.model.RestApiStringArrayResult;
import com.flipdish.apiclient.model.RestApiUnauthorizedResult;
import com.flipdish.apiclient.model.WebhookSubscription;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WebhooksApi {
    private ApiClient apiClient;

    public WebhooksApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WebhooksApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for craeteWebhookSubscription
     * @param clientId Oauth client identifier (required)
     * @param webhookSubscription Webhook subscription object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call craeteWebhookSubscriptionCall(String clientId, WebhookSubscription webhookSubscription, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = webhookSubscription;

        // create path and map variables
        String localVarPath = "/api/v1.0/webhooks/{clientId}/subscriptions"
            .replaceAll("\\{" + "clientId" + "\\}", apiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call craeteWebhookSubscriptionValidateBeforeCall(String clientId, WebhookSubscription webhookSubscription, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling craeteWebhookSubscription(Async)");
        }
        
        // verify the required parameter 'webhookSubscription' is set
        if (webhookSubscription == null) {
            throw new ApiException("Missing the required parameter 'webhookSubscription' when calling craeteWebhookSubscription(Async)");
        }
        

        com.squareup.okhttp.Call call = craeteWebhookSubscriptionCall(clientId, webhookSubscription, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a webhook subscription for you Oauth client
     * 
     * @param clientId Oauth client identifier (required)
     * @param webhookSubscription Webhook subscription object (required)
     * @return RestApiIntegerResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiIntegerResult craeteWebhookSubscription(String clientId, WebhookSubscription webhookSubscription) throws ApiException {
        ApiResponse<RestApiIntegerResult> resp = craeteWebhookSubscriptionWithHttpInfo(clientId, webhookSubscription);
        return resp.getData();
    }

    /**
     * Create a webhook subscription for you Oauth client
     * 
     * @param clientId Oauth client identifier (required)
     * @param webhookSubscription Webhook subscription object (required)
     * @return ApiResponse&lt;RestApiIntegerResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiIntegerResult> craeteWebhookSubscriptionWithHttpInfo(String clientId, WebhookSubscription webhookSubscription) throws ApiException {
        com.squareup.okhttp.Call call = craeteWebhookSubscriptionValidateBeforeCall(clientId, webhookSubscription, null, null);
        Type localVarReturnType = new TypeToken<RestApiIntegerResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a webhook subscription for you Oauth client (asynchronously)
     * 
     * @param clientId Oauth client identifier (required)
     * @param webhookSubscription Webhook subscription object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call craeteWebhookSubscriptionAsync(String clientId, WebhookSubscription webhookSubscription, final ApiCallback<RestApiIntegerResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = craeteWebhookSubscriptionValidateBeforeCall(clientId, webhookSubscription, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiIntegerResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createWebhookSubscriptionEventNames
     * @param clientId Oauth client identifier (required)
     * @param webhookSubscriptionId Webhook subscription identifier (required)
     * @param eventName Webhook subscription event name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createWebhookSubscriptionEventNamesCall(String clientId, Integer webhookSubscriptionId, String eventName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/webhooks/{clientId}/subscriptions/{webhookSubscriptionId}/events/{eventName}"
            .replaceAll("\\{" + "clientId" + "\\}", apiClient.escapeString(clientId.toString()))
            .replaceAll("\\{" + "webhookSubscriptionId" + "\\}", apiClient.escapeString(webhookSubscriptionId.toString()))
            .replaceAll("\\{" + "eventName" + "\\}", apiClient.escapeString(eventName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createWebhookSubscriptionEventNamesValidateBeforeCall(String clientId, Integer webhookSubscriptionId, String eventName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling createWebhookSubscriptionEventNames(Async)");
        }
        
        // verify the required parameter 'webhookSubscriptionId' is set
        if (webhookSubscriptionId == null) {
            throw new ApiException("Missing the required parameter 'webhookSubscriptionId' when calling createWebhookSubscriptionEventNames(Async)");
        }
        
        // verify the required parameter 'eventName' is set
        if (eventName == null) {
            throw new ApiException("Missing the required parameter 'eventName' when calling createWebhookSubscriptionEventNames(Async)");
        }
        

        com.squareup.okhttp.Call call = createWebhookSubscriptionEventNamesCall(clientId, webhookSubscriptionId, eventName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add event name to your webhook subscription
     * 
     * @param clientId Oauth client identifier (required)
     * @param webhookSubscriptionId Webhook subscription identifier (required)
     * @param eventName Webhook subscription event name (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createWebhookSubscriptionEventNames(String clientId, Integer webhookSubscriptionId, String eventName) throws ApiException {
        createWebhookSubscriptionEventNamesWithHttpInfo(clientId, webhookSubscriptionId, eventName);
    }

    /**
     * Add event name to your webhook subscription
     * 
     * @param clientId Oauth client identifier (required)
     * @param webhookSubscriptionId Webhook subscription identifier (required)
     * @param eventName Webhook subscription event name (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createWebhookSubscriptionEventNamesWithHttpInfo(String clientId, Integer webhookSubscriptionId, String eventName) throws ApiException {
        com.squareup.okhttp.Call call = createWebhookSubscriptionEventNamesValidateBeforeCall(clientId, webhookSubscriptionId, eventName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add event name to your webhook subscription (asynchronously)
     * 
     * @param clientId Oauth client identifier (required)
     * @param webhookSubscriptionId Webhook subscription identifier (required)
     * @param eventName Webhook subscription event name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createWebhookSubscriptionEventNamesAsync(String clientId, Integer webhookSubscriptionId, String eventName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createWebhookSubscriptionEventNamesValidateBeforeCall(clientId, webhookSubscriptionId, eventName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteWebhookSubscription
     * @param clientId Oauth client identifier (required)
     * @param webhookSubscriptionId Webhook subscription identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteWebhookSubscriptionCall(String clientId, Integer webhookSubscriptionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/webhooks/{clientId}/subscriptions/{webhookSubscriptionId}"
            .replaceAll("\\{" + "clientId" + "\\}", apiClient.escapeString(clientId.toString()))
            .replaceAll("\\{" + "webhookSubscriptionId" + "\\}", apiClient.escapeString(webhookSubscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteWebhookSubscriptionValidateBeforeCall(String clientId, Integer webhookSubscriptionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling deleteWebhookSubscription(Async)");
        }
        
        // verify the required parameter 'webhookSubscriptionId' is set
        if (webhookSubscriptionId == null) {
            throw new ApiException("Missing the required parameter 'webhookSubscriptionId' when calling deleteWebhookSubscription(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteWebhookSubscriptionCall(clientId, webhookSubscriptionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete you webhook subscription
     * 
     * @param clientId Oauth client identifier (required)
     * @param webhookSubscriptionId Webhook subscription identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteWebhookSubscription(String clientId, Integer webhookSubscriptionId) throws ApiException {
        deleteWebhookSubscriptionWithHttpInfo(clientId, webhookSubscriptionId);
    }

    /**
     * Delete you webhook subscription
     * 
     * @param clientId Oauth client identifier (required)
     * @param webhookSubscriptionId Webhook subscription identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteWebhookSubscriptionWithHttpInfo(String clientId, Integer webhookSubscriptionId) throws ApiException {
        com.squareup.okhttp.Call call = deleteWebhookSubscriptionValidateBeforeCall(clientId, webhookSubscriptionId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete you webhook subscription (asynchronously)
     * 
     * @param clientId Oauth client identifier (required)
     * @param webhookSubscriptionId Webhook subscription identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteWebhookSubscriptionAsync(String clientId, Integer webhookSubscriptionId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteWebhookSubscriptionValidateBeforeCall(clientId, webhookSubscriptionId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteWebhookSubscriptionEventName
     * @param clientId Oauth client identifier (required)
     * @param webhookSubscriptionId Webhook subscription identifier (required)
     * @param eventName Webhook subscription event name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteWebhookSubscriptionEventNameCall(String clientId, Integer webhookSubscriptionId, String eventName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/webhooks/{clientId}/subscriptions/{webhookSubscriptionId}/events/{eventName}"
            .replaceAll("\\{" + "clientId" + "\\}", apiClient.escapeString(clientId.toString()))
            .replaceAll("\\{" + "webhookSubscriptionId" + "\\}", apiClient.escapeString(webhookSubscriptionId.toString()))
            .replaceAll("\\{" + "eventName" + "\\}", apiClient.escapeString(eventName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteWebhookSubscriptionEventNameValidateBeforeCall(String clientId, Integer webhookSubscriptionId, String eventName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling deleteWebhookSubscriptionEventName(Async)");
        }
        
        // verify the required parameter 'webhookSubscriptionId' is set
        if (webhookSubscriptionId == null) {
            throw new ApiException("Missing the required parameter 'webhookSubscriptionId' when calling deleteWebhookSubscriptionEventName(Async)");
        }
        
        // verify the required parameter 'eventName' is set
        if (eventName == null) {
            throw new ApiException("Missing the required parameter 'eventName' when calling deleteWebhookSubscriptionEventName(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteWebhookSubscriptionEventNameCall(clientId, webhookSubscriptionId, eventName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Remove event name to your webhook subscription
     * 
     * @param clientId Oauth client identifier (required)
     * @param webhookSubscriptionId Webhook subscription identifier (required)
     * @param eventName Webhook subscription event name (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteWebhookSubscriptionEventName(String clientId, Integer webhookSubscriptionId, String eventName) throws ApiException {
        deleteWebhookSubscriptionEventNameWithHttpInfo(clientId, webhookSubscriptionId, eventName);
    }

    /**
     * Remove event name to your webhook subscription
     * 
     * @param clientId Oauth client identifier (required)
     * @param webhookSubscriptionId Webhook subscription identifier (required)
     * @param eventName Webhook subscription event name (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteWebhookSubscriptionEventNameWithHttpInfo(String clientId, Integer webhookSubscriptionId, String eventName) throws ApiException {
        com.squareup.okhttp.Call call = deleteWebhookSubscriptionEventNameValidateBeforeCall(clientId, webhookSubscriptionId, eventName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Remove event name to your webhook subscription (asynchronously)
     * 
     * @param clientId Oauth client identifier (required)
     * @param webhookSubscriptionId Webhook subscription identifier (required)
     * @param eventName Webhook subscription event name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteWebhookSubscriptionEventNameAsync(String clientId, Integer webhookSubscriptionId, String eventName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteWebhookSubscriptionEventNameValidateBeforeCall(clientId, webhookSubscriptionId, eventName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getWebhookEventNames
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getWebhookEventNamesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/webhooks/events";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getWebhookEventNamesValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getWebhookEventNamesCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all webhook subscription event names
     * 
     * @return RestApiStringArrayResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiStringArrayResult getWebhookEventNames() throws ApiException {
        ApiResponse<RestApiStringArrayResult> resp = getWebhookEventNamesWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get all webhook subscription event names
     * 
     * @return ApiResponse&lt;RestApiStringArrayResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiStringArrayResult> getWebhookEventNamesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getWebhookEventNamesValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<RestApiStringArrayResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all webhook subscription event names (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getWebhookEventNamesAsync(final ApiCallback<RestApiStringArrayResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getWebhookEventNamesValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiStringArrayResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getWebhookEventNamesBySubscriptionId
     * @param clientId Oauth client identifier (required)
     * @param webhookSubscriptionId Webhook subscription identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getWebhookEventNamesBySubscriptionIdCall(String clientId, Integer webhookSubscriptionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/webhooks/{clientId}/subscriptions/{webhookSubscriptionId}/events"
            .replaceAll("\\{" + "clientId" + "\\}", apiClient.escapeString(clientId.toString()))
            .replaceAll("\\{" + "webhookSubscriptionId" + "\\}", apiClient.escapeString(webhookSubscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getWebhookEventNamesBySubscriptionIdValidateBeforeCall(String clientId, Integer webhookSubscriptionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling getWebhookEventNamesBySubscriptionId(Async)");
        }
        
        // verify the required parameter 'webhookSubscriptionId' is set
        if (webhookSubscriptionId == null) {
            throw new ApiException("Missing the required parameter 'webhookSubscriptionId' when calling getWebhookEventNamesBySubscriptionId(Async)");
        }
        

        com.squareup.okhttp.Call call = getWebhookEventNamesBySubscriptionIdCall(clientId, webhookSubscriptionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get your webhook subscriptions selected event names
     * 
     * @param clientId Oauth client identifier (required)
     * @param webhookSubscriptionId Webhook subscription identifier (required)
     * @return RestApiStringArrayResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiStringArrayResult getWebhookEventNamesBySubscriptionId(String clientId, Integer webhookSubscriptionId) throws ApiException {
        ApiResponse<RestApiStringArrayResult> resp = getWebhookEventNamesBySubscriptionIdWithHttpInfo(clientId, webhookSubscriptionId);
        return resp.getData();
    }

    /**
     * Get your webhook subscriptions selected event names
     * 
     * @param clientId Oauth client identifier (required)
     * @param webhookSubscriptionId Webhook subscription identifier (required)
     * @return ApiResponse&lt;RestApiStringArrayResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiStringArrayResult> getWebhookEventNamesBySubscriptionIdWithHttpInfo(String clientId, Integer webhookSubscriptionId) throws ApiException {
        com.squareup.okhttp.Call call = getWebhookEventNamesBySubscriptionIdValidateBeforeCall(clientId, webhookSubscriptionId, null, null);
        Type localVarReturnType = new TypeToken<RestApiStringArrayResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get your webhook subscriptions selected event names (asynchronously)
     * 
     * @param clientId Oauth client identifier (required)
     * @param webhookSubscriptionId Webhook subscription identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getWebhookEventNamesBySubscriptionIdAsync(String clientId, Integer webhookSubscriptionId, final ApiCallback<RestApiStringArrayResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getWebhookEventNamesBySubscriptionIdValidateBeforeCall(clientId, webhookSubscriptionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiStringArrayResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getWebhookLogs
     * @param clientId Oauth client identifier (required)
     * @param webhookSubscriptionId Webhook subscription identifier (required)
     * @param start Start time (required)
     * @param end End time (required)
     * @param page Page number (optional)
     * @param limit Page size (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getWebhookLogsCall(String clientId, Integer webhookSubscriptionId, OffsetDateTime start, OffsetDateTime end, Integer page, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/webhooks/{clientId}/subscriptions/{webhookSubscriptionId}/logs"
            .replaceAll("\\{" + "clientId" + "\\}", apiClient.escapeString(clientId.toString()))
            .replaceAll("\\{" + "webhookSubscriptionId" + "\\}", apiClient.escapeString(webhookSubscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start", start));
        if (end != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end", end));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getWebhookLogsValidateBeforeCall(String clientId, Integer webhookSubscriptionId, OffsetDateTime start, OffsetDateTime end, Integer page, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling getWebhookLogs(Async)");
        }
        
        // verify the required parameter 'webhookSubscriptionId' is set
        if (webhookSubscriptionId == null) {
            throw new ApiException("Missing the required parameter 'webhookSubscriptionId' when calling getWebhookLogs(Async)");
        }
        
        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling getWebhookLogs(Async)");
        }
        
        // verify the required parameter 'end' is set
        if (end == null) {
            throw new ApiException("Missing the required parameter 'end' when calling getWebhookLogs(Async)");
        }
        

        com.squareup.okhttp.Call call = getWebhookLogsCall(clientId, webhookSubscriptionId, start, end, page, limit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get logs for your webhook subscription
     * 
     * @param clientId Oauth client identifier (required)
     * @param webhookSubscriptionId Webhook subscription identifier (required)
     * @param start Start time (required)
     * @param end End time (required)
     * @param page Page number (optional)
     * @param limit Page size (optional)
     * @return RestApiPaginationResultWebhookLog
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiPaginationResultWebhookLog getWebhookLogs(String clientId, Integer webhookSubscriptionId, OffsetDateTime start, OffsetDateTime end, Integer page, Integer limit) throws ApiException {
        ApiResponse<RestApiPaginationResultWebhookLog> resp = getWebhookLogsWithHttpInfo(clientId, webhookSubscriptionId, start, end, page, limit);
        return resp.getData();
    }

    /**
     * Get logs for your webhook subscription
     * 
     * @param clientId Oauth client identifier (required)
     * @param webhookSubscriptionId Webhook subscription identifier (required)
     * @param start Start time (required)
     * @param end End time (required)
     * @param page Page number (optional)
     * @param limit Page size (optional)
     * @return ApiResponse&lt;RestApiPaginationResultWebhookLog&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiPaginationResultWebhookLog> getWebhookLogsWithHttpInfo(String clientId, Integer webhookSubscriptionId, OffsetDateTime start, OffsetDateTime end, Integer page, Integer limit) throws ApiException {
        com.squareup.okhttp.Call call = getWebhookLogsValidateBeforeCall(clientId, webhookSubscriptionId, start, end, page, limit, null, null);
        Type localVarReturnType = new TypeToken<RestApiPaginationResultWebhookLog>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get logs for your webhook subscription (asynchronously)
     * 
     * @param clientId Oauth client identifier (required)
     * @param webhookSubscriptionId Webhook subscription identifier (required)
     * @param start Start time (required)
     * @param end End time (required)
     * @param page Page number (optional)
     * @param limit Page size (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getWebhookLogsAsync(String clientId, Integer webhookSubscriptionId, OffsetDateTime start, OffsetDateTime end, Integer page, Integer limit, final ApiCallback<RestApiPaginationResultWebhookLog> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getWebhookLogsValidateBeforeCall(clientId, webhookSubscriptionId, start, end, page, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiPaginationResultWebhookLog>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getWebhookSubscriptions
     * @param clientId Oauth client identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getWebhookSubscriptionsCall(String clientId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/webhooks/{clientId}/subscriptions"
            .replaceAll("\\{" + "clientId" + "\\}", apiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getWebhookSubscriptionsValidateBeforeCall(String clientId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling getWebhookSubscriptions(Async)");
        }
        

        com.squareup.okhttp.Call call = getWebhookSubscriptionsCall(clientId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all webhook subscriptions by your Oauth client id
     * 
     * @param clientId Oauth client identifier (required)
     * @return RestApiArrayResultWebhookSubscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiArrayResultWebhookSubscription getWebhookSubscriptions(String clientId) throws ApiException {
        ApiResponse<RestApiArrayResultWebhookSubscription> resp = getWebhookSubscriptionsWithHttpInfo(clientId);
        return resp.getData();
    }

    /**
     * Get all webhook subscriptions by your Oauth client id
     * 
     * @param clientId Oauth client identifier (required)
     * @return ApiResponse&lt;RestApiArrayResultWebhookSubscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiArrayResultWebhookSubscription> getWebhookSubscriptionsWithHttpInfo(String clientId) throws ApiException {
        com.squareup.okhttp.Call call = getWebhookSubscriptionsValidateBeforeCall(clientId, null, null);
        Type localVarReturnType = new TypeToken<RestApiArrayResultWebhookSubscription>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all webhook subscriptions by your Oauth client id (asynchronously)
     * 
     * @param clientId Oauth client identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getWebhookSubscriptionsAsync(String clientId, final ApiCallback<RestApiArrayResultWebhookSubscription> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getWebhookSubscriptionsValidateBeforeCall(clientId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiArrayResultWebhookSubscription>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateWebhookSubscription
     * @param clientId Oauth client identifier (required)
     * @param webhookSubscriptionId Webhook subscription identifier (required)
     * @param webhookSubscription Webhook subscription object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateWebhookSubscriptionCall(String clientId, Integer webhookSubscriptionId, WebhookSubscription webhookSubscription, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = webhookSubscription;

        // create path and map variables
        String localVarPath = "/api/v1.0/webhooks/{clientId}/subscriptions/{webhookSubscriptionId}"
            .replaceAll("\\{" + "clientId" + "\\}", apiClient.escapeString(clientId.toString()))
            .replaceAll("\\{" + "webhookSubscriptionId" + "\\}", apiClient.escapeString(webhookSubscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateWebhookSubscriptionValidateBeforeCall(String clientId, Integer webhookSubscriptionId, WebhookSubscription webhookSubscription, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling updateWebhookSubscription(Async)");
        }
        
        // verify the required parameter 'webhookSubscriptionId' is set
        if (webhookSubscriptionId == null) {
            throw new ApiException("Missing the required parameter 'webhookSubscriptionId' when calling updateWebhookSubscription(Async)");
        }
        
        // verify the required parameter 'webhookSubscription' is set
        if (webhookSubscription == null) {
            throw new ApiException("Missing the required parameter 'webhookSubscription' when calling updateWebhookSubscription(Async)");
        }
        

        com.squareup.okhttp.Call call = updateWebhookSubscriptionCall(clientId, webhookSubscriptionId, webhookSubscription, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a webhook subscription object
     * 
     * @param clientId Oauth client identifier (required)
     * @param webhookSubscriptionId Webhook subscription identifier (required)
     * @param webhookSubscription Webhook subscription object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateWebhookSubscription(String clientId, Integer webhookSubscriptionId, WebhookSubscription webhookSubscription) throws ApiException {
        updateWebhookSubscriptionWithHttpInfo(clientId, webhookSubscriptionId, webhookSubscription);
    }

    /**
     * Update a webhook subscription object
     * 
     * @param clientId Oauth client identifier (required)
     * @param webhookSubscriptionId Webhook subscription identifier (required)
     * @param webhookSubscription Webhook subscription object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateWebhookSubscriptionWithHttpInfo(String clientId, Integer webhookSubscriptionId, WebhookSubscription webhookSubscription) throws ApiException {
        com.squareup.okhttp.Call call = updateWebhookSubscriptionValidateBeforeCall(clientId, webhookSubscriptionId, webhookSubscription, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update a webhook subscription object (asynchronously)
     * 
     * @param clientId Oauth client identifier (required)
     * @param webhookSubscriptionId Webhook subscription identifier (required)
     * @param webhookSubscription Webhook subscription object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateWebhookSubscriptionAsync(String clientId, Integer webhookSubscriptionId, WebhookSubscription webhookSubscription, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateWebhookSubscriptionValidateBeforeCall(clientId, webhookSubscriptionId, webhookSubscription, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
