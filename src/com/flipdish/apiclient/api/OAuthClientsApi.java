/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.flipdish.apiclient.api;

import com.flipdish.apiclient.ApiCallback;
import com.flipdish.apiclient.ApiClient;
import com.flipdish.apiclient.ApiException;
import com.flipdish.apiclient.ApiResponse;
import com.flipdish.apiclient.Configuration;
import com.flipdish.apiclient.Pair;
import com.flipdish.apiclient.ProgressRequestBody;
import com.flipdish.apiclient.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.flipdish.apiclient.model.OAuthClient;
import com.flipdish.apiclient.model.RestApiArrayResultOAuthClient;
import com.flipdish.apiclient.model.RestApiArrayResultOauthClientRedirectUri;
import com.flipdish.apiclient.model.RestApiErrorResult;
import com.flipdish.apiclient.model.RestApiForbiddenResult;
import com.flipdish.apiclient.model.RestApiResultOAuthClient;
import com.flipdish.apiclient.model.RestApiResultOauthClientRedirectUri;
import com.flipdish.apiclient.model.RestApiStringResult;
import com.flipdish.apiclient.model.RestApiUnauthorizedResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OAuthClientsApi {
    private ApiClient apiClient;

    public OAuthClientsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OAuthClientsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addRedirectUri
     * @param oAuthClientId OAuth client identifier (required)
     * @param uri Redirect uri (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addRedirectUriCall(String oAuthClientId, String uri, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = uri;

        // create path and map variables
        String localVarPath = "/api/v1.0/oauthclients/{oAuthClientId}/redirecturis"
            .replaceAll("\\{" + "oAuthClientId" + "\\}", apiClient.escapeString(oAuthClientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addRedirectUriValidateBeforeCall(String oAuthClientId, String uri, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'oAuthClientId' is set
        if (oAuthClientId == null) {
            throw new ApiException("Missing the required parameter 'oAuthClientId' when calling addRedirectUri(Async)");
        }
        
        // verify the required parameter 'uri' is set
        if (uri == null) {
            throw new ApiException("Missing the required parameter 'uri' when calling addRedirectUri(Async)");
        }
        

        com.squareup.okhttp.Call call = addRedirectUriCall(oAuthClientId, uri, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create OAuth client redirect uri
     * 
     * @param oAuthClientId OAuth client identifier (required)
     * @param uri Redirect uri (required)
     * @return RestApiResultOauthClientRedirectUri
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultOauthClientRedirectUri addRedirectUri(String oAuthClientId, String uri) throws ApiException {
        ApiResponse<RestApiResultOauthClientRedirectUri> resp = addRedirectUriWithHttpInfo(oAuthClientId, uri);
        return resp.getData();
    }

    /**
     * Create OAuth client redirect uri
     * 
     * @param oAuthClientId OAuth client identifier (required)
     * @param uri Redirect uri (required)
     * @return ApiResponse&lt;RestApiResultOauthClientRedirectUri&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultOauthClientRedirectUri> addRedirectUriWithHttpInfo(String oAuthClientId, String uri) throws ApiException {
        com.squareup.okhttp.Call call = addRedirectUriValidateBeforeCall(oAuthClientId, uri, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultOauthClientRedirectUri>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create OAuth client redirect uri (asynchronously)
     * 
     * @param oAuthClientId OAuth client identifier (required)
     * @param uri Redirect uri (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addRedirectUriAsync(String oAuthClientId, String uri, final ApiCallback<RestApiResultOauthClientRedirectUri> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addRedirectUriValidateBeforeCall(oAuthClientId, uri, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultOauthClientRedirectUri>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createOAuthClient
     * @param oAuthClient OAuth client (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createOAuthClientCall(OAuthClient oAuthClient, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = oAuthClient;

        // create path and map variables
        String localVarPath = "/api/v1.0/oauthclients";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createOAuthClientValidateBeforeCall(OAuthClient oAuthClient, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'oAuthClient' is set
        if (oAuthClient == null) {
            throw new ApiException("Missing the required parameter 'oAuthClient' when calling createOAuthClient(Async)");
        }
        

        com.squareup.okhttp.Call call = createOAuthClientCall(oAuthClient, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create OAuth client
     * 
     * @param oAuthClient OAuth client (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createOAuthClient(OAuthClient oAuthClient) throws ApiException {
        createOAuthClientWithHttpInfo(oAuthClient);
    }

    /**
     * Create OAuth client
     * 
     * @param oAuthClient OAuth client (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createOAuthClientWithHttpInfo(OAuthClient oAuthClient) throws ApiException {
        com.squareup.okhttp.Call call = createOAuthClientValidateBeforeCall(oAuthClient, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create OAuth client (asynchronously)
     * 
     * @param oAuthClient OAuth client (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createOAuthClientAsync(OAuthClient oAuthClient, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createOAuthClientValidateBeforeCall(oAuthClient, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteOAuthClient
     * @param oAuthClientId OAuth client identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteOAuthClientCall(String oAuthClientId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/oauthclients/{oAuthClientId}"
            .replaceAll("\\{" + "oAuthClientId" + "\\}", apiClient.escapeString(oAuthClientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteOAuthClientValidateBeforeCall(String oAuthClientId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'oAuthClientId' is set
        if (oAuthClientId == null) {
            throw new ApiException("Missing the required parameter 'oAuthClientId' when calling deleteOAuthClient(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteOAuthClientCall(oAuthClientId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete OAuth client
     * 
     * @param oAuthClientId OAuth client identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteOAuthClient(String oAuthClientId) throws ApiException {
        deleteOAuthClientWithHttpInfo(oAuthClientId);
    }

    /**
     * Delete OAuth client
     * 
     * @param oAuthClientId OAuth client identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteOAuthClientWithHttpInfo(String oAuthClientId) throws ApiException {
        com.squareup.okhttp.Call call = deleteOAuthClientValidateBeforeCall(oAuthClientId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete OAuth client (asynchronously)
     * 
     * @param oAuthClientId OAuth client identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteOAuthClientAsync(String oAuthClientId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteOAuthClientValidateBeforeCall(oAuthClientId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getOAuthClientByClientId
     * @param clientId OAuth client identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOAuthClientByClientIdCall(String clientId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/oauthclients/{clientId}"
            .replaceAll("\\{" + "clientId" + "\\}", apiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOAuthClientByClientIdValidateBeforeCall(String clientId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling getOAuthClientByClientId(Async)");
        }
        

        com.squareup.okhttp.Call call = getOAuthClientByClientIdCall(clientId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get OAuth client by identifier
     * 
     * @param clientId OAuth client identifier (required)
     * @return RestApiResultOAuthClient
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultOAuthClient getOAuthClientByClientId(String clientId) throws ApiException {
        ApiResponse<RestApiResultOAuthClient> resp = getOAuthClientByClientIdWithHttpInfo(clientId);
        return resp.getData();
    }

    /**
     * Get OAuth client by identifier
     * 
     * @param clientId OAuth client identifier (required)
     * @return ApiResponse&lt;RestApiResultOAuthClient&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultOAuthClient> getOAuthClientByClientIdWithHttpInfo(String clientId) throws ApiException {
        com.squareup.okhttp.Call call = getOAuthClientByClientIdValidateBeforeCall(clientId, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultOAuthClient>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get OAuth client by identifier (asynchronously)
     * 
     * @param clientId OAuth client identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOAuthClientByClientIdAsync(String clientId, final ApiCallback<RestApiResultOAuthClient> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOAuthClientByClientIdValidateBeforeCall(clientId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultOAuthClient>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOAuthClientSecret
     * @param clientId OAuth client identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOAuthClientSecretCall(String clientId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/oauthclients/{clientId}/secret"
            .replaceAll("\\{" + "clientId" + "\\}", apiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOAuthClientSecretValidateBeforeCall(String clientId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling getOAuthClientSecret(Async)");
        }
        

        com.squareup.okhttp.Call call = getOAuthClientSecretCall(clientId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get OAuth client secret key
     * 
     * @param clientId OAuth client identifier (required)
     * @return RestApiStringResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiStringResult getOAuthClientSecret(String clientId) throws ApiException {
        ApiResponse<RestApiStringResult> resp = getOAuthClientSecretWithHttpInfo(clientId);
        return resp.getData();
    }

    /**
     * Get OAuth client secret key
     * 
     * @param clientId OAuth client identifier (required)
     * @return ApiResponse&lt;RestApiStringResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiStringResult> getOAuthClientSecretWithHttpInfo(String clientId) throws ApiException {
        com.squareup.okhttp.Call call = getOAuthClientSecretValidateBeforeCall(clientId, null, null);
        Type localVarReturnType = new TypeToken<RestApiStringResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get OAuth client secret key (asynchronously)
     * 
     * @param clientId OAuth client identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOAuthClientSecretAsync(String clientId, final ApiCallback<RestApiStringResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOAuthClientSecretValidateBeforeCall(clientId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiStringResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOAuthClients
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOAuthClientsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/oauthclients";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOAuthClientsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getOAuthClientsCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all OAuth client
     * 
     * @return RestApiArrayResultOAuthClient
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiArrayResultOAuthClient getOAuthClients() throws ApiException {
        ApiResponse<RestApiArrayResultOAuthClient> resp = getOAuthClientsWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get all OAuth client
     * 
     * @return ApiResponse&lt;RestApiArrayResultOAuthClient&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiArrayResultOAuthClient> getOAuthClientsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getOAuthClientsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<RestApiArrayResultOAuthClient>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all OAuth client (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOAuthClientsAsync(final ApiCallback<RestApiArrayResultOAuthClient> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOAuthClientsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiArrayResultOAuthClient>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOauthAccessToken
     * @param oAuthClientId OAuth client identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOauthAccessTokenCall(String oAuthClientId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/oauthclients/{oAuthClientId}/accesstoken"
            .replaceAll("\\{" + "oAuthClientId" + "\\}", apiClient.escapeString(oAuthClientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOauthAccessTokenValidateBeforeCall(String oAuthClientId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'oAuthClientId' is set
        if (oAuthClientId == null) {
            throw new ApiException("Missing the required parameter 'oAuthClientId' when calling getOauthAccessToken(Async)");
        }
        

        com.squareup.okhttp.Call call = getOauthAccessTokenCall(oAuthClientId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get OAuth access token for client
     * 
     * @param oAuthClientId OAuth client identifier (required)
     * @return RestApiStringResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiStringResult getOauthAccessToken(String oAuthClientId) throws ApiException {
        ApiResponse<RestApiStringResult> resp = getOauthAccessTokenWithHttpInfo(oAuthClientId);
        return resp.getData();
    }

    /**
     * Get OAuth access token for client
     * 
     * @param oAuthClientId OAuth client identifier (required)
     * @return ApiResponse&lt;RestApiStringResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiStringResult> getOauthAccessTokenWithHttpInfo(String oAuthClientId) throws ApiException {
        com.squareup.okhttp.Call call = getOauthAccessTokenValidateBeforeCall(oAuthClientId, null, null);
        Type localVarReturnType = new TypeToken<RestApiStringResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get OAuth access token for client (asynchronously)
     * 
     * @param oAuthClientId OAuth client identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOauthAccessTokenAsync(String oAuthClientId, final ApiCallback<RestApiStringResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOauthAccessTokenValidateBeforeCall(oAuthClientId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiStringResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getRedirectUris
     * @param oAuthClientId OAuth client identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRedirectUrisCall(String oAuthClientId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/oauthclients/{oAuthClientId}/redirecturis"
            .replaceAll("\\{" + "oAuthClientId" + "\\}", apiClient.escapeString(oAuthClientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRedirectUrisValidateBeforeCall(String oAuthClientId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'oAuthClientId' is set
        if (oAuthClientId == null) {
            throw new ApiException("Missing the required parameter 'oAuthClientId' when calling getRedirectUris(Async)");
        }
        

        com.squareup.okhttp.Call call = getRedirectUrisCall(oAuthClientId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get OAuth client redirect uris
     * 
     * @param oAuthClientId OAuth client identifier (required)
     * @return RestApiArrayResultOauthClientRedirectUri
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiArrayResultOauthClientRedirectUri getRedirectUris(String oAuthClientId) throws ApiException {
        ApiResponse<RestApiArrayResultOauthClientRedirectUri> resp = getRedirectUrisWithHttpInfo(oAuthClientId);
        return resp.getData();
    }

    /**
     * Get OAuth client redirect uris
     * 
     * @param oAuthClientId OAuth client identifier (required)
     * @return ApiResponse&lt;RestApiArrayResultOauthClientRedirectUri&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiArrayResultOauthClientRedirectUri> getRedirectUrisWithHttpInfo(String oAuthClientId) throws ApiException {
        com.squareup.okhttp.Call call = getRedirectUrisValidateBeforeCall(oAuthClientId, null, null);
        Type localVarReturnType = new TypeToken<RestApiArrayResultOauthClientRedirectUri>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get OAuth client redirect uris (asynchronously)
     * 
     * @param oAuthClientId OAuth client identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRedirectUrisAsync(String oAuthClientId, final ApiCallback<RestApiArrayResultOauthClientRedirectUri> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRedirectUrisValidateBeforeCall(oAuthClientId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiArrayResultOauthClientRedirectUri>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for removeRedirectUri
     * @param oAuthClientId OAuth client identifier (required)
     * @param uriId Redirect uri identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call removeRedirectUriCall(String oAuthClientId, Integer uriId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/oauthclients/{oAuthClientId}/redirecturis/{uriId}"
            .replaceAll("\\{" + "oAuthClientId" + "\\}", apiClient.escapeString(oAuthClientId.toString()))
            .replaceAll("\\{" + "uriId" + "\\}", apiClient.escapeString(uriId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call removeRedirectUriValidateBeforeCall(String oAuthClientId, Integer uriId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'oAuthClientId' is set
        if (oAuthClientId == null) {
            throw new ApiException("Missing the required parameter 'oAuthClientId' when calling removeRedirectUri(Async)");
        }
        
        // verify the required parameter 'uriId' is set
        if (uriId == null) {
            throw new ApiException("Missing the required parameter 'uriId' when calling removeRedirectUri(Async)");
        }
        

        com.squareup.okhttp.Call call = removeRedirectUriCall(oAuthClientId, uriId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete OAuth client redirect uri
     * 
     * @param oAuthClientId OAuth client identifier (required)
     * @param uriId Redirect uri identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void removeRedirectUri(String oAuthClientId, Integer uriId) throws ApiException {
        removeRedirectUriWithHttpInfo(oAuthClientId, uriId);
    }

    /**
     * Delete OAuth client redirect uri
     * 
     * @param oAuthClientId OAuth client identifier (required)
     * @param uriId Redirect uri identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> removeRedirectUriWithHttpInfo(String oAuthClientId, Integer uriId) throws ApiException {
        com.squareup.okhttp.Call call = removeRedirectUriValidateBeforeCall(oAuthClientId, uriId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete OAuth client redirect uri (asynchronously)
     * 
     * @param oAuthClientId OAuth client identifier (required)
     * @param uriId Redirect uri identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeRedirectUriAsync(String oAuthClientId, Integer uriId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeRedirectUriValidateBeforeCall(oAuthClientId, uriId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
