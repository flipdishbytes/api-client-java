/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.flipdish.apiclient.api;

import com.flipdish.apiclient.ApiCallback;
import com.flipdish.apiclient.ApiClient;
import com.flipdish.apiclient.ApiException;
import com.flipdish.apiclient.ApiResponse;
import com.flipdish.apiclient.Configuration;
import com.flipdish.apiclient.Pair;
import com.flipdish.apiclient.ProgressRequestBody;
import com.flipdish.apiclient.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.flipdish.apiclient.model.BusinessHoursPeriodBase;
import java.io.File;
import com.flipdish.apiclient.model.MenuSectionAvailabilityBase;
import com.flipdish.apiclient.model.MenuSectionBase;
import com.flipdish.apiclient.model.RestApiArrayResultMenuSection;
import com.flipdish.apiclient.model.RestApiErrorResult;
import com.flipdish.apiclient.model.RestApiForbiddenResult;
import com.flipdish.apiclient.model.RestApiResultBusinessHoursPeriod;
import com.flipdish.apiclient.model.RestApiResultMenuSection;
import com.flipdish.apiclient.model.RestApiResultMenuSectionAvailability;
import com.flipdish.apiclient.model.RestApiStringResult;
import com.flipdish.apiclient.model.RestApiUnauthorizedResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MenuSectionsApi {
    private ApiClient apiClient;

    public MenuSectionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MenuSectionsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for cloneMenuSection
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cloneMenuSectionCall(Integer menuId, Integer menuSectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}/clone"
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()))
            .replaceAll("\\{" + "menuSectionId" + "\\}", apiClient.escapeString(menuSectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cloneMenuSectionValidateBeforeCall(Integer menuId, Integer menuSectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling cloneMenuSection(Async)");
        }
        
        // verify the required parameter 'menuSectionId' is set
        if (menuSectionId == null) {
            throw new ApiException("Missing the required parameter 'menuSectionId' when calling cloneMenuSection(Async)");
        }
        

        com.squareup.okhttp.Call call = cloneMenuSectionCall(menuId, menuSectionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Clone menu section
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @return RestApiResultMenuSection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultMenuSection cloneMenuSection(Integer menuId, Integer menuSectionId) throws ApiException {
        ApiResponse<RestApiResultMenuSection> resp = cloneMenuSectionWithHttpInfo(menuId, menuSectionId);
        return resp.getData();
    }

    /**
     * Clone menu section
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @return ApiResponse&lt;RestApiResultMenuSection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultMenuSection> cloneMenuSectionWithHttpInfo(Integer menuId, Integer menuSectionId) throws ApiException {
        com.squareup.okhttp.Call call = cloneMenuSectionValidateBeforeCall(menuId, menuSectionId, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultMenuSection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Clone menu section (asynchronously)
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cloneMenuSectionAsync(Integer menuId, Integer menuSectionId, final ApiCallback<RestApiResultMenuSection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cloneMenuSectionValidateBeforeCall(menuId, menuSectionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultMenuSection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createMenuAvailabilityForDay
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param dayOfWeek  (required)
     * @param businessHoursPeriod  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createMenuAvailabilityForDayCall(Integer menuId, Integer menuSectionId, String dayOfWeek, BusinessHoursPeriodBase businessHoursPeriod, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = businessHoursPeriod;

        // create path and map variables
        String localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}/availability/times/{dayOfWeek}"
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()))
            .replaceAll("\\{" + "menuSectionId" + "\\}", apiClient.escapeString(menuSectionId.toString()))
            .replaceAll("\\{" + "dayOfWeek" + "\\}", apiClient.escapeString(dayOfWeek.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createMenuAvailabilityForDayValidateBeforeCall(Integer menuId, Integer menuSectionId, String dayOfWeek, BusinessHoursPeriodBase businessHoursPeriod, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling createMenuAvailabilityForDay(Async)");
        }
        
        // verify the required parameter 'menuSectionId' is set
        if (menuSectionId == null) {
            throw new ApiException("Missing the required parameter 'menuSectionId' when calling createMenuAvailabilityForDay(Async)");
        }
        
        // verify the required parameter 'dayOfWeek' is set
        if (dayOfWeek == null) {
            throw new ApiException("Missing the required parameter 'dayOfWeek' when calling createMenuAvailabilityForDay(Async)");
        }
        
        // verify the required parameter 'businessHoursPeriod' is set
        if (businessHoursPeriod == null) {
            throw new ApiException("Missing the required parameter 'businessHoursPeriod' when calling createMenuAvailabilityForDay(Async)");
        }
        

        com.squareup.okhttp.Call call = createMenuAvailabilityForDayCall(menuId, menuSectionId, dayOfWeek, businessHoursPeriod, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create menu section
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param dayOfWeek  (required)
     * @param businessHoursPeriod  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object createMenuAvailabilityForDay(Integer menuId, Integer menuSectionId, String dayOfWeek, BusinessHoursPeriodBase businessHoursPeriod) throws ApiException {
        ApiResponse<Object> resp = createMenuAvailabilityForDayWithHttpInfo(menuId, menuSectionId, dayOfWeek, businessHoursPeriod);
        return resp.getData();
    }

    /**
     * Create menu section
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param dayOfWeek  (required)
     * @param businessHoursPeriod  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> createMenuAvailabilityForDayWithHttpInfo(Integer menuId, Integer menuSectionId, String dayOfWeek, BusinessHoursPeriodBase businessHoursPeriod) throws ApiException {
        com.squareup.okhttp.Call call = createMenuAvailabilityForDayValidateBeforeCall(menuId, menuSectionId, dayOfWeek, businessHoursPeriod, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create menu section (asynchronously)
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param dayOfWeek  (required)
     * @param businessHoursPeriod  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createMenuAvailabilityForDayAsync(Integer menuId, Integer menuSectionId, String dayOfWeek, BusinessHoursPeriodBase businessHoursPeriod, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createMenuAvailabilityForDayValidateBeforeCall(menuId, menuSectionId, dayOfWeek, businessHoursPeriod, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createMenuSection
     * @param menuId Menu identifier (required)
     * @param menuSection Menu section (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createMenuSectionCall(Integer menuId, MenuSectionBase menuSection, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = menuSection;

        // create path and map variables
        String localVarPath = "/api/v1.0/menus/{menuId}/sections"
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createMenuSectionValidateBeforeCall(Integer menuId, MenuSectionBase menuSection, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling createMenuSection(Async)");
        }
        
        // verify the required parameter 'menuSection' is set
        if (menuSection == null) {
            throw new ApiException("Missing the required parameter 'menuSection' when calling createMenuSection(Async)");
        }
        

        com.squareup.okhttp.Call call = createMenuSectionCall(menuId, menuSection, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create menu section
     * 
     * @param menuId Menu identifier (required)
     * @param menuSection Menu section (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object createMenuSection(Integer menuId, MenuSectionBase menuSection) throws ApiException {
        ApiResponse<Object> resp = createMenuSectionWithHttpInfo(menuId, menuSection);
        return resp.getData();
    }

    /**
     * Create menu section
     * 
     * @param menuId Menu identifier (required)
     * @param menuSection Menu section (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> createMenuSectionWithHttpInfo(Integer menuId, MenuSectionBase menuSection) throws ApiException {
        com.squareup.okhttp.Call call = createMenuSectionValidateBeforeCall(menuId, menuSection, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create menu section (asynchronously)
     * 
     * @param menuId Menu identifier (required)
     * @param menuSection Menu section (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createMenuSectionAsync(Integer menuId, MenuSectionBase menuSection, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createMenuSectionValidateBeforeCall(menuId, menuSection, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createMenuSectionAvailability
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSectionAvailability  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createMenuSectionAvailabilityCall(Integer menuId, Integer menuSectionId, MenuSectionAvailabilityBase menuSectionAvailability, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = menuSectionAvailability;

        // create path and map variables
        String localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}/availability"
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()))
            .replaceAll("\\{" + "menuSectionId" + "\\}", apiClient.escapeString(menuSectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createMenuSectionAvailabilityValidateBeforeCall(Integer menuId, Integer menuSectionId, MenuSectionAvailabilityBase menuSectionAvailability, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling createMenuSectionAvailability(Async)");
        }
        
        // verify the required parameter 'menuSectionId' is set
        if (menuSectionId == null) {
            throw new ApiException("Missing the required parameter 'menuSectionId' when calling createMenuSectionAvailability(Async)");
        }
        
        // verify the required parameter 'menuSectionAvailability' is set
        if (menuSectionAvailability == null) {
            throw new ApiException("Missing the required parameter 'menuSectionAvailability' when calling createMenuSectionAvailability(Async)");
        }
        

        com.squareup.okhttp.Call call = createMenuSectionAvailabilityCall(menuId, menuSectionId, menuSectionAvailability, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create menu section
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSectionAvailability  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object createMenuSectionAvailability(Integer menuId, Integer menuSectionId, MenuSectionAvailabilityBase menuSectionAvailability) throws ApiException {
        ApiResponse<Object> resp = createMenuSectionAvailabilityWithHttpInfo(menuId, menuSectionId, menuSectionAvailability);
        return resp.getData();
    }

    /**
     * Create menu section
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSectionAvailability  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> createMenuSectionAvailabilityWithHttpInfo(Integer menuId, Integer menuSectionId, MenuSectionAvailabilityBase menuSectionAvailability) throws ApiException {
        com.squareup.okhttp.Call call = createMenuSectionAvailabilityValidateBeforeCall(menuId, menuSectionId, menuSectionAvailability, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create menu section (asynchronously)
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSectionAvailability  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createMenuSectionAvailabilityAsync(Integer menuId, Integer menuSectionId, MenuSectionAvailabilityBase menuSectionAvailability, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createMenuSectionAvailabilityValidateBeforeCall(menuId, menuSectionId, menuSectionAvailability, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteMenuSection
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteMenuSectionCall(Integer menuId, Integer menuSectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}"
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()))
            .replaceAll("\\{" + "menuSectionId" + "\\}", apiClient.escapeString(menuSectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteMenuSectionValidateBeforeCall(Integer menuId, Integer menuSectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling deleteMenuSection(Async)");
        }
        
        // verify the required parameter 'menuSectionId' is set
        if (menuSectionId == null) {
            throw new ApiException("Missing the required parameter 'menuSectionId' when calling deleteMenuSection(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteMenuSectionCall(menuId, menuSectionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete menu section
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteMenuSection(Integer menuId, Integer menuSectionId) throws ApiException {
        deleteMenuSectionWithHttpInfo(menuId, menuSectionId);
    }

    /**
     * Delete menu section
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteMenuSectionWithHttpInfo(Integer menuId, Integer menuSectionId) throws ApiException {
        com.squareup.okhttp.Call call = deleteMenuSectionValidateBeforeCall(menuId, menuSectionId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete menu section (asynchronously)
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteMenuSectionAsync(Integer menuId, Integer menuSectionId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteMenuSectionValidateBeforeCall(menuId, menuSectionId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteMenuSectionImage
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteMenuSectionImageCall(Integer menuId, Integer menuSectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}/image"
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()))
            .replaceAll("\\{" + "menuSectionId" + "\\}", apiClient.escapeString(menuSectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteMenuSectionImageValidateBeforeCall(Integer menuId, Integer menuSectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling deleteMenuSectionImage(Async)");
        }
        
        // verify the required parameter 'menuSectionId' is set
        if (menuSectionId == null) {
            throw new ApiException("Missing the required parameter 'menuSectionId' when calling deleteMenuSectionImage(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteMenuSectionImageCall(menuId, menuSectionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete menu section image
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteMenuSectionImage(Integer menuId, Integer menuSectionId) throws ApiException {
        deleteMenuSectionImageWithHttpInfo(menuId, menuSectionId);
    }

    /**
     * Delete menu section image
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteMenuSectionImageWithHttpInfo(Integer menuId, Integer menuSectionId) throws ApiException {
        com.squareup.okhttp.Call call = deleteMenuSectionImageValidateBeforeCall(menuId, menuSectionId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete menu section image (asynchronously)
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteMenuSectionImageAsync(Integer menuId, Integer menuSectionId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteMenuSectionImageValidateBeforeCall(menuId, menuSectionId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getMenuSectionById
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMenuSectionByIdCall(Integer menuId, Integer menuSectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}"
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()))
            .replaceAll("\\{" + "menuSectionId" + "\\}", apiClient.escapeString(menuSectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMenuSectionByIdValidateBeforeCall(Integer menuId, Integer menuSectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling getMenuSectionById(Async)");
        }
        
        // verify the required parameter 'menuSectionId' is set
        if (menuSectionId == null) {
            throw new ApiException("Missing the required parameter 'menuSectionId' when calling getMenuSectionById(Async)");
        }
        

        com.squareup.okhttp.Call call = getMenuSectionByIdCall(menuId, menuSectionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get menu section by identifier
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @return RestApiResultMenuSection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultMenuSection getMenuSectionById(Integer menuId, Integer menuSectionId) throws ApiException {
        ApiResponse<RestApiResultMenuSection> resp = getMenuSectionByIdWithHttpInfo(menuId, menuSectionId);
        return resp.getData();
    }

    /**
     * Get menu section by identifier
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @return ApiResponse&lt;RestApiResultMenuSection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultMenuSection> getMenuSectionByIdWithHttpInfo(Integer menuId, Integer menuSectionId) throws ApiException {
        com.squareup.okhttp.Call call = getMenuSectionByIdValidateBeforeCall(menuId, menuSectionId, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultMenuSection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get menu section by identifier (asynchronously)
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMenuSectionByIdAsync(Integer menuId, Integer menuSectionId, final ApiCallback<RestApiResultMenuSection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMenuSectionByIdValidateBeforeCall(menuId, menuSectionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultMenuSection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getMenuSections
     * @param menuId Menu identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMenuSectionsCall(Integer menuId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/menus/{menuId}/sections"
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMenuSectionsValidateBeforeCall(Integer menuId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling getMenuSections(Async)");
        }
        

        com.squareup.okhttp.Call call = getMenuSectionsCall(menuId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get menu sections
     * 
     * @param menuId Menu identifier (required)
     * @return RestApiArrayResultMenuSection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiArrayResultMenuSection getMenuSections(Integer menuId) throws ApiException {
        ApiResponse<RestApiArrayResultMenuSection> resp = getMenuSectionsWithHttpInfo(menuId);
        return resp.getData();
    }

    /**
     * Get menu sections
     * 
     * @param menuId Menu identifier (required)
     * @return ApiResponse&lt;RestApiArrayResultMenuSection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiArrayResultMenuSection> getMenuSectionsWithHttpInfo(Integer menuId) throws ApiException {
        com.squareup.okhttp.Call call = getMenuSectionsValidateBeforeCall(menuId, null, null);
        Type localVarReturnType = new TypeToken<RestApiArrayResultMenuSection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get menu sections (asynchronously)
     * 
     * @param menuId Menu identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMenuSectionsAsync(Integer menuId, final ApiCallback<RestApiArrayResultMenuSection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMenuSectionsValidateBeforeCall(menuId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiArrayResultMenuSection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateMenuSection
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSection Menu section changes (delta) (required)
     * @param undoAfter An optional time period, in hours, after which the hide-section operaton will be undone. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateMenuSectionCall(Integer menuId, Integer menuSectionId, MenuSectionBase menuSection, Double undoAfter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = menuSection;

        // create path and map variables
        String localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}"
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()))
            .replaceAll("\\{" + "menuSectionId" + "\\}", apiClient.escapeString(menuSectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (undoAfter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("undoAfter", undoAfter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateMenuSectionValidateBeforeCall(Integer menuId, Integer menuSectionId, MenuSectionBase menuSection, Double undoAfter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling updateMenuSection(Async)");
        }
        
        // verify the required parameter 'menuSectionId' is set
        if (menuSectionId == null) {
            throw new ApiException("Missing the required parameter 'menuSectionId' when calling updateMenuSection(Async)");
        }
        
        // verify the required parameter 'menuSection' is set
        if (menuSection == null) {
            throw new ApiException("Missing the required parameter 'menuSection' when calling updateMenuSection(Async)");
        }
        

        com.squareup.okhttp.Call call = updateMenuSectionCall(menuId, menuSectionId, menuSection, undoAfter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update menu section
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSection Menu section changes (delta) (required)
     * @param undoAfter An optional time period, in hours, after which the hide-section operaton will be undone. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateMenuSection(Integer menuId, Integer menuSectionId, MenuSectionBase menuSection, Double undoAfter) throws ApiException {
        updateMenuSectionWithHttpInfo(menuId, menuSectionId, menuSection, undoAfter);
    }

    /**
     * Update menu section
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSection Menu section changes (delta) (required)
     * @param undoAfter An optional time period, in hours, after which the hide-section operaton will be undone. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateMenuSectionWithHttpInfo(Integer menuId, Integer menuSectionId, MenuSectionBase menuSection, Double undoAfter) throws ApiException {
        com.squareup.okhttp.Call call = updateMenuSectionValidateBeforeCall(menuId, menuSectionId, menuSection, undoAfter, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update menu section (asynchronously)
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSection Menu section changes (delta) (required)
     * @param undoAfter An optional time period, in hours, after which the hide-section operaton will be undone. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateMenuSectionAsync(Integer menuId, Integer menuSectionId, MenuSectionBase menuSection, Double undoAfter, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateMenuSectionValidateBeforeCall(menuId, menuSectionId, menuSection, undoAfter, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for uploadMenuSectionImage
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param image Menu section image (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call uploadMenuSectionImageCall(Integer menuId, Integer menuSectionId, File image, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}/image"
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()))
            .replaceAll("\\{" + "menuSectionId" + "\\}", apiClient.escapeString(menuSectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (image != null)
        localVarFormParams.put("Image", image);

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call uploadMenuSectionImageValidateBeforeCall(Integer menuId, Integer menuSectionId, File image, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling uploadMenuSectionImage(Async)");
        }
        
        // verify the required parameter 'menuSectionId' is set
        if (menuSectionId == null) {
            throw new ApiException("Missing the required parameter 'menuSectionId' when calling uploadMenuSectionImage(Async)");
        }
        
        // verify the required parameter 'image' is set
        if (image == null) {
            throw new ApiException("Missing the required parameter 'image' when calling uploadMenuSectionImage(Async)");
        }
        

        com.squareup.okhttp.Call call = uploadMenuSectionImageCall(menuId, menuSectionId, image, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Upload menu section image
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param image Menu section image (required)
     * @return RestApiStringResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiStringResult uploadMenuSectionImage(Integer menuId, Integer menuSectionId, File image) throws ApiException {
        ApiResponse<RestApiStringResult> resp = uploadMenuSectionImageWithHttpInfo(menuId, menuSectionId, image);
        return resp.getData();
    }

    /**
     * Upload menu section image
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param image Menu section image (required)
     * @return ApiResponse&lt;RestApiStringResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiStringResult> uploadMenuSectionImageWithHttpInfo(Integer menuId, Integer menuSectionId, File image) throws ApiException {
        com.squareup.okhttp.Call call = uploadMenuSectionImageValidateBeforeCall(menuId, menuSectionId, image, null, null);
        Type localVarReturnType = new TypeToken<RestApiStringResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Upload menu section image (asynchronously)
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param image Menu section image (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call uploadMenuSectionImageAsync(Integer menuId, Integer menuSectionId, File image, final ApiCallback<RestApiStringResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = uploadMenuSectionImageValidateBeforeCall(menuId, menuSectionId, image, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiStringResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
