/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.flipdish.apiclient.model;

import java.util.Objects;
import java.util.Arrays;
import com.flipdish.apiclient.model.Coordinates;
import com.flipdish.apiclient.model.Language;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;

/**
 * App
 */
@ApiModel(description = "App")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-02-21T10:37:59.975Z")
public class App implements Serializable {
  private static final long serialVersionUID = 1L;

  @SerializedName("AppId")
  private String appId = null;

  @SerializedName("Name")
  private String name = null;

  @SerializedName("MapCenter")
  private Coordinates mapCenter = null;

  @SerializedName("MapNorthEast")
  private Coordinates mapNorthEast = null;

  @SerializedName("MapSouthWest")
  private Coordinates mapSouthWest = null;

  /**
   * App access level for the logged in user
   */
  @JsonAdapter(AppAccessLevelEnum.Adapter.class)
  public enum AppAccessLevelEnum {
    NONE("None"),
    
    OWNER("Owner"),
    
    MANAGEDOWNER("ManagedOwner"),
    
    STOREMANAGER("StoreManager"),
    
    STORESTAFF("StoreStaff"),
    
    STOREREADWRITEACCESS("StoreReadWriteAccess"),
    
    STOREREADONLYACCESS("StoreReadOnlyAccess"),
    
    FINANCEMANGER("FinanceManger");

    private String value;

    AppAccessLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AppAccessLevelEnum fromValue(String text) {
      for (AppAccessLevelEnum b : AppAccessLevelEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<AppAccessLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AppAccessLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AppAccessLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return AppAccessLevelEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("AppAccessLevel")
  private AppAccessLevelEnum appAccessLevel = null;

  @SerializedName("IconUrl")
  private String iconUrl = null;

  @SerializedName("IconThumbnailUrl")
  private String iconThumbnailUrl = null;

  @SerializedName("CountryId")
  private String countryId = null;

  @SerializedName("AvailableAppLanguages")
  private List<Language> availableAppLanguages = null;

  public App appId(String appId) {
    this.appId = appId;
    return this;
  }

   /**
   * App Identifier
   * @return appId
  **/
  @ApiModelProperty(value = "App Identifier")
  public String getAppId() {
    return appId;
  }

  public void setAppId(String appId) {
    this.appId = appId;
  }

  public App name(String name) {
    this.name = name;
    return this;
  }

   /**
   * App name
   * @return name
  **/
  @ApiModelProperty(value = "App name")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public App mapCenter(Coordinates mapCenter) {
    this.mapCenter = mapCenter;
    return this;
  }

   /**
   * Center of the map coordinates
   * @return mapCenter
  **/
  @ApiModelProperty(value = "Center of the map coordinates")
  public Coordinates getMapCenter() {
    return mapCenter;
  }

  public void setMapCenter(Coordinates mapCenter) {
    this.mapCenter = mapCenter;
  }

  public App mapNorthEast(Coordinates mapNorthEast) {
    this.mapNorthEast = mapNorthEast;
    return this;
  }

   /**
   * North East(Top Right) Corner of the map coordinates
   * @return mapNorthEast
  **/
  @ApiModelProperty(value = "North East(Top Right) Corner of the map coordinates")
  public Coordinates getMapNorthEast() {
    return mapNorthEast;
  }

  public void setMapNorthEast(Coordinates mapNorthEast) {
    this.mapNorthEast = mapNorthEast;
  }

  public App mapSouthWest(Coordinates mapSouthWest) {
    this.mapSouthWest = mapSouthWest;
    return this;
  }

   /**
   * South West (Bottom Left) Corner of the map coordinates
   * @return mapSouthWest
  **/
  @ApiModelProperty(value = "South West (Bottom Left) Corner of the map coordinates")
  public Coordinates getMapSouthWest() {
    return mapSouthWest;
  }

  public void setMapSouthWest(Coordinates mapSouthWest) {
    this.mapSouthWest = mapSouthWest;
  }

  public App appAccessLevel(AppAccessLevelEnum appAccessLevel) {
    this.appAccessLevel = appAccessLevel;
    return this;
  }

   /**
   * App access level for the logged in user
   * @return appAccessLevel
  **/
  @ApiModelProperty(value = "App access level for the logged in user")
  public AppAccessLevelEnum getAppAccessLevel() {
    return appAccessLevel;
  }

  public void setAppAccessLevel(AppAccessLevelEnum appAccessLevel) {
    this.appAccessLevel = appAccessLevel;
  }

  public App iconUrl(String iconUrl) {
    this.iconUrl = iconUrl;
    return this;
  }

   /**
   * Icon url
   * @return iconUrl
  **/
  @ApiModelProperty(value = "Icon url")
  public String getIconUrl() {
    return iconUrl;
  }

  public void setIconUrl(String iconUrl) {
    this.iconUrl = iconUrl;
  }

  public App iconThumbnailUrl(String iconThumbnailUrl) {
    this.iconThumbnailUrl = iconThumbnailUrl;
    return this;
  }

   /**
   * Icon thumbnail url
   * @return iconThumbnailUrl
  **/
  @ApiModelProperty(value = "Icon thumbnail url")
  public String getIconThumbnailUrl() {
    return iconThumbnailUrl;
  }

  public void setIconThumbnailUrl(String iconThumbnailUrl) {
    this.iconThumbnailUrl = iconThumbnailUrl;
  }

  public App countryId(String countryId) {
    this.countryId = countryId;
    return this;
  }

   /**
   * Country identifier
   * @return countryId
  **/
  @ApiModelProperty(value = "Country identifier")
  public String getCountryId() {
    return countryId;
  }

  public void setCountryId(String countryId) {
    this.countryId = countryId;
  }

  public App availableAppLanguages(List<Language> availableAppLanguages) {
    this.availableAppLanguages = availableAppLanguages;
    return this;
  }

  public App addAvailableAppLanguagesItem(Language availableAppLanguagesItem) {
    if (this.availableAppLanguages == null) {
      this.availableAppLanguages = new ArrayList<>();
    }
    this.availableAppLanguages.add(availableAppLanguagesItem);
    return this;
  }

   /**
   * Available Languages for Apps\\Staff
   * @return availableAppLanguages
  **/
  @ApiModelProperty(value = "Available Languages for Apps\\Staff")
  public List<Language> getAvailableAppLanguages() {
    return availableAppLanguages;
  }

  public void setAvailableAppLanguages(List<Language> availableAppLanguages) {
    this.availableAppLanguages = availableAppLanguages;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    App app = (App) o;
    return Objects.equals(this.appId, app.appId) &&
        Objects.equals(this.name, app.name) &&
        Objects.equals(this.mapCenter, app.mapCenter) &&
        Objects.equals(this.mapNorthEast, app.mapNorthEast) &&
        Objects.equals(this.mapSouthWest, app.mapSouthWest) &&
        Objects.equals(this.appAccessLevel, app.appAccessLevel) &&
        Objects.equals(this.iconUrl, app.iconUrl) &&
        Objects.equals(this.iconThumbnailUrl, app.iconThumbnailUrl) &&
        Objects.equals(this.countryId, app.countryId) &&
        Objects.equals(this.availableAppLanguages, app.availableAppLanguages);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appId, name, mapCenter, mapNorthEast, mapSouthWest, appAccessLevel, iconUrl, iconThumbnailUrl, countryId, availableAppLanguages);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class App {\n");
    
    sb.append("    appId: ").append(toIndentedString(appId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    mapCenter: ").append(toIndentedString(mapCenter)).append("\n");
    sb.append("    mapNorthEast: ").append(toIndentedString(mapNorthEast)).append("\n");
    sb.append("    mapSouthWest: ").append(toIndentedString(mapSouthWest)).append("\n");
    sb.append("    appAccessLevel: ").append(toIndentedString(appAccessLevel)).append("\n");
    sb.append("    iconUrl: ").append(toIndentedString(iconUrl)).append("\n");
    sb.append("    iconThumbnailUrl: ").append(toIndentedString(iconThumbnailUrl)).append("\n");
    sb.append("    countryId: ").append(toIndentedString(countryId)).append("\n");
    sb.append("    availableAppLanguages: ").append(toIndentedString(availableAppLanguages)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

