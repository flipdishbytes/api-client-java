/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.flipdish.apiclient.model;

import java.util.Objects;
import java.util.Arrays;
import com.flipdish.apiclient.model.Coordinates;
import com.flipdish.apiclient.model.CustomerSummary;
import com.flipdish.apiclient.model.DeliveryLocation;
import com.flipdish.apiclient.model.FeeSummary;
import com.flipdish.apiclient.model.OrderItem;
import com.flipdish.apiclient.model.OrderVoucherSummary;
import com.flipdish.apiclient.model.StoreSummary;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;

/**
 * Order
 */
@ApiModel(description = "Order")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-02-21T10:37:59.975Z")
public class Order implements Serializable {
  private static final long serialVersionUID = 1L;

  @SerializedName("Store")
  private StoreSummary store = null;

  @SerializedName("Customer")
  private CustomerSummary customer = null;

  @SerializedName("Voucher")
  private OrderVoucherSummary voucher = null;

  @SerializedName("Fees")
  private FeeSummary fees = null;

  @SerializedName("OrderItems")
  private List<OrderItem> orderItems = null;

  @SerializedName("DeliveryLocation")
  private DeliveryLocation deliveryLocation = null;

  @SerializedName("CustomerLocation")
  private Coordinates customerLocation = null;

  @SerializedName("OrderId")
  private Integer orderId = null;

  /**
   * Delivery type
   */
  @JsonAdapter(DeliveryTypeEnum.Adapter.class)
  public enum DeliveryTypeEnum {
    DELIVERY("Delivery"),
    
    PICKUP("Pickup");

    private String value;

    DeliveryTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DeliveryTypeEnum fromValue(String text) {
      for (DeliveryTypeEnum b : DeliveryTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<DeliveryTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DeliveryTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DeliveryTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return DeliveryTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("DeliveryType")
  private DeliveryTypeEnum deliveryType = null;

  /**
   * Pickup location type
   */
  @JsonAdapter(PickupLocationTypeEnum.Adapter.class)
  public enum PickupLocationTypeEnum {
    TAKEOUT("TakeOut"),
    
    TABLESERVICE("TableService"),
    
    DINEIN("DineIn");

    private String value;

    PickupLocationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PickupLocationTypeEnum fromValue(String text) {
      for (PickupLocationTypeEnum b : PickupLocationTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<PickupLocationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PickupLocationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PickupLocationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return PickupLocationTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("PickupLocationType")
  private PickupLocationTypeEnum pickupLocationType = null;

  @SerializedName("TipAmount")
  private Double tipAmount = null;

  @SerializedName("DeliveryAmount")
  private Double deliveryAmount = null;

  @SerializedName("OrderItemsAmount")
  private Double orderItemsAmount = null;

  @SerializedName("Amount")
  private Double amount = null;

  @SerializedName("ProcessingFee")
  private Double processingFee = null;

  /**
   * Payment account type
   */
  @JsonAdapter(PaymentAccountTypeEnum.Adapter.class)
  public enum PaymentAccountTypeEnum {
    CARD("Card"),
    
    CASH("Cash"),
    
    IDEAL("Ideal"),
    
    BANCONTACT("Bancontact"),
    
    GIROPAY("Giropay"),
    
    EPS("Eps");

    private String value;

    PaymentAccountTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PaymentAccountTypeEnum fromValue(String text) {
      for (PaymentAccountTypeEnum b : PaymentAccountTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<PaymentAccountTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PaymentAccountTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PaymentAccountTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return PaymentAccountTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("PaymentAccountType")
  private PaymentAccountTypeEnum paymentAccountType = null;

  @SerializedName("PaymentAccountDescription")
  private String paymentAccountDescription = null;

  /**
   * Order state
   */
  @JsonAdapter(OrderStateEnum.Adapter.class)
  public enum OrderStateEnum {
    CREATED("Created"),
    
    PLACEDCANBECANCELLED("PlacedCanBeCancelled"),
    
    READYTOPROCESS("ReadyToProcess"),
    
    ACCEPTEDBYRESTAURANT("AcceptedByRestaurant"),
    
    DISPATCHED("Dispatched"),
    
    DELIVERED("Delivered"),
    
    CANCELLED("Cancelled"),
    
    MANUALREVIEW("ManualReview"),
    
    REJECTEDBYSTORE("RejectedByStore"),
    
    REJECTEDBYFLIPDISH("RejectedByFlipdish"),
    
    REJECTEDAUTOMATICALLY("RejectedAutomatically"),
    
    REJECTEDAFTERBEINGACCEPTED("RejectedAfterBeingAccepted"),
    
    ACCEPTEDANDREFUNDED("AcceptedAndRefunded");

    private String value;

    OrderStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OrderStateEnum fromValue(String text) {
      for (OrderStateEnum b : OrderStateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<OrderStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OrderStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OrderStateEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return OrderStateEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("OrderState")
  private OrderStateEnum orderState = null;

  @SerializedName("IsPreOrder")
  private Boolean isPreOrder = null;

  @SerializedName("PlacedTime")
  private OffsetDateTime placedTime = null;

  @SerializedName("RequestedForTime")
  private OffsetDateTime requestedForTime = null;

  @SerializedName("ChefNote")
  private String chefNote = null;

  /**
   * Used app type
   */
  @JsonAdapter(AppTypeEnum.Adapter.class)
  public enum AppTypeEnum {
    UNKNOWN("Unknown"),
    
    IOS("Ios"),
    
    ANDROID("Android"),
    
    WEB("Web"),
    
    KIOSK("Kiosk"),
    
    POS("Pos"),
    
    TELEPHONECALL("TelephoneCall"),
    
    SMS("Sms"),
    
    PWAANDROID("PwaAndroid"),
    
    PWAIOS("PwaIos");

    private String value;

    AppTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AppTypeEnum fromValue(String text) {
      for (AppTypeEnum b : AppTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<AppTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AppTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AppTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return AppTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("AppType")
  private AppTypeEnum appType = null;

  @SerializedName("UserRating")
  private Integer userRating = null;

  /**
   * Status of the payment
   */
  @JsonAdapter(PaymentStatusEnum.Adapter.class)
  public enum PaymentStatusEnum {
    PAID("Paid"),
    
    UNPAID("Unpaid"),
    
    REFUNDED("Refunded"),
    
    PARTIALLYREFUNDED("PartiallyRefunded"),
    
    DISPUTED("Disputed");

    private String value;

    PaymentStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PaymentStatusEnum fromValue(String text) {
      for (PaymentStatusEnum b : PaymentStatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<PaymentStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PaymentStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PaymentStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return PaymentStatusEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("PaymentStatus")
  private PaymentStatusEnum paymentStatus = null;

  /**
   * Rejection reason. Can have value if the order is rejected.
   */
  @JsonAdapter(RejectionReasonEnum.Adapter.class)
  public enum RejectionReasonEnum {
    TOOBUSY("TooBusy"),
    
    FOODUNAVAILABLE("FoodUnavailable"),
    
    UNABLETODELIVER("UnableToDeliver"),
    
    UNKNOWNADDRESS("UnknownAddress"),
    
    UNKNOWNREASON("UnknownReason"),
    
    TOOSOON("TooSoon"),
    
    TIMEUNAVAILABLE("TimeUnavailable"),
    
    DONTDELIVERTOAREA("DontDeliverToArea"),
    
    STOREUNCONTACTABLE("StoreUncontactable");

    private String value;

    RejectionReasonEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RejectionReasonEnum fromValue(String text) {
      for (RejectionReasonEnum b : RejectionReasonEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<RejectionReasonEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RejectionReasonEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RejectionReasonEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return RejectionReasonEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("RejectionReason")
  private RejectionReasonEnum rejectionReason = null;

  public Order store(StoreSummary store) {
    this.store = store;
    return this;
  }

   /**
   * Store summary
   * @return store
  **/
  @ApiModelProperty(value = "Store summary")
  public StoreSummary getStore() {
    return store;
  }

  public void setStore(StoreSummary store) {
    this.store = store;
  }

  public Order customer(CustomerSummary customer) {
    this.customer = customer;
    return this;
  }

   /**
   * Customer summary
   * @return customer
  **/
  @ApiModelProperty(value = "Customer summary")
  public CustomerSummary getCustomer() {
    return customer;
  }

  public void setCustomer(CustomerSummary customer) {
    this.customer = customer;
  }

  public Order voucher(OrderVoucherSummary voucher) {
    this.voucher = voucher;
    return this;
  }

   /**
   * Voucher summary
   * @return voucher
  **/
  @ApiModelProperty(value = "Voucher summary")
  public OrderVoucherSummary getVoucher() {
    return voucher;
  }

  public void setVoucher(OrderVoucherSummary voucher) {
    this.voucher = voucher;
  }

  public Order fees(FeeSummary fees) {
    this.fees = fees;
    return this;
  }

   /**
   * Fee summary
   * @return fees
  **/
  @ApiModelProperty(value = "Fee summary")
  public FeeSummary getFees() {
    return fees;
  }

  public void setFees(FeeSummary fees) {
    this.fees = fees;
  }

  public Order orderItems(List<OrderItem> orderItems) {
    this.orderItems = orderItems;
    return this;
  }

  public Order addOrderItemsItem(OrderItem orderItemsItem) {
    if (this.orderItems == null) {
      this.orderItems = new ArrayList<>();
    }
    this.orderItems.add(orderItemsItem);
    return this;
  }

   /**
   * Ordered items
   * @return orderItems
  **/
  @ApiModelProperty(value = "Ordered items")
  public List<OrderItem> getOrderItems() {
    return orderItems;
  }

  public void setOrderItems(List<OrderItem> orderItems) {
    this.orderItems = orderItems;
  }

  public Order deliveryLocation(DeliveryLocation deliveryLocation) {
    this.deliveryLocation = deliveryLocation;
    return this;
  }

   /**
   * Delivery location for delivery orders
   * @return deliveryLocation
  **/
  @ApiModelProperty(value = "Delivery location for delivery orders")
  public DeliveryLocation getDeliveryLocation() {
    return deliveryLocation;
  }

  public void setDeliveryLocation(DeliveryLocation deliveryLocation) {
    this.deliveryLocation = deliveryLocation;
  }

  public Order customerLocation(Coordinates customerLocation) {
    this.customerLocation = customerLocation;
    return this;
  }

   /**
   * Customer location
   * @return customerLocation
  **/
  @ApiModelProperty(value = "Customer location")
  public Coordinates getCustomerLocation() {
    return customerLocation;
  }

  public void setCustomerLocation(Coordinates customerLocation) {
    this.customerLocation = customerLocation;
  }

  public Order orderId(Integer orderId) {
    this.orderId = orderId;
    return this;
  }

   /**
   * Order identifier
   * @return orderId
  **/
  @ApiModelProperty(value = "Order identifier")
  public Integer getOrderId() {
    return orderId;
  }

  public void setOrderId(Integer orderId) {
    this.orderId = orderId;
  }

  public Order deliveryType(DeliveryTypeEnum deliveryType) {
    this.deliveryType = deliveryType;
    return this;
  }

   /**
   * Delivery type
   * @return deliveryType
  **/
  @ApiModelProperty(value = "Delivery type")
  public DeliveryTypeEnum getDeliveryType() {
    return deliveryType;
  }

  public void setDeliveryType(DeliveryTypeEnum deliveryType) {
    this.deliveryType = deliveryType;
  }

  public Order pickupLocationType(PickupLocationTypeEnum pickupLocationType) {
    this.pickupLocationType = pickupLocationType;
    return this;
  }

   /**
   * Pickup location type
   * @return pickupLocationType
  **/
  @ApiModelProperty(value = "Pickup location type")
  public PickupLocationTypeEnum getPickupLocationType() {
    return pickupLocationType;
  }

  public void setPickupLocationType(PickupLocationTypeEnum pickupLocationType) {
    this.pickupLocationType = pickupLocationType;
  }

  public Order tipAmount(Double tipAmount) {
    this.tipAmount = tipAmount;
    return this;
  }

   /**
   * Tip amount
   * @return tipAmount
  **/
  @ApiModelProperty(value = "Tip amount")
  public Double getTipAmount() {
    return tipAmount;
  }

  public void setTipAmount(Double tipAmount) {
    this.tipAmount = tipAmount;
  }

  public Order deliveryAmount(Double deliveryAmount) {
    this.deliveryAmount = deliveryAmount;
    return this;
  }

   /**
   * Delivery amount
   * @return deliveryAmount
  **/
  @ApiModelProperty(value = "Delivery amount")
  public Double getDeliveryAmount() {
    return deliveryAmount;
  }

  public void setDeliveryAmount(Double deliveryAmount) {
    this.deliveryAmount = deliveryAmount;
  }

  public Order orderItemsAmount(Double orderItemsAmount) {
    this.orderItemsAmount = orderItemsAmount;
    return this;
  }

   /**
   * Ordered items amount
   * @return orderItemsAmount
  **/
  @ApiModelProperty(value = "Ordered items amount")
  public Double getOrderItemsAmount() {
    return orderItemsAmount;
  }

  public void setOrderItemsAmount(Double orderItemsAmount) {
    this.orderItemsAmount = orderItemsAmount;
  }

  public Order amount(Double amount) {
    this.amount = amount;
    return this;
  }

   /**
   * This is the sum of the OrderItemsAmount, DeliveryAmount, TipAmount and Voucher.Amount (which is usually negative) and OnlineOrderingFee for cash orders.  It does not include the OnlineOrderingFee in the case of card orders as this fee is charged by Flipdish directly to the customer.
   * @return amount
  **/
  @ApiModelProperty(value = "This is the sum of the OrderItemsAmount, DeliveryAmount, TipAmount and Voucher.Amount (which is usually negative) and OnlineOrderingFee for cash orders.  It does not include the OnlineOrderingFee in the case of card orders as this fee is charged by Flipdish directly to the customer.")
  public Double getAmount() {
    return amount;
  }

  public void setAmount(Double amount) {
    this.amount = amount;
  }

  public Order processingFee(Double processingFee) {
    this.processingFee = processingFee;
    return this;
  }

   /**
   * This contains the online ordering processing fee. For card payments this is charged directly to the customer and for cash orders it is paid by the customer to the store. It is tax inclusive.
   * @return processingFee
  **/
  @ApiModelProperty(value = "This contains the online ordering processing fee. For card payments this is charged directly to the customer and for cash orders it is paid by the customer to the store. It is tax inclusive.")
  public Double getProcessingFee() {
    return processingFee;
  }

  public void setProcessingFee(Double processingFee) {
    this.processingFee = processingFee;
  }

  public Order paymentAccountType(PaymentAccountTypeEnum paymentAccountType) {
    this.paymentAccountType = paymentAccountType;
    return this;
  }

   /**
   * Payment account type
   * @return paymentAccountType
  **/
  @ApiModelProperty(value = "Payment account type")
  public PaymentAccountTypeEnum getPaymentAccountType() {
    return paymentAccountType;
  }

  public void setPaymentAccountType(PaymentAccountTypeEnum paymentAccountType) {
    this.paymentAccountType = paymentAccountType;
  }

  public Order paymentAccountDescription(String paymentAccountDescription) {
    this.paymentAccountDescription = paymentAccountDescription;
    return this;
  }

   /**
   * Payment account description (like Visa ****2371 or Apple Pay. or Cash)
   * @return paymentAccountDescription
  **/
  @ApiModelProperty(value = "Payment account description (like Visa ****2371 or Apple Pay. or Cash)")
  public String getPaymentAccountDescription() {
    return paymentAccountDescription;
  }

  public void setPaymentAccountDescription(String paymentAccountDescription) {
    this.paymentAccountDescription = paymentAccountDescription;
  }

  public Order orderState(OrderStateEnum orderState) {
    this.orderState = orderState;
    return this;
  }

   /**
   * Order state
   * @return orderState
  **/
  @ApiModelProperty(value = "Order state")
  public OrderStateEnum getOrderState() {
    return orderState;
  }

  public void setOrderState(OrderStateEnum orderState) {
    this.orderState = orderState;
  }

  public Order isPreOrder(Boolean isPreOrder) {
    this.isPreOrder = isPreOrder;
    return this;
  }

   /**
   * Is pre-order
   * @return isPreOrder
  **/
  @ApiModelProperty(value = "Is pre-order")
  public Boolean isIsPreOrder() {
    return isPreOrder;
  }

  public void setIsPreOrder(Boolean isPreOrder) {
    this.isPreOrder = isPreOrder;
  }

  public Order placedTime(OffsetDateTime placedTime) {
    this.placedTime = placedTime;
    return this;
  }

   /**
   * Order placed time
   * @return placedTime
  **/
  @ApiModelProperty(value = "Order placed time")
  public OffsetDateTime getPlacedTime() {
    return placedTime;
  }

  public void setPlacedTime(OffsetDateTime placedTime) {
    this.placedTime = placedTime;
  }

  public Order requestedForTime(OffsetDateTime requestedForTime) {
    this.requestedForTime = requestedForTime;
    return this;
  }

   /**
   * Order requested for
   * @return requestedForTime
  **/
  @ApiModelProperty(value = "Order requested for")
  public OffsetDateTime getRequestedForTime() {
    return requestedForTime;
  }

  public void setRequestedForTime(OffsetDateTime requestedForTime) {
    this.requestedForTime = requestedForTime;
  }

  public Order chefNote(String chefNote) {
    this.chefNote = chefNote;
    return this;
  }

   /**
   * Chef note
   * @return chefNote
  **/
  @ApiModelProperty(value = "Chef note")
  public String getChefNote() {
    return chefNote;
  }

  public void setChefNote(String chefNote) {
    this.chefNote = chefNote;
  }

  public Order appType(AppTypeEnum appType) {
    this.appType = appType;
    return this;
  }

   /**
   * Used app type
   * @return appType
  **/
  @ApiModelProperty(value = "Used app type")
  public AppTypeEnum getAppType() {
    return appType;
  }

  public void setAppType(AppTypeEnum appType) {
    this.appType = appType;
  }

  public Order userRating(Integer userRating) {
    this.userRating = userRating;
    return this;
  }

   /**
   * User rating
   * @return userRating
  **/
  @ApiModelProperty(value = "User rating")
  public Integer getUserRating() {
    return userRating;
  }

  public void setUserRating(Integer userRating) {
    this.userRating = userRating;
  }

  public Order paymentStatus(PaymentStatusEnum paymentStatus) {
    this.paymentStatus = paymentStatus;
    return this;
  }

   /**
   * Status of the payment
   * @return paymentStatus
  **/
  @ApiModelProperty(value = "Status of the payment")
  public PaymentStatusEnum getPaymentStatus() {
    return paymentStatus;
  }

  public void setPaymentStatus(PaymentStatusEnum paymentStatus) {
    this.paymentStatus = paymentStatus;
  }

  public Order rejectionReason(RejectionReasonEnum rejectionReason) {
    this.rejectionReason = rejectionReason;
    return this;
  }

   /**
   * Rejection reason. Can have value if the order is rejected.
   * @return rejectionReason
  **/
  @ApiModelProperty(value = "Rejection reason. Can have value if the order is rejected.")
  public RejectionReasonEnum getRejectionReason() {
    return rejectionReason;
  }

  public void setRejectionReason(RejectionReasonEnum rejectionReason) {
    this.rejectionReason = rejectionReason;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Order order = (Order) o;
    return Objects.equals(this.store, order.store) &&
        Objects.equals(this.customer, order.customer) &&
        Objects.equals(this.voucher, order.voucher) &&
        Objects.equals(this.fees, order.fees) &&
        Objects.equals(this.orderItems, order.orderItems) &&
        Objects.equals(this.deliveryLocation, order.deliveryLocation) &&
        Objects.equals(this.customerLocation, order.customerLocation) &&
        Objects.equals(this.orderId, order.orderId) &&
        Objects.equals(this.deliveryType, order.deliveryType) &&
        Objects.equals(this.pickupLocationType, order.pickupLocationType) &&
        Objects.equals(this.tipAmount, order.tipAmount) &&
        Objects.equals(this.deliveryAmount, order.deliveryAmount) &&
        Objects.equals(this.orderItemsAmount, order.orderItemsAmount) &&
        Objects.equals(this.amount, order.amount) &&
        Objects.equals(this.processingFee, order.processingFee) &&
        Objects.equals(this.paymentAccountType, order.paymentAccountType) &&
        Objects.equals(this.paymentAccountDescription, order.paymentAccountDescription) &&
        Objects.equals(this.orderState, order.orderState) &&
        Objects.equals(this.isPreOrder, order.isPreOrder) &&
        Objects.equals(this.placedTime, order.placedTime) &&
        Objects.equals(this.requestedForTime, order.requestedForTime) &&
        Objects.equals(this.chefNote, order.chefNote) &&
        Objects.equals(this.appType, order.appType) &&
        Objects.equals(this.userRating, order.userRating) &&
        Objects.equals(this.paymentStatus, order.paymentStatus) &&
        Objects.equals(this.rejectionReason, order.rejectionReason);
  }

  @Override
  public int hashCode() {
    return Objects.hash(store, customer, voucher, fees, orderItems, deliveryLocation, customerLocation, orderId, deliveryType, pickupLocationType, tipAmount, deliveryAmount, orderItemsAmount, amount, processingFee, paymentAccountType, paymentAccountDescription, orderState, isPreOrder, placedTime, requestedForTime, chefNote, appType, userRating, paymentStatus, rejectionReason);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Order {\n");
    
    sb.append("    store: ").append(toIndentedString(store)).append("\n");
    sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    sb.append("    voucher: ").append(toIndentedString(voucher)).append("\n");
    sb.append("    fees: ").append(toIndentedString(fees)).append("\n");
    sb.append("    orderItems: ").append(toIndentedString(orderItems)).append("\n");
    sb.append("    deliveryLocation: ").append(toIndentedString(deliveryLocation)).append("\n");
    sb.append("    customerLocation: ").append(toIndentedString(customerLocation)).append("\n");
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    deliveryType: ").append(toIndentedString(deliveryType)).append("\n");
    sb.append("    pickupLocationType: ").append(toIndentedString(pickupLocationType)).append("\n");
    sb.append("    tipAmount: ").append(toIndentedString(tipAmount)).append("\n");
    sb.append("    deliveryAmount: ").append(toIndentedString(deliveryAmount)).append("\n");
    sb.append("    orderItemsAmount: ").append(toIndentedString(orderItemsAmount)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    processingFee: ").append(toIndentedString(processingFee)).append("\n");
    sb.append("    paymentAccountType: ").append(toIndentedString(paymentAccountType)).append("\n");
    sb.append("    paymentAccountDescription: ").append(toIndentedString(paymentAccountDescription)).append("\n");
    sb.append("    orderState: ").append(toIndentedString(orderState)).append("\n");
    sb.append("    isPreOrder: ").append(toIndentedString(isPreOrder)).append("\n");
    sb.append("    placedTime: ").append(toIndentedString(placedTime)).append("\n");
    sb.append("    requestedForTime: ").append(toIndentedString(requestedForTime)).append("\n");
    sb.append("    chefNote: ").append(toIndentedString(chefNote)).append("\n");
    sb.append("    appType: ").append(toIndentedString(appType)).append("\n");
    sb.append("    userRating: ").append(toIndentedString(userRating)).append("\n");
    sb.append("    paymentStatus: ").append(toIndentedString(paymentStatus)).append("\n");
    sb.append("    rejectionReason: ").append(toIndentedString(rejectionReason)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

