/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.flipdish.apiclient.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.io.Serializable;

/**
 * Order summary
 */
@ApiModel(description = "Order summary")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-02-21T10:37:59.975Z")
public class OrderSummary implements Serializable {
  private static final long serialVersionUID = 1L;

  @SerializedName("OrderId")
  private Integer orderId = null;

  /**
   * Delivery type
   */
  @JsonAdapter(DeliveryTypeEnum.Adapter.class)
  public enum DeliveryTypeEnum {
    DELIVERY("Delivery"),
    
    PICKUP("Pickup");

    private String value;

    DeliveryTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DeliveryTypeEnum fromValue(String text) {
      for (DeliveryTypeEnum b : DeliveryTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<DeliveryTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DeliveryTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DeliveryTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return DeliveryTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("DeliveryType")
  private DeliveryTypeEnum deliveryType = null;

  /**
   * Order state
   */
  @JsonAdapter(OrderStateEnum.Adapter.class)
  public enum OrderStateEnum {
    CREATED("Created"),
    
    PLACEDCANBECANCELLED("PlacedCanBeCancelled"),
    
    READYTOPROCESS("ReadyToProcess"),
    
    ACCEPTEDBYRESTAURANT("AcceptedByRestaurant"),
    
    DISPATCHED("Dispatched"),
    
    DELIVERED("Delivered"),
    
    CANCELLED("Cancelled"),
    
    MANUALREVIEW("ManualReview"),
    
    REJECTEDBYSTORE("RejectedByStore"),
    
    REJECTEDBYFLIPDISH("RejectedByFlipdish"),
    
    REJECTEDAUTOMATICALLY("RejectedAutomatically"),
    
    REJECTEDAFTERBEINGACCEPTED("RejectedAfterBeingAccepted"),
    
    ACCEPTEDANDREFUNDED("AcceptedAndRefunded");

    private String value;

    OrderStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OrderStateEnum fromValue(String text) {
      for (OrderStateEnum b : OrderStateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<OrderStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OrderStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OrderStateEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return OrderStateEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("OrderState")
  private OrderStateEnum orderState = null;

  @SerializedName("RequestedForTime")
  private OffsetDateTime requestedForTime = null;

  @SerializedName("StoreName")
  private String storeName = null;

  @SerializedName("StoreIanaTimeZone")
  private String storeIanaTimeZone = null;

  @SerializedName("CustomerName")
  private String customerName = null;

  @SerializedName("CustomerPhoneNumber")
  private String customerPhoneNumber = null;

  @SerializedName("Amount")
  private Double amount = null;

  /**
   * Status of the payment
   */
  @JsonAdapter(PaymentStatusEnum.Adapter.class)
  public enum PaymentStatusEnum {
    PAID("Paid"),
    
    UNPAID("Unpaid"),
    
    REFUNDED("Refunded"),
    
    PARTIALLYREFUNDED("PartiallyRefunded"),
    
    DISPUTED("Disputed");

    private String value;

    PaymentStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PaymentStatusEnum fromValue(String text) {
      for (PaymentStatusEnum b : PaymentStatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<PaymentStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PaymentStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PaymentStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return PaymentStatusEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("PaymentStatus")
  private PaymentStatusEnum paymentStatus = null;

  /**
   * Currency of payment
   */
  @JsonAdapter(CurrencyEnum.Adapter.class)
  public enum CurrencyEnum {
    EUR("EUR"),
    
    USD("USD"),
    
    GBP("GBP"),
    
    CAD("CAD"),
    
    AUD("AUD"),
    
    DJF("DJF"),
    
    ZAR("ZAR"),
    
    ETB("ETB"),
    
    AED("AED"),
    
    BHD("BHD"),
    
    DZD("DZD"),
    
    EGP("EGP"),
    
    IQD("IQD"),
    
    JOD("JOD"),
    
    KWD("KWD"),
    
    LBP("LBP"),
    
    LYD("LYD"),
    
    MAD("MAD"),
    
    OMR("OMR"),
    
    QAR("QAR"),
    
    SAR("SAR"),
    
    SYP("SYP"),
    
    TND("TND"),
    
    YER("YER"),
    
    CLP("CLP"),
    
    INR("INR"),
    
    AZN("AZN"),
    
    RUB("RUB"),
    
    BYN("BYN"),
    
    BGN("BGN"),
    
    NGN("NGN"),
    
    BDT("BDT"),
    
    CNY("CNY"),
    
    BAM("BAM"),
    
    CZK("CZK"),
    
    DKK("DKK"),
    
    CHF("CHF"),
    
    MVR("MVR"),
    
    BTN("BTN"),
    
    XCD("XCD"),
    
    BZD("BZD"),
    
    HKD("HKD"),
    
    IDR("IDR"),
    
    JMD("JMD"),
    
    MYR("MYR"),
    
    NZD("NZD"),
    
    PHP("PHP"),
    
    SGD("SGD"),
    
    TTD("TTD"),
    
    XDR("XDR"),
    
    ARS("ARS"),
    
    BOB("BOB"),
    
    COP("COP"),
    
    CRC("CRC"),
    
    CUP("CUP"),
    
    DOP("DOP"),
    
    GTQ("GTQ"),
    
    HNL("HNL"),
    
    MXN("MXN"),
    
    NIO("NIO"),
    
    PAB("PAB"),
    
    PEN("PEN"),
    
    PYG("PYG"),
    
    UYU("UYU"),
    
    VEF("VEF"),
    
    IRR("IRR"),
    
    XOF("XOF"),
    
    CDF("CDF"),
    
    XAF("XAF"),
    
    HTG("HTG"),
    
    ILS("ILS"),
    
    HRK("HRK"),
    
    HUF("HUF"),
    
    AMD("AMD"),
    
    ISK("ISK"),
    
    JPY("JPY"),
    
    GEL("GEL"),
    
    KZT("KZT"),
    
    KHR("KHR"),
    
    KRW("KRW"),
    
    KGS("KGS"),
    
    LAK("LAK"),
    
    MKD("MKD"),
    
    MNT("MNT"),
    
    BND("BND"),
    
    MMK("MMK"),
    
    NOK("NOK"),
    
    NPR("NPR"),
    
    PKR("PKR"),
    
    PLN("PLN"),
    
    AFN("AFN"),
    
    BRL("BRL"),
    
    MDL("MDL"),
    
    RON("RON"),
    
    RWF("RWF"),
    
    SEK("SEK"),
    
    LKR("LKR"),
    
    SOS("SOS"),
    
    ALL("ALL"),
    
    RSD("RSD"),
    
    KES("KES"),
    
    TJS("TJS"),
    
    THB("THB"),
    
    ERN("ERN"),
    
    TMT("TMT"),
    
    BWP("BWP"),
    
    TRY("TRY"),
    
    UAH("UAH"),
    
    UZS("UZS"),
    
    VND("VND"),
    
    MOP("MOP"),
    
    TWD("TWD");

    private String value;

    CurrencyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CurrencyEnum fromValue(String text) {
      for (CurrencyEnum b : CurrencyEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<CurrencyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CurrencyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CurrencyEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return CurrencyEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("Currency")
  private CurrencyEnum currency = null;

  public OrderSummary orderId(Integer orderId) {
    this.orderId = orderId;
    return this;
  }

   /**
   * Order identifier
   * @return orderId
  **/
  @ApiModelProperty(value = "Order identifier")
  public Integer getOrderId() {
    return orderId;
  }

  public void setOrderId(Integer orderId) {
    this.orderId = orderId;
  }

  public OrderSummary deliveryType(DeliveryTypeEnum deliveryType) {
    this.deliveryType = deliveryType;
    return this;
  }

   /**
   * Delivery type
   * @return deliveryType
  **/
  @ApiModelProperty(value = "Delivery type")
  public DeliveryTypeEnum getDeliveryType() {
    return deliveryType;
  }

  public void setDeliveryType(DeliveryTypeEnum deliveryType) {
    this.deliveryType = deliveryType;
  }

  public OrderSummary orderState(OrderStateEnum orderState) {
    this.orderState = orderState;
    return this;
  }

   /**
   * Order state
   * @return orderState
  **/
  @ApiModelProperty(value = "Order state")
  public OrderStateEnum getOrderState() {
    return orderState;
  }

  public void setOrderState(OrderStateEnum orderState) {
    this.orderState = orderState;
  }

  public OrderSummary requestedForTime(OffsetDateTime requestedForTime) {
    this.requestedForTime = requestedForTime;
    return this;
  }

   /**
   * Order requested for
   * @return requestedForTime
  **/
  @ApiModelProperty(value = "Order requested for")
  public OffsetDateTime getRequestedForTime() {
    return requestedForTime;
  }

  public void setRequestedForTime(OffsetDateTime requestedForTime) {
    this.requestedForTime = requestedForTime;
  }

  public OrderSummary storeName(String storeName) {
    this.storeName = storeName;
    return this;
  }

   /**
   * Name of the store
   * @return storeName
  **/
  @ApiModelProperty(value = "Name of the store")
  public String getStoreName() {
    return storeName;
  }

  public void setStoreName(String storeName) {
    this.storeName = storeName;
  }

  public OrderSummary storeIanaTimeZone(String storeIanaTimeZone) {
    this.storeIanaTimeZone = storeIanaTimeZone;
    return this;
  }

   /**
   * Store IANA time zone
   * @return storeIanaTimeZone
  **/
  @ApiModelProperty(value = "Store IANA time zone")
  public String getStoreIanaTimeZone() {
    return storeIanaTimeZone;
  }

  public void setStoreIanaTimeZone(String storeIanaTimeZone) {
    this.storeIanaTimeZone = storeIanaTimeZone;
  }

  public OrderSummary customerName(String customerName) {
    this.customerName = customerName;
    return this;
  }

   /**
   * Name of the customer
   * @return customerName
  **/
  @ApiModelProperty(value = "Name of the customer")
  public String getCustomerName() {
    return customerName;
  }

  public void setCustomerName(String customerName) {
    this.customerName = customerName;
  }

  public OrderSummary customerPhoneNumber(String customerPhoneNumber) {
    this.customerPhoneNumber = customerPhoneNumber;
    return this;
  }

   /**
   * Phone number of customer
   * @return customerPhoneNumber
  **/
  @ApiModelProperty(value = "Phone number of customer")
  public String getCustomerPhoneNumber() {
    return customerPhoneNumber;
  }

  public void setCustomerPhoneNumber(String customerPhoneNumber) {
    this.customerPhoneNumber = customerPhoneNumber;
  }

  public OrderSummary amount(Double amount) {
    this.amount = amount;
    return this;
  }

   /**
   * This is the sum of the OrderItemsAmount, DeliveryAmount, TipAmount and Voucher.Amount (which is usually negative) and OnlineOrderingFee for cash orders.  It does not include the OnlineOrderingFee in the case of card orders as this fee is charged by Flipdish directly to the customer.
   * @return amount
  **/
  @ApiModelProperty(value = "This is the sum of the OrderItemsAmount, DeliveryAmount, TipAmount and Voucher.Amount (which is usually negative) and OnlineOrderingFee for cash orders.  It does not include the OnlineOrderingFee in the case of card orders as this fee is charged by Flipdish directly to the customer.")
  public Double getAmount() {
    return amount;
  }

  public void setAmount(Double amount) {
    this.amount = amount;
  }

  public OrderSummary paymentStatus(PaymentStatusEnum paymentStatus) {
    this.paymentStatus = paymentStatus;
    return this;
  }

   /**
   * Status of the payment
   * @return paymentStatus
  **/
  @ApiModelProperty(value = "Status of the payment")
  public PaymentStatusEnum getPaymentStatus() {
    return paymentStatus;
  }

  public void setPaymentStatus(PaymentStatusEnum paymentStatus) {
    this.paymentStatus = paymentStatus;
  }

  public OrderSummary currency(CurrencyEnum currency) {
    this.currency = currency;
    return this;
  }

   /**
   * Currency of payment
   * @return currency
  **/
  @ApiModelProperty(value = "Currency of payment")
  public CurrencyEnum getCurrency() {
    return currency;
  }

  public void setCurrency(CurrencyEnum currency) {
    this.currency = currency;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderSummary orderSummary = (OrderSummary) o;
    return Objects.equals(this.orderId, orderSummary.orderId) &&
        Objects.equals(this.deliveryType, orderSummary.deliveryType) &&
        Objects.equals(this.orderState, orderSummary.orderState) &&
        Objects.equals(this.requestedForTime, orderSummary.requestedForTime) &&
        Objects.equals(this.storeName, orderSummary.storeName) &&
        Objects.equals(this.storeIanaTimeZone, orderSummary.storeIanaTimeZone) &&
        Objects.equals(this.customerName, orderSummary.customerName) &&
        Objects.equals(this.customerPhoneNumber, orderSummary.customerPhoneNumber) &&
        Objects.equals(this.amount, orderSummary.amount) &&
        Objects.equals(this.paymentStatus, orderSummary.paymentStatus) &&
        Objects.equals(this.currency, orderSummary.currency);
  }

  @Override
  public int hashCode() {
    return Objects.hash(orderId, deliveryType, orderState, requestedForTime, storeName, storeIanaTimeZone, customerName, customerPhoneNumber, amount, paymentStatus, currency);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderSummary {\n");
    
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    deliveryType: ").append(toIndentedString(deliveryType)).append("\n");
    sb.append("    orderState: ").append(toIndentedString(orderState)).append("\n");
    sb.append("    requestedForTime: ").append(toIndentedString(requestedForTime)).append("\n");
    sb.append("    storeName: ").append(toIndentedString(storeName)).append("\n");
    sb.append("    storeIanaTimeZone: ").append(toIndentedString(storeIanaTimeZone)).append("\n");
    sb.append("    customerName: ").append(toIndentedString(customerName)).append("\n");
    sb.append("    customerPhoneNumber: ").append(toIndentedString(customerPhoneNumber)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    paymentStatus: ").append(toIndentedString(paymentStatus)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

