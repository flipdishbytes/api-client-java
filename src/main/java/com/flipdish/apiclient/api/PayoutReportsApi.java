/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.flipdish.apiclient.api;

import com.flipdish.apiclient.ApiCallback;
import com.flipdish.apiclient.ApiClient;
import com.flipdish.apiclient.ApiException;
import com.flipdish.apiclient.ApiResponse;
import com.flipdish.apiclient.Configuration;
import com.flipdish.apiclient.Pair;
import com.flipdish.apiclient.ProgressRequestBody;
import com.flipdish.apiclient.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.threeten.bp.OffsetDateTime;
import com.flipdish.apiclient.model.RestApiErrorResult;
import com.flipdish.apiclient.model.RestApiForbiddenResult;
import com.flipdish.apiclient.model.RestApiPaginationResultPayoutReport3PayoutOrder;
import com.flipdish.apiclient.model.RestApiResultFileCreationResult;
import com.flipdish.apiclient.model.RestApiResultPayoutReport3Details;
import com.flipdish.apiclient.model.RestApiResultPayoutReport3Overview;
import com.flipdish.apiclient.model.RestApiUnauthorizedResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PayoutReportsApi {
    private ApiClient apiClient;

    public PayoutReportsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PayoutReportsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getPayoutReport3Details
     * @param appId  (required)
     * @param bankAccountId  (required)
     * @param payoutId  (required)
     * @param storeIds  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPayoutReport3DetailsCall(String appId, Integer bankAccountId, Integer payoutId, List<Integer> storeIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/reporting/reports/payouts3/{bankAccountId}/{payoutId}/details"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "bankAccountId" + "\\}", apiClient.escapeString(bankAccountId.toString()))
            .replaceAll("\\{" + "payoutId" + "\\}", apiClient.escapeString(payoutId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storeIds != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "storeIds", storeIds));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPayoutReport3DetailsValidateBeforeCall(String appId, Integer bankAccountId, Integer payoutId, List<Integer> storeIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getPayoutReport3Details(Async)");
        }
        
        // verify the required parameter 'bankAccountId' is set
        if (bankAccountId == null) {
            throw new ApiException("Missing the required parameter 'bankAccountId' when calling getPayoutReport3Details(Async)");
        }
        
        // verify the required parameter 'payoutId' is set
        if (payoutId == null) {
            throw new ApiException("Missing the required parameter 'payoutId' when calling getPayoutReport3Details(Async)");
        }
        

        com.squareup.okhttp.Call call = getPayoutReport3DetailsCall(appId, bankAccountId, payoutId, storeIds, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param bankAccountId  (required)
     * @param payoutId  (required)
     * @param storeIds  (optional)
     * @return RestApiResultPayoutReport3Details
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultPayoutReport3Details getPayoutReport3Details(String appId, Integer bankAccountId, Integer payoutId, List<Integer> storeIds) throws ApiException {
        ApiResponse<RestApiResultPayoutReport3Details> resp = getPayoutReport3DetailsWithHttpInfo(appId, bankAccountId, payoutId, storeIds);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param bankAccountId  (required)
     * @param payoutId  (required)
     * @param storeIds  (optional)
     * @return ApiResponse&lt;RestApiResultPayoutReport3Details&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultPayoutReport3Details> getPayoutReport3DetailsWithHttpInfo(String appId, Integer bankAccountId, Integer payoutId, List<Integer> storeIds) throws ApiException {
        com.squareup.okhttp.Call call = getPayoutReport3DetailsValidateBeforeCall(appId, bankAccountId, payoutId, storeIds, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultPayoutReport3Details>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param bankAccountId  (required)
     * @param payoutId  (required)
     * @param storeIds  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPayoutReport3DetailsAsync(String appId, Integer bankAccountId, Integer payoutId, List<Integer> storeIds, final ApiCallback<RestApiResultPayoutReport3Details> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPayoutReport3DetailsValidateBeforeCall(appId, bankAccountId, payoutId, storeIds, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultPayoutReport3Details>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPayoutReport3Orders
     * @param appId  (required)
     * @param bankAccountId  (required)
     * @param payoutId  (required)
     * @param storeIds  (optional)
     * @param page  (optional)
     * @param limit  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPayoutReport3OrdersCall(String appId, Integer bankAccountId, Integer payoutId, List<Integer> storeIds, Integer page, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/reporting/reports/payouts3/{bankAccountId}/{payoutId}/orders"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "bankAccountId" + "\\}", apiClient.escapeString(bankAccountId.toString()))
            .replaceAll("\\{" + "payoutId" + "\\}", apiClient.escapeString(payoutId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storeIds != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "storeIds", storeIds));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPayoutReport3OrdersValidateBeforeCall(String appId, Integer bankAccountId, Integer payoutId, List<Integer> storeIds, Integer page, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getPayoutReport3Orders(Async)");
        }
        
        // verify the required parameter 'bankAccountId' is set
        if (bankAccountId == null) {
            throw new ApiException("Missing the required parameter 'bankAccountId' when calling getPayoutReport3Orders(Async)");
        }
        
        // verify the required parameter 'payoutId' is set
        if (payoutId == null) {
            throw new ApiException("Missing the required parameter 'payoutId' when calling getPayoutReport3Orders(Async)");
        }
        

        com.squareup.okhttp.Call call = getPayoutReport3OrdersCall(appId, bankAccountId, payoutId, storeIds, page, limit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param bankAccountId  (required)
     * @param payoutId  (required)
     * @param storeIds  (optional)
     * @param page  (optional)
     * @param limit  (optional)
     * @return RestApiPaginationResultPayoutReport3PayoutOrder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiPaginationResultPayoutReport3PayoutOrder getPayoutReport3Orders(String appId, Integer bankAccountId, Integer payoutId, List<Integer> storeIds, Integer page, Integer limit) throws ApiException {
        ApiResponse<RestApiPaginationResultPayoutReport3PayoutOrder> resp = getPayoutReport3OrdersWithHttpInfo(appId, bankAccountId, payoutId, storeIds, page, limit);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param bankAccountId  (required)
     * @param payoutId  (required)
     * @param storeIds  (optional)
     * @param page  (optional)
     * @param limit  (optional)
     * @return ApiResponse&lt;RestApiPaginationResultPayoutReport3PayoutOrder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiPaginationResultPayoutReport3PayoutOrder> getPayoutReport3OrdersWithHttpInfo(String appId, Integer bankAccountId, Integer payoutId, List<Integer> storeIds, Integer page, Integer limit) throws ApiException {
        com.squareup.okhttp.Call call = getPayoutReport3OrdersValidateBeforeCall(appId, bankAccountId, payoutId, storeIds, page, limit, null, null);
        Type localVarReturnType = new TypeToken<RestApiPaginationResultPayoutReport3PayoutOrder>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param bankAccountId  (required)
     * @param payoutId  (required)
     * @param storeIds  (optional)
     * @param page  (optional)
     * @param limit  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPayoutReport3OrdersAsync(String appId, Integer bankAccountId, Integer payoutId, List<Integer> storeIds, Integer page, Integer limit, final ApiCallback<RestApiPaginationResultPayoutReport3PayoutOrder> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPayoutReport3OrdersValidateBeforeCall(appId, bankAccountId, payoutId, storeIds, page, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiPaginationResultPayoutReport3PayoutOrder>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPayoutReport3Overview
     * @param appId  (required)
     * @param bankAccountId  (required)
     * @param payoutId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPayoutReport3OverviewCall(String appId, Integer bankAccountId, Integer payoutId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/reporting/reports/payouts3/{bankAccountId}/{payoutId}/overview"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "bankAccountId" + "\\}", apiClient.escapeString(bankAccountId.toString()))
            .replaceAll("\\{" + "payoutId" + "\\}", apiClient.escapeString(payoutId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPayoutReport3OverviewValidateBeforeCall(String appId, Integer bankAccountId, Integer payoutId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getPayoutReport3Overview(Async)");
        }
        
        // verify the required parameter 'bankAccountId' is set
        if (bankAccountId == null) {
            throw new ApiException("Missing the required parameter 'bankAccountId' when calling getPayoutReport3Overview(Async)");
        }
        
        // verify the required parameter 'payoutId' is set
        if (payoutId == null) {
            throw new ApiException("Missing the required parameter 'payoutId' when calling getPayoutReport3Overview(Async)");
        }
        

        com.squareup.okhttp.Call call = getPayoutReport3OverviewCall(appId, bankAccountId, payoutId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param bankAccountId  (required)
     * @param payoutId  (required)
     * @return RestApiResultPayoutReport3Overview
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultPayoutReport3Overview getPayoutReport3Overview(String appId, Integer bankAccountId, Integer payoutId) throws ApiException {
        ApiResponse<RestApiResultPayoutReport3Overview> resp = getPayoutReport3OverviewWithHttpInfo(appId, bankAccountId, payoutId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param bankAccountId  (required)
     * @param payoutId  (required)
     * @return ApiResponse&lt;RestApiResultPayoutReport3Overview&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultPayoutReport3Overview> getPayoutReport3OverviewWithHttpInfo(String appId, Integer bankAccountId, Integer payoutId) throws ApiException {
        com.squareup.okhttp.Call call = getPayoutReport3OverviewValidateBeforeCall(appId, bankAccountId, payoutId, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultPayoutReport3Overview>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param bankAccountId  (required)
     * @param payoutId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPayoutReport3OverviewAsync(String appId, Integer bankAccountId, Integer payoutId, final ApiCallback<RestApiResultPayoutReport3Overview> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPayoutReport3OverviewValidateBeforeCall(appId, bankAccountId, payoutId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultPayoutReport3Overview>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for payoutReport3ExportPayoutChargebacks
     * @param appId  (required)
     * @param bankAccountId  (required)
     * @param payoutId  (required)
     * @param stores  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call payoutReport3ExportPayoutChargebacksCall(String appId, Integer bankAccountId, Integer payoutId, List<Integer> stores, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/reporting/reports/payouts3/{bankAccountId}/{payoutId}/export/chargebacks"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "bankAccountId" + "\\}", apiClient.escapeString(bankAccountId.toString()))
            .replaceAll("\\{" + "payoutId" + "\\}", apiClient.escapeString(payoutId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (stores != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "stores", stores));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call payoutReport3ExportPayoutChargebacksValidateBeforeCall(String appId, Integer bankAccountId, Integer payoutId, List<Integer> stores, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling payoutReport3ExportPayoutChargebacks(Async)");
        }
        
        // verify the required parameter 'bankAccountId' is set
        if (bankAccountId == null) {
            throw new ApiException("Missing the required parameter 'bankAccountId' when calling payoutReport3ExportPayoutChargebacks(Async)");
        }
        
        // verify the required parameter 'payoutId' is set
        if (payoutId == null) {
            throw new ApiException("Missing the required parameter 'payoutId' when calling payoutReport3ExportPayoutChargebacks(Async)");
        }
        

        com.squareup.okhttp.Call call = payoutReport3ExportPayoutChargebacksCall(appId, bankAccountId, payoutId, stores, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param bankAccountId  (required)
     * @param payoutId  (required)
     * @param stores  (optional)
     * @return RestApiResultFileCreationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultFileCreationResult payoutReport3ExportPayoutChargebacks(String appId, Integer bankAccountId, Integer payoutId, List<Integer> stores) throws ApiException {
        ApiResponse<RestApiResultFileCreationResult> resp = payoutReport3ExportPayoutChargebacksWithHttpInfo(appId, bankAccountId, payoutId, stores);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param bankAccountId  (required)
     * @param payoutId  (required)
     * @param stores  (optional)
     * @return ApiResponse&lt;RestApiResultFileCreationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultFileCreationResult> payoutReport3ExportPayoutChargebacksWithHttpInfo(String appId, Integer bankAccountId, Integer payoutId, List<Integer> stores) throws ApiException {
        com.squareup.okhttp.Call call = payoutReport3ExportPayoutChargebacksValidateBeforeCall(appId, bankAccountId, payoutId, stores, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultFileCreationResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param bankAccountId  (required)
     * @param payoutId  (required)
     * @param stores  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call payoutReport3ExportPayoutChargebacksAsync(String appId, Integer bankAccountId, Integer payoutId, List<Integer> stores, final ApiCallback<RestApiResultFileCreationResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = payoutReport3ExportPayoutChargebacksValidateBeforeCall(appId, bankAccountId, payoutId, stores, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultFileCreationResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for payoutReport3ExportPayoutOnlineOrders
     * @param appId  (required)
     * @param bankAccountId  (required)
     * @param payoutId  (required)
     * @param startDate  (optional)
     * @param endDate  (optional)
     * @param payoutRequestIdsBankAccountIds List of bank account ids to search for (optional)
     * @param payoutRequestIdsStates List of {Flipdish.PublicModels.V1.Payouts.PayoutStatus} so search for (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call payoutReport3ExportPayoutOnlineOrdersCall(String appId, String bankAccountId, String payoutId, OffsetDateTime startDate, OffsetDateTime endDate, List<Integer> payoutRequestIdsBankAccountIds, List<String> payoutRequestIdsStates, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/reporting/reports/payouts3/{bankAccountId}/{payoutId}/export/onlineorders"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "bankAccountId" + "\\}", apiClient.escapeString(bankAccountId.toString()))
            .replaceAll("\\{" + "payoutId" + "\\}", apiClient.escapeString(payoutId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startDate", startDate));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("endDate", endDate));
        if (payoutRequestIdsBankAccountIds != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "payoutRequestIds.bankAccountIds", payoutRequestIdsBankAccountIds));
        if (payoutRequestIdsStates != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "payoutRequestIds.states", payoutRequestIdsStates));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call payoutReport3ExportPayoutOnlineOrdersValidateBeforeCall(String appId, String bankAccountId, String payoutId, OffsetDateTime startDate, OffsetDateTime endDate, List<Integer> payoutRequestIdsBankAccountIds, List<String> payoutRequestIdsStates, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling payoutReport3ExportPayoutOnlineOrders(Async)");
        }
        
        // verify the required parameter 'bankAccountId' is set
        if (bankAccountId == null) {
            throw new ApiException("Missing the required parameter 'bankAccountId' when calling payoutReport3ExportPayoutOnlineOrders(Async)");
        }
        
        // verify the required parameter 'payoutId' is set
        if (payoutId == null) {
            throw new ApiException("Missing the required parameter 'payoutId' when calling payoutReport3ExportPayoutOnlineOrders(Async)");
        }
        

        com.squareup.okhttp.Call call = payoutReport3ExportPayoutOnlineOrdersCall(appId, bankAccountId, payoutId, startDate, endDate, payoutRequestIdsBankAccountIds, payoutRequestIdsStates, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param bankAccountId  (required)
     * @param payoutId  (required)
     * @param startDate  (optional)
     * @param endDate  (optional)
     * @param payoutRequestIdsBankAccountIds List of bank account ids to search for (optional)
     * @param payoutRequestIdsStates List of {Flipdish.PublicModels.V1.Payouts.PayoutStatus} so search for (optional)
     * @return RestApiResultFileCreationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public RestApiResultFileCreationResult payoutReport3ExportPayoutOnlineOrders(String appId, String bankAccountId, String payoutId, OffsetDateTime startDate, OffsetDateTime endDate, List<Integer> payoutRequestIdsBankAccountIds, List<String> payoutRequestIdsStates) throws ApiException {
        ApiResponse<RestApiResultFileCreationResult> resp = payoutReport3ExportPayoutOnlineOrdersWithHttpInfo(appId, bankAccountId, payoutId, startDate, endDate, payoutRequestIdsBankAccountIds, payoutRequestIdsStates);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param bankAccountId  (required)
     * @param payoutId  (required)
     * @param startDate  (optional)
     * @param endDate  (optional)
     * @param payoutRequestIdsBankAccountIds List of bank account ids to search for (optional)
     * @param payoutRequestIdsStates List of {Flipdish.PublicModels.V1.Payouts.PayoutStatus} so search for (optional)
     * @return ApiResponse&lt;RestApiResultFileCreationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<RestApiResultFileCreationResult> payoutReport3ExportPayoutOnlineOrdersWithHttpInfo(String appId, String bankAccountId, String payoutId, OffsetDateTime startDate, OffsetDateTime endDate, List<Integer> payoutRequestIdsBankAccountIds, List<String> payoutRequestIdsStates) throws ApiException {
        com.squareup.okhttp.Call call = payoutReport3ExportPayoutOnlineOrdersValidateBeforeCall(appId, bankAccountId, payoutId, startDate, endDate, payoutRequestIdsBankAccountIds, payoutRequestIdsStates, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultFileCreationResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param bankAccountId  (required)
     * @param payoutId  (required)
     * @param startDate  (optional)
     * @param endDate  (optional)
     * @param payoutRequestIdsBankAccountIds List of bank account ids to search for (optional)
     * @param payoutRequestIdsStates List of {Flipdish.PublicModels.V1.Payouts.PayoutStatus} so search for (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call payoutReport3ExportPayoutOnlineOrdersAsync(String appId, String bankAccountId, String payoutId, OffsetDateTime startDate, OffsetDateTime endDate, List<Integer> payoutRequestIdsBankAccountIds, List<String> payoutRequestIdsStates, final ApiCallback<RestApiResultFileCreationResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = payoutReport3ExportPayoutOnlineOrdersValidateBeforeCall(appId, bankAccountId, payoutId, startDate, endDate, payoutRequestIdsBankAccountIds, payoutRequestIdsStates, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultFileCreationResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for payoutReport3ExportPayoutOrders
     * @param appId  (required)
     * @param bankAccountId  (required)
     * @param payoutId  (required)
     * @param stores  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call payoutReport3ExportPayoutOrdersCall(String appId, Integer bankAccountId, Integer payoutId, List<Integer> stores, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/reporting/reports/payouts3/{bankAccountId}/{payoutId}/export/orders"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "bankAccountId" + "\\}", apiClient.escapeString(bankAccountId.toString()))
            .replaceAll("\\{" + "payoutId" + "\\}", apiClient.escapeString(payoutId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (stores != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "stores", stores));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call payoutReport3ExportPayoutOrdersValidateBeforeCall(String appId, Integer bankAccountId, Integer payoutId, List<Integer> stores, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling payoutReport3ExportPayoutOrders(Async)");
        }
        
        // verify the required parameter 'bankAccountId' is set
        if (bankAccountId == null) {
            throw new ApiException("Missing the required parameter 'bankAccountId' when calling payoutReport3ExportPayoutOrders(Async)");
        }
        
        // verify the required parameter 'payoutId' is set
        if (payoutId == null) {
            throw new ApiException("Missing the required parameter 'payoutId' when calling payoutReport3ExportPayoutOrders(Async)");
        }
        

        com.squareup.okhttp.Call call = payoutReport3ExportPayoutOrdersCall(appId, bankAccountId, payoutId, stores, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param bankAccountId  (required)
     * @param payoutId  (required)
     * @param stores  (optional)
     * @return RestApiResultFileCreationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultFileCreationResult payoutReport3ExportPayoutOrders(String appId, Integer bankAccountId, Integer payoutId, List<Integer> stores) throws ApiException {
        ApiResponse<RestApiResultFileCreationResult> resp = payoutReport3ExportPayoutOrdersWithHttpInfo(appId, bankAccountId, payoutId, stores);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param bankAccountId  (required)
     * @param payoutId  (required)
     * @param stores  (optional)
     * @return ApiResponse&lt;RestApiResultFileCreationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultFileCreationResult> payoutReport3ExportPayoutOrdersWithHttpInfo(String appId, Integer bankAccountId, Integer payoutId, List<Integer> stores) throws ApiException {
        com.squareup.okhttp.Call call = payoutReport3ExportPayoutOrdersValidateBeforeCall(appId, bankAccountId, payoutId, stores, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultFileCreationResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param bankAccountId  (required)
     * @param payoutId  (required)
     * @param stores  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call payoutReport3ExportPayoutOrdersAsync(String appId, Integer bankAccountId, Integer payoutId, List<Integer> stores, final ApiCallback<RestApiResultFileCreationResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = payoutReport3ExportPayoutOrdersValidateBeforeCall(appId, bankAccountId, payoutId, stores, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultFileCreationResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for payoutReport3ExportPayoutPosSales
     * @param appId  (required)
     * @param bankAccountId  (required)
     * @param payoutId  (required)
     * @param stores  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call payoutReport3ExportPayoutPosSalesCall(String appId, Integer bankAccountId, Integer payoutId, List<Integer> stores, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/reporting/reports/payouts3/{bankAccountId}/{payoutId}/export/possales"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "bankAccountId" + "\\}", apiClient.escapeString(bankAccountId.toString()))
            .replaceAll("\\{" + "payoutId" + "\\}", apiClient.escapeString(payoutId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (stores != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "stores", stores));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call payoutReport3ExportPayoutPosSalesValidateBeforeCall(String appId, Integer bankAccountId, Integer payoutId, List<Integer> stores, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling payoutReport3ExportPayoutPosSales(Async)");
        }
        
        // verify the required parameter 'bankAccountId' is set
        if (bankAccountId == null) {
            throw new ApiException("Missing the required parameter 'bankAccountId' when calling payoutReport3ExportPayoutPosSales(Async)");
        }
        
        // verify the required parameter 'payoutId' is set
        if (payoutId == null) {
            throw new ApiException("Missing the required parameter 'payoutId' when calling payoutReport3ExportPayoutPosSales(Async)");
        }
        

        com.squareup.okhttp.Call call = payoutReport3ExportPayoutPosSalesCall(appId, bankAccountId, payoutId, stores, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param bankAccountId  (required)
     * @param payoutId  (required)
     * @param stores  (optional)
     * @return RestApiResultFileCreationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultFileCreationResult payoutReport3ExportPayoutPosSales(String appId, Integer bankAccountId, Integer payoutId, List<Integer> stores) throws ApiException {
        ApiResponse<RestApiResultFileCreationResult> resp = payoutReport3ExportPayoutPosSalesWithHttpInfo(appId, bankAccountId, payoutId, stores);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param bankAccountId  (required)
     * @param payoutId  (required)
     * @param stores  (optional)
     * @return ApiResponse&lt;RestApiResultFileCreationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultFileCreationResult> payoutReport3ExportPayoutPosSalesWithHttpInfo(String appId, Integer bankAccountId, Integer payoutId, List<Integer> stores) throws ApiException {
        com.squareup.okhttp.Call call = payoutReport3ExportPayoutPosSalesValidateBeforeCall(appId, bankAccountId, payoutId, stores, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultFileCreationResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param bankAccountId  (required)
     * @param payoutId  (required)
     * @param stores  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call payoutReport3ExportPayoutPosSalesAsync(String appId, Integer bankAccountId, Integer payoutId, List<Integer> stores, final ApiCallback<RestApiResultFileCreationResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = payoutReport3ExportPayoutPosSalesValidateBeforeCall(appId, bankAccountId, payoutId, stores, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultFileCreationResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for payoutReport3ExportPayoutRefundedRejected
     * @param appId  (required)
     * @param bankAccountId  (required)
     * @param payoutId  (required)
     * @param stores  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call payoutReport3ExportPayoutRefundedRejectedCall(String appId, Integer bankAccountId, Integer payoutId, List<Integer> stores, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/reporting/reports/payouts3/{bankAccountId}/{payoutId}/export/refundedrejected"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "bankAccountId" + "\\}", apiClient.escapeString(bankAccountId.toString()))
            .replaceAll("\\{" + "payoutId" + "\\}", apiClient.escapeString(payoutId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (stores != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "stores", stores));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call payoutReport3ExportPayoutRefundedRejectedValidateBeforeCall(String appId, Integer bankAccountId, Integer payoutId, List<Integer> stores, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling payoutReport3ExportPayoutRefundedRejected(Async)");
        }
        
        // verify the required parameter 'bankAccountId' is set
        if (bankAccountId == null) {
            throw new ApiException("Missing the required parameter 'bankAccountId' when calling payoutReport3ExportPayoutRefundedRejected(Async)");
        }
        
        // verify the required parameter 'payoutId' is set
        if (payoutId == null) {
            throw new ApiException("Missing the required parameter 'payoutId' when calling payoutReport3ExportPayoutRefundedRejected(Async)");
        }
        

        com.squareup.okhttp.Call call = payoutReport3ExportPayoutRefundedRejectedCall(appId, bankAccountId, payoutId, stores, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param bankAccountId  (required)
     * @param payoutId  (required)
     * @param stores  (optional)
     * @return RestApiResultFileCreationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultFileCreationResult payoutReport3ExportPayoutRefundedRejected(String appId, Integer bankAccountId, Integer payoutId, List<Integer> stores) throws ApiException {
        ApiResponse<RestApiResultFileCreationResult> resp = payoutReport3ExportPayoutRefundedRejectedWithHttpInfo(appId, bankAccountId, payoutId, stores);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param bankAccountId  (required)
     * @param payoutId  (required)
     * @param stores  (optional)
     * @return ApiResponse&lt;RestApiResultFileCreationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultFileCreationResult> payoutReport3ExportPayoutRefundedRejectedWithHttpInfo(String appId, Integer bankAccountId, Integer payoutId, List<Integer> stores) throws ApiException {
        com.squareup.okhttp.Call call = payoutReport3ExportPayoutRefundedRejectedValidateBeforeCall(appId, bankAccountId, payoutId, stores, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultFileCreationResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param bankAccountId  (required)
     * @param payoutId  (required)
     * @param stores  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call payoutReport3ExportPayoutRefundedRejectedAsync(String appId, Integer bankAccountId, Integer payoutId, List<Integer> stores, final ApiCallback<RestApiResultFileCreationResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = payoutReport3ExportPayoutRefundedRejectedValidateBeforeCall(appId, bankAccountId, payoutId, stores, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultFileCreationResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
