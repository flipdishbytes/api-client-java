/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.flipdish.apiclient.api;

import com.flipdish.apiclient.ApiCallback;
import com.flipdish.apiclient.ApiClient;
import com.flipdish.apiclient.ApiException;
import com.flipdish.apiclient.ApiResponse;
import com.flipdish.apiclient.Configuration;
import com.flipdish.apiclient.Pair;
import com.flipdish.apiclient.ProgressRequestBody;
import com.flipdish.apiclient.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.flipdish.apiclient.model.AddAppStoreSubscriptionRequest;
import com.flipdish.apiclient.model.RestApiErrorResult;
import com.flipdish.apiclient.model.RestApiForbiddenResult;
import com.flipdish.apiclient.model.RestApiResultAppStoreSubscriptionJobResponse;
import com.flipdish.apiclient.model.RestApiStringResult;
import com.flipdish.apiclient.model.RestApiUnauthorizedResult;
import com.flipdish.apiclient.model.UpdateAppStoreSubscriptionRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AppStoreSubscriptionsApi {
    private ApiClient apiClient;

    public AppStoreSubscriptionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AppStoreSubscriptionsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createAppStoreSubscription
     * @param appId  (required)
     * @param appStoreAppId  (required)
     * @param addAppStoreSubscriptionRequest  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createAppStoreSubscriptionCall(String appId, String appStoreAppId, AddAppStoreSubscriptionRequest addAppStoreSubscriptionRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = addAppStoreSubscriptionRequest;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/appstore/apps/{appStoreAppId}/subscriptions"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "appStoreAppId" + "\\}", apiClient.escapeString(appStoreAppId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createAppStoreSubscriptionValidateBeforeCall(String appId, String appStoreAppId, AddAppStoreSubscriptionRequest addAppStoreSubscriptionRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling createAppStoreSubscription(Async)");
        }
        
        // verify the required parameter 'appStoreAppId' is set
        if (appStoreAppId == null) {
            throw new ApiException("Missing the required parameter 'appStoreAppId' when calling createAppStoreSubscription(Async)");
        }
        
        // verify the required parameter 'addAppStoreSubscriptionRequest' is set
        if (addAppStoreSubscriptionRequest == null) {
            throw new ApiException("Missing the required parameter 'addAppStoreSubscriptionRequest' when calling createAppStoreSubscription(Async)");
        }
        

        com.squareup.okhttp.Call call = createAppStoreSubscriptionCall(appId, appStoreAppId, addAppStoreSubscriptionRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param appStoreAppId  (required)
     * @param addAppStoreSubscriptionRequest  (required)
     * @return RestApiResultAppStoreSubscriptionJobResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultAppStoreSubscriptionJobResponse createAppStoreSubscription(String appId, String appStoreAppId, AddAppStoreSubscriptionRequest addAppStoreSubscriptionRequest) throws ApiException {
        ApiResponse<RestApiResultAppStoreSubscriptionJobResponse> resp = createAppStoreSubscriptionWithHttpInfo(appId, appStoreAppId, addAppStoreSubscriptionRequest);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param appStoreAppId  (required)
     * @param addAppStoreSubscriptionRequest  (required)
     * @return ApiResponse&lt;RestApiResultAppStoreSubscriptionJobResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultAppStoreSubscriptionJobResponse> createAppStoreSubscriptionWithHttpInfo(String appId, String appStoreAppId, AddAppStoreSubscriptionRequest addAppStoreSubscriptionRequest) throws ApiException {
        com.squareup.okhttp.Call call = createAppStoreSubscriptionValidateBeforeCall(appId, appStoreAppId, addAppStoreSubscriptionRequest, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultAppStoreSubscriptionJobResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param appStoreAppId  (required)
     * @param addAppStoreSubscriptionRequest  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createAppStoreSubscriptionAsync(String appId, String appStoreAppId, AddAppStoreSubscriptionRequest addAppStoreSubscriptionRequest, final ApiCallback<RestApiResultAppStoreSubscriptionJobResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createAppStoreSubscriptionValidateBeforeCall(appId, appStoreAppId, addAppStoreSubscriptionRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultAppStoreSubscriptionJobResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteAppSubscription
     * @param appId  (required)
     * @param appStoreAppId  (required)
     * @param subscriptionId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAppSubscriptionCall(String appId, String appStoreAppId, String subscriptionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/appstore/apps/{appStoreAppId}/subscriptions/{subscriptionId}"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "appStoreAppId" + "\\}", apiClient.escapeString(appStoreAppId.toString()))
            .replaceAll("\\{" + "subscriptionId" + "\\}", apiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAppSubscriptionValidateBeforeCall(String appId, String appStoreAppId, String subscriptionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling deleteAppSubscription(Async)");
        }
        
        // verify the required parameter 'appStoreAppId' is set
        if (appStoreAppId == null) {
            throw new ApiException("Missing the required parameter 'appStoreAppId' when calling deleteAppSubscription(Async)");
        }
        
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling deleteAppSubscription(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteAppSubscriptionCall(appId, appStoreAppId, subscriptionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param appStoreAppId  (required)
     * @param subscriptionId  (required)
     * @return RestApiStringResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiStringResult deleteAppSubscription(String appId, String appStoreAppId, String subscriptionId) throws ApiException {
        ApiResponse<RestApiStringResult> resp = deleteAppSubscriptionWithHttpInfo(appId, appStoreAppId, subscriptionId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param appStoreAppId  (required)
     * @param subscriptionId  (required)
     * @return ApiResponse&lt;RestApiStringResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiStringResult> deleteAppSubscriptionWithHttpInfo(String appId, String appStoreAppId, String subscriptionId) throws ApiException {
        com.squareup.okhttp.Call call = deleteAppSubscriptionValidateBeforeCall(appId, appStoreAppId, subscriptionId, null, null);
        Type localVarReturnType = new TypeToken<RestApiStringResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param appStoreAppId  (required)
     * @param subscriptionId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAppSubscriptionAsync(String appId, String appStoreAppId, String subscriptionId, final ApiCallback<RestApiStringResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAppSubscriptionValidateBeforeCall(appId, appStoreAppId, subscriptionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiStringResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateAppStoreSubscription
     * @param appId  (required)
     * @param appStoreAppId  (required)
     * @param subscriptionId  (required)
     * @param updateAppStoreSubscriptionRequest  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateAppStoreSubscriptionCall(String appId, String appStoreAppId, String subscriptionId, UpdateAppStoreSubscriptionRequest updateAppStoreSubscriptionRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = updateAppStoreSubscriptionRequest;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/appstore/apps/{appStoreAppId}/subscriptions/{subscriptionId}"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "appStoreAppId" + "\\}", apiClient.escapeString(appStoreAppId.toString()))
            .replaceAll("\\{" + "subscriptionId" + "\\}", apiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateAppStoreSubscriptionValidateBeforeCall(String appId, String appStoreAppId, String subscriptionId, UpdateAppStoreSubscriptionRequest updateAppStoreSubscriptionRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling updateAppStoreSubscription(Async)");
        }
        
        // verify the required parameter 'appStoreAppId' is set
        if (appStoreAppId == null) {
            throw new ApiException("Missing the required parameter 'appStoreAppId' when calling updateAppStoreSubscription(Async)");
        }
        
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling updateAppStoreSubscription(Async)");
        }
        
        // verify the required parameter 'updateAppStoreSubscriptionRequest' is set
        if (updateAppStoreSubscriptionRequest == null) {
            throw new ApiException("Missing the required parameter 'updateAppStoreSubscriptionRequest' when calling updateAppStoreSubscription(Async)");
        }
        

        com.squareup.okhttp.Call call = updateAppStoreSubscriptionCall(appId, appStoreAppId, subscriptionId, updateAppStoreSubscriptionRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param appStoreAppId  (required)
     * @param subscriptionId  (required)
     * @param updateAppStoreSubscriptionRequest  (required)
     * @return RestApiResultAppStoreSubscriptionJobResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultAppStoreSubscriptionJobResponse updateAppStoreSubscription(String appId, String appStoreAppId, String subscriptionId, UpdateAppStoreSubscriptionRequest updateAppStoreSubscriptionRequest) throws ApiException {
        ApiResponse<RestApiResultAppStoreSubscriptionJobResponse> resp = updateAppStoreSubscriptionWithHttpInfo(appId, appStoreAppId, subscriptionId, updateAppStoreSubscriptionRequest);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param appStoreAppId  (required)
     * @param subscriptionId  (required)
     * @param updateAppStoreSubscriptionRequest  (required)
     * @return ApiResponse&lt;RestApiResultAppStoreSubscriptionJobResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultAppStoreSubscriptionJobResponse> updateAppStoreSubscriptionWithHttpInfo(String appId, String appStoreAppId, String subscriptionId, UpdateAppStoreSubscriptionRequest updateAppStoreSubscriptionRequest) throws ApiException {
        com.squareup.okhttp.Call call = updateAppStoreSubscriptionValidateBeforeCall(appId, appStoreAppId, subscriptionId, updateAppStoreSubscriptionRequest, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultAppStoreSubscriptionJobResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param appStoreAppId  (required)
     * @param subscriptionId  (required)
     * @param updateAppStoreSubscriptionRequest  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateAppStoreSubscriptionAsync(String appId, String appStoreAppId, String subscriptionId, UpdateAppStoreSubscriptionRequest updateAppStoreSubscriptionRequest, final ApiCallback<RestApiResultAppStoreSubscriptionJobResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateAppStoreSubscriptionValidateBeforeCall(appId, appStoreAppId, subscriptionId, updateAppStoreSubscriptionRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultAppStoreSubscriptionJobResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
