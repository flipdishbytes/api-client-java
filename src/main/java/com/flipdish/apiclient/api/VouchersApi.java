/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.flipdish.apiclient.api;

import com.flipdish.apiclient.ApiCallback;
import com.flipdish.apiclient.ApiClient;
import com.flipdish.apiclient.ApiException;
import com.flipdish.apiclient.ApiResponse;
import com.flipdish.apiclient.Configuration;
import com.flipdish.apiclient.Pair;
import com.flipdish.apiclient.ProgressRequestBody;
import com.flipdish.apiclient.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.flipdish.apiclient.model.CreateVoucher;
import com.flipdish.apiclient.model.RestApiArrayResultVoucherDataPoint;
import com.flipdish.apiclient.model.RestApiErrorResult;
import com.flipdish.apiclient.model.RestApiForbiddenResult;
import com.flipdish.apiclient.model.RestApiPaginationResultVoucherSummary;
import com.flipdish.apiclient.model.RestApiResultVoucherWithStats;
import com.flipdish.apiclient.model.RestApiUnauthorizedResult;
import com.flipdish.apiclient.model.VoucherBase;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VouchersApi {
    private ApiClient apiClient;

    public VouchersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VouchersApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createVoucher
     * @param appId  (required)
     * @param voucher  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createVoucherCall(String appId, CreateVoucher voucher, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = voucher;

        // create path and map variables
        String localVarPath = "/api/v1.0/vouchers/{appId}"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createVoucherValidateBeforeCall(String appId, CreateVoucher voucher, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling createVoucher(Async)");
        }
        
        // verify the required parameter 'voucher' is set
        if (voucher == null) {
            throw new ApiException("Missing the required parameter 'voucher' when calling createVoucher(Async)");
        }
        

        com.squareup.okhttp.Call call = createVoucherCall(appId, voucher, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param voucher  (required)
     * @return RestApiResultVoucherWithStats
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultVoucherWithStats createVoucher(String appId, CreateVoucher voucher) throws ApiException {
        ApiResponse<RestApiResultVoucherWithStats> resp = createVoucherWithHttpInfo(appId, voucher);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param voucher  (required)
     * @return ApiResponse&lt;RestApiResultVoucherWithStats&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultVoucherWithStats> createVoucherWithHttpInfo(String appId, CreateVoucher voucher) throws ApiException {
        com.squareup.okhttp.Call call = createVoucherValidateBeforeCall(appId, voucher, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultVoucherWithStats>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param voucher  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createVoucherAsync(String appId, CreateVoucher voucher, final ApiCallback<RestApiResultVoucherWithStats> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createVoucherValidateBeforeCall(appId, voucher, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultVoucherWithStats>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getVoucherById
     * @param voucherId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getVoucherByIdCall(Integer voucherId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/vouchers/{voucherId}"
            .replaceAll("\\{" + "voucherId" + "\\}", apiClient.escapeString(voucherId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getVoucherByIdValidateBeforeCall(Integer voucherId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'voucherId' is set
        if (voucherId == null) {
            throw new ApiException("Missing the required parameter 'voucherId' when calling getVoucherById(Async)");
        }
        

        com.squareup.okhttp.Call call = getVoucherByIdCall(voucherId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param voucherId  (required)
     * @return RestApiResultVoucherWithStats
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultVoucherWithStats getVoucherById(Integer voucherId) throws ApiException {
        ApiResponse<RestApiResultVoucherWithStats> resp = getVoucherByIdWithHttpInfo(voucherId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param voucherId  (required)
     * @return ApiResponse&lt;RestApiResultVoucherWithStats&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultVoucherWithStats> getVoucherByIdWithHttpInfo(Integer voucherId) throws ApiException {
        com.squareup.okhttp.Call call = getVoucherByIdValidateBeforeCall(voucherId, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultVoucherWithStats>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param voucherId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getVoucherByIdAsync(Integer voucherId, final ApiCallback<RestApiResultVoucherWithStats> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getVoucherByIdValidateBeforeCall(voucherId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultVoucherWithStats>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getVoucherStatsById
     * @param voucherId  (required)
     * @param aggregateDataBy  (required)
     * @param dataPointLimit  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getVoucherStatsByIdCall(Integer voucherId, String aggregateDataBy, Integer dataPointLimit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/vouchers/stats/{voucherId}"
            .replaceAll("\\{" + "voucherId" + "\\}", apiClient.escapeString(voucherId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (aggregateDataBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("aggregateDataBy", aggregateDataBy));
        if (dataPointLimit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dataPointLimit", dataPointLimit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getVoucherStatsByIdValidateBeforeCall(Integer voucherId, String aggregateDataBy, Integer dataPointLimit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'voucherId' is set
        if (voucherId == null) {
            throw new ApiException("Missing the required parameter 'voucherId' when calling getVoucherStatsById(Async)");
        }
        
        // verify the required parameter 'aggregateDataBy' is set
        if (aggregateDataBy == null) {
            throw new ApiException("Missing the required parameter 'aggregateDataBy' when calling getVoucherStatsById(Async)");
        }
        

        com.squareup.okhttp.Call call = getVoucherStatsByIdCall(voucherId, aggregateDataBy, dataPointLimit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param voucherId  (required)
     * @param aggregateDataBy  (required)
     * @param dataPointLimit  (optional)
     * @return RestApiArrayResultVoucherDataPoint
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiArrayResultVoucherDataPoint getVoucherStatsById(Integer voucherId, String aggregateDataBy, Integer dataPointLimit) throws ApiException {
        ApiResponse<RestApiArrayResultVoucherDataPoint> resp = getVoucherStatsByIdWithHttpInfo(voucherId, aggregateDataBy, dataPointLimit);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param voucherId  (required)
     * @param aggregateDataBy  (required)
     * @param dataPointLimit  (optional)
     * @return ApiResponse&lt;RestApiArrayResultVoucherDataPoint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiArrayResultVoucherDataPoint> getVoucherStatsByIdWithHttpInfo(Integer voucherId, String aggregateDataBy, Integer dataPointLimit) throws ApiException {
        com.squareup.okhttp.Call call = getVoucherStatsByIdValidateBeforeCall(voucherId, aggregateDataBy, dataPointLimit, null, null);
        Type localVarReturnType = new TypeToken<RestApiArrayResultVoucherDataPoint>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param voucherId  (required)
     * @param aggregateDataBy  (required)
     * @param dataPointLimit  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getVoucherStatsByIdAsync(Integer voucherId, String aggregateDataBy, Integer dataPointLimit, final ApiCallback<RestApiArrayResultVoucherDataPoint> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getVoucherStatsByIdValidateBeforeCall(voucherId, aggregateDataBy, dataPointLimit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiArrayResultVoucherDataPoint>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getVouchers
     * @param appId  (required)
     * @param pageIndex  (optional)
     * @param pageSize  (optional)
     * @param searchCodes  (optional)
     * @param statusSearch  (optional)
     * @param typeSearch  (optional)
     * @param subTypeSearch  (optional)
     * @param storeIds  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getVouchersCall(String appId, Integer pageIndex, Integer pageSize, List<String> searchCodes, List<String> statusSearch, List<String> typeSearch, List<String> subTypeSearch, List<Integer> storeIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/vouchers/summaries"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageIndex", pageIndex));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (searchCodes != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "searchCodes", searchCodes));
        if (statusSearch != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "statusSearch", statusSearch));
        if (typeSearch != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "typeSearch", typeSearch));
        if (subTypeSearch != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "subTypeSearch", subTypeSearch));
        if (storeIds != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "storeIds", storeIds));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getVouchersValidateBeforeCall(String appId, Integer pageIndex, Integer pageSize, List<String> searchCodes, List<String> statusSearch, List<String> typeSearch, List<String> subTypeSearch, List<Integer> storeIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getVouchers(Async)");
        }
        

        com.squareup.okhttp.Call call = getVouchersCall(appId, pageIndex, pageSize, searchCodes, statusSearch, typeSearch, subTypeSearch, storeIds, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param pageIndex  (optional)
     * @param pageSize  (optional)
     * @param searchCodes  (optional)
     * @param statusSearch  (optional)
     * @param typeSearch  (optional)
     * @param subTypeSearch  (optional)
     * @param storeIds  (optional)
     * @return RestApiPaginationResultVoucherSummary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiPaginationResultVoucherSummary getVouchers(String appId, Integer pageIndex, Integer pageSize, List<String> searchCodes, List<String> statusSearch, List<String> typeSearch, List<String> subTypeSearch, List<Integer> storeIds) throws ApiException {
        ApiResponse<RestApiPaginationResultVoucherSummary> resp = getVouchersWithHttpInfo(appId, pageIndex, pageSize, searchCodes, statusSearch, typeSearch, subTypeSearch, storeIds);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param pageIndex  (optional)
     * @param pageSize  (optional)
     * @param searchCodes  (optional)
     * @param statusSearch  (optional)
     * @param typeSearch  (optional)
     * @param subTypeSearch  (optional)
     * @param storeIds  (optional)
     * @return ApiResponse&lt;RestApiPaginationResultVoucherSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiPaginationResultVoucherSummary> getVouchersWithHttpInfo(String appId, Integer pageIndex, Integer pageSize, List<String> searchCodes, List<String> statusSearch, List<String> typeSearch, List<String> subTypeSearch, List<Integer> storeIds) throws ApiException {
        com.squareup.okhttp.Call call = getVouchersValidateBeforeCall(appId, pageIndex, pageSize, searchCodes, statusSearch, typeSearch, subTypeSearch, storeIds, null, null);
        Type localVarReturnType = new TypeToken<RestApiPaginationResultVoucherSummary>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param pageIndex  (optional)
     * @param pageSize  (optional)
     * @param searchCodes  (optional)
     * @param statusSearch  (optional)
     * @param typeSearch  (optional)
     * @param subTypeSearch  (optional)
     * @param storeIds  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getVouchersAsync(String appId, Integer pageIndex, Integer pageSize, List<String> searchCodes, List<String> statusSearch, List<String> typeSearch, List<String> subTypeSearch, List<Integer> storeIds, final ApiCallback<RestApiPaginationResultVoucherSummary> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getVouchersValidateBeforeCall(appId, pageIndex, pageSize, searchCodes, statusSearch, typeSearch, subTypeSearch, storeIds, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiPaginationResultVoucherSummary>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateVoucher
     * @param voucherId  (required)
     * @param voucher  (required)
     * @param storeId  (optional)
     * @param percentValue  (optional)
     * @param lumpValue  (optional)
     * @param freeItemId  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateVoucherCall(Integer voucherId, VoucherBase voucher, List<Integer> storeId, Integer percentValue, Double lumpValue, Integer freeItemId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = voucher;

        // create path and map variables
        String localVarPath = "/api/v1.0/vouchers/{voucherId}"
            .replaceAll("\\{" + "voucherId" + "\\}", apiClient.escapeString(voucherId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storeId != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "storeId", storeId));
        if (percentValue != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("percentValue", percentValue));
        if (lumpValue != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lumpValue", lumpValue));
        if (freeItemId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("freeItemId", freeItemId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateVoucherValidateBeforeCall(Integer voucherId, VoucherBase voucher, List<Integer> storeId, Integer percentValue, Double lumpValue, Integer freeItemId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'voucherId' is set
        if (voucherId == null) {
            throw new ApiException("Missing the required parameter 'voucherId' when calling updateVoucher(Async)");
        }
        
        // verify the required parameter 'voucher' is set
        if (voucher == null) {
            throw new ApiException("Missing the required parameter 'voucher' when calling updateVoucher(Async)");
        }
        

        com.squareup.okhttp.Call call = updateVoucherCall(voucherId, voucher, storeId, percentValue, lumpValue, freeItemId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param voucherId  (required)
     * @param voucher  (required)
     * @param storeId  (optional)
     * @param percentValue  (optional)
     * @param lumpValue  (optional)
     * @param freeItemId  (optional)
     * @return RestApiResultVoucherWithStats
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultVoucherWithStats updateVoucher(Integer voucherId, VoucherBase voucher, List<Integer> storeId, Integer percentValue, Double lumpValue, Integer freeItemId) throws ApiException {
        ApiResponse<RestApiResultVoucherWithStats> resp = updateVoucherWithHttpInfo(voucherId, voucher, storeId, percentValue, lumpValue, freeItemId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param voucherId  (required)
     * @param voucher  (required)
     * @param storeId  (optional)
     * @param percentValue  (optional)
     * @param lumpValue  (optional)
     * @param freeItemId  (optional)
     * @return ApiResponse&lt;RestApiResultVoucherWithStats&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultVoucherWithStats> updateVoucherWithHttpInfo(Integer voucherId, VoucherBase voucher, List<Integer> storeId, Integer percentValue, Double lumpValue, Integer freeItemId) throws ApiException {
        com.squareup.okhttp.Call call = updateVoucherValidateBeforeCall(voucherId, voucher, storeId, percentValue, lumpValue, freeItemId, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultVoucherWithStats>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param voucherId  (required)
     * @param voucher  (required)
     * @param storeId  (optional)
     * @param percentValue  (optional)
     * @param lumpValue  (optional)
     * @param freeItemId  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateVoucherAsync(Integer voucherId, VoucherBase voucher, List<Integer> storeId, Integer percentValue, Double lumpValue, Integer freeItemId, final ApiCallback<RestApiResultVoucherWithStats> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateVoucherValidateBeforeCall(voucherId, voucher, storeId, percentValue, lumpValue, freeItemId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultVoucherWithStats>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
