/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.flipdish.apiclient.api;

import com.flipdish.apiclient.ApiCallback;
import com.flipdish.apiclient.ApiClient;
import com.flipdish.apiclient.ApiException;
import com.flipdish.apiclient.ApiResponse;
import com.flipdish.apiclient.Configuration;
import com.flipdish.apiclient.Pair;
import com.flipdish.apiclient.ProgressRequestBody;
import com.flipdish.apiclient.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.flipdish.apiclient.model.BankAccountCreate;
import com.flipdish.apiclient.model.BankAccountDetailsUpdateRequest;
import com.flipdish.apiclient.model.RestApiErrorResult;
import com.flipdish.apiclient.model.RestApiForbiddenResult;
import com.flipdish.apiclient.model.RestApiResultBankAccountDetail;
import com.flipdish.apiclient.model.RestApiResultModelBase;
import com.flipdish.apiclient.model.RestApiResultStripeConnectedAccount;
import com.flipdish.apiclient.model.RestApiUnauthorizedResult;
import com.flipdish.apiclient.model.StripeAccountLinkRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StripeCustomConnectApi {
    private ApiClient apiClient;

    public StripeCustomConnectApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StripeCustomConnectApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createBankAccountAndConnectedAccount
     * @param appId App Name (required)
     * @param account Account to be created (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createBankAccountAndConnectedAccountCall(String appId, BankAccountCreate account, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = account;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/customconnect/bank-account"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createBankAccountAndConnectedAccountValidateBeforeCall(String appId, BankAccountCreate account, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling createBankAccountAndConnectedAccount(Async)");
        }
        
        // verify the required parameter 'account' is set
        if (account == null) {
            throw new ApiException("Missing the required parameter 'account' when calling createBankAccountAndConnectedAccount(Async)");
        }
        

        com.squareup.okhttp.Call call = createBankAccountAndConnectedAccountCall(appId, account, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a new Bank Account and Stripe connected account
     * 
     * @param appId App Name (required)
     * @param account Account to be created (required)
     * @return RestApiResultBankAccountDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultBankAccountDetail createBankAccountAndConnectedAccount(String appId, BankAccountCreate account) throws ApiException {
        ApiResponse<RestApiResultBankAccountDetail> resp = createBankAccountAndConnectedAccountWithHttpInfo(appId, account);
        return resp.getData();
    }

    /**
     * Create a new Bank Account and Stripe connected account
     * 
     * @param appId App Name (required)
     * @param account Account to be created (required)
     * @return ApiResponse&lt;RestApiResultBankAccountDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultBankAccountDetail> createBankAccountAndConnectedAccountWithHttpInfo(String appId, BankAccountCreate account) throws ApiException {
        com.squareup.okhttp.Call call = createBankAccountAndConnectedAccountValidateBeforeCall(appId, account, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultBankAccountDetail>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new Bank Account and Stripe connected account (asynchronously)
     * 
     * @param appId App Name (required)
     * @param account Account to be created (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createBankAccountAndConnectedAccountAsync(String appId, BankAccountCreate account, final ApiCallback<RestApiResultBankAccountDetail> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createBankAccountAndConnectedAccountValidateBeforeCall(appId, account, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultBankAccountDetail>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createStripeConnectedAccount
     * @param appId App Name Id (required)
     * @param bankAccountId Bank Account Id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createStripeConnectedAccountCall(String appId, Integer bankAccountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/customconnect/{bankAccountId}/create-update-account"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "bankAccountId" + "\\}", apiClient.escapeString(bankAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createStripeConnectedAccountValidateBeforeCall(String appId, Integer bankAccountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling createStripeConnectedAccount(Async)");
        }
        
        // verify the required parameter 'bankAccountId' is set
        if (bankAccountId == null) {
            throw new ApiException("Missing the required parameter 'bankAccountId' when calling createStripeConnectedAccount(Async)");
        }
        

        com.squareup.okhttp.Call call = createStripeConnectedAccountCall(appId, bankAccountId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create or update a Stripe connected account associated with the bank account of bankAccountId
     * 
     * @param appId App Name Id (required)
     * @param bankAccountId Bank Account Id (required)
     * @return RestApiResultStripeConnectedAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultStripeConnectedAccount createStripeConnectedAccount(String appId, Integer bankAccountId) throws ApiException {
        ApiResponse<RestApiResultStripeConnectedAccount> resp = createStripeConnectedAccountWithHttpInfo(appId, bankAccountId);
        return resp.getData();
    }

    /**
     * Create or update a Stripe connected account associated with the bank account of bankAccountId
     * 
     * @param appId App Name Id (required)
     * @param bankAccountId Bank Account Id (required)
     * @return ApiResponse&lt;RestApiResultStripeConnectedAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultStripeConnectedAccount> createStripeConnectedAccountWithHttpInfo(String appId, Integer bankAccountId) throws ApiException {
        com.squareup.okhttp.Call call = createStripeConnectedAccountValidateBeforeCall(appId, bankAccountId, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultStripeConnectedAccount>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create or update a Stripe connected account associated with the bank account of bankAccountId (asynchronously)
     * 
     * @param appId App Name Id (required)
     * @param bankAccountId Bank Account Id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createStripeConnectedAccountAsync(String appId, Integer bankAccountId, final ApiCallback<RestApiResultStripeConnectedAccount> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createStripeConnectedAccountValidateBeforeCall(appId, bankAccountId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultStripeConnectedAccount>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createStripeConnectedAccountLink
     * @param appId App Name (required)
     * @param stripeConnectedAccountId Stripe Connected Account Id (required)
     * @param stripeAccountLinkRequest  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createStripeConnectedAccountLinkCall(String appId, String stripeConnectedAccountId, StripeAccountLinkRequest stripeAccountLinkRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = stripeAccountLinkRequest;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/customconnect/{stripeConnectedAccountId}/create-account-link"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "stripeConnectedAccountId" + "\\}", apiClient.escapeString(stripeConnectedAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createStripeConnectedAccountLinkValidateBeforeCall(String appId, String stripeConnectedAccountId, StripeAccountLinkRequest stripeAccountLinkRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling createStripeConnectedAccountLink(Async)");
        }
        
        // verify the required parameter 'stripeConnectedAccountId' is set
        if (stripeConnectedAccountId == null) {
            throw new ApiException("Missing the required parameter 'stripeConnectedAccountId' when calling createStripeConnectedAccountLink(Async)");
        }
        
        // verify the required parameter 'stripeAccountLinkRequest' is set
        if (stripeAccountLinkRequest == null) {
            throw new ApiException("Missing the required parameter 'stripeAccountLinkRequest' when calling createStripeConnectedAccountLink(Async)");
        }
        

        com.squareup.okhttp.Call call = createStripeConnectedAccountLinkCall(appId, stripeConnectedAccountId, stripeAccountLinkRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets a single-use Stripe URL for the given account
     * 
     * @param appId App Name (required)
     * @param stripeConnectedAccountId Stripe Connected Account Id (required)
     * @param stripeAccountLinkRequest  (required)
     * @return RestApiResultStripeConnectedAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultStripeConnectedAccount createStripeConnectedAccountLink(String appId, String stripeConnectedAccountId, StripeAccountLinkRequest stripeAccountLinkRequest) throws ApiException {
        ApiResponse<RestApiResultStripeConnectedAccount> resp = createStripeConnectedAccountLinkWithHttpInfo(appId, stripeConnectedAccountId, stripeAccountLinkRequest);
        return resp.getData();
    }

    /**
     * Gets a single-use Stripe URL for the given account
     * 
     * @param appId App Name (required)
     * @param stripeConnectedAccountId Stripe Connected Account Id (required)
     * @param stripeAccountLinkRequest  (required)
     * @return ApiResponse&lt;RestApiResultStripeConnectedAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultStripeConnectedAccount> createStripeConnectedAccountLinkWithHttpInfo(String appId, String stripeConnectedAccountId, StripeAccountLinkRequest stripeAccountLinkRequest) throws ApiException {
        com.squareup.okhttp.Call call = createStripeConnectedAccountLinkValidateBeforeCall(appId, stripeConnectedAccountId, stripeAccountLinkRequest, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultStripeConnectedAccount>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets a single-use Stripe URL for the given account (asynchronously)
     * 
     * @param appId App Name (required)
     * @param stripeConnectedAccountId Stripe Connected Account Id (required)
     * @param stripeAccountLinkRequest  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createStripeConnectedAccountLinkAsync(String appId, String stripeConnectedAccountId, StripeAccountLinkRequest stripeAccountLinkRequest, final ApiCallback<RestApiResultStripeConnectedAccount> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createStripeConnectedAccountLinkValidateBeforeCall(appId, stripeConnectedAccountId, stripeAccountLinkRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultStripeConnectedAccount>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getVerificationStatus
     * @param appId  (required)
     * @param stripeConnectedAccountId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getVerificationStatusCall(String appId, String stripeConnectedAccountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/customconnect/verification-status"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (stripeConnectedAccountId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("stripeConnectedAccountId", stripeConnectedAccountId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getVerificationStatusValidateBeforeCall(String appId, String stripeConnectedAccountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getVerificationStatus(Async)");
        }
        
        // verify the required parameter 'stripeConnectedAccountId' is set
        if (stripeConnectedAccountId == null) {
            throw new ApiException("Missing the required parameter 'stripeConnectedAccountId' when calling getVerificationStatus(Async)");
        }
        

        com.squareup.okhttp.Call call = getVerificationStatusCall(appId, stripeConnectedAccountId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets the current verification status of the given connected account
     * 
     * @param appId  (required)
     * @param stripeConnectedAccountId  (required)
     * @return RestApiResultStripeConnectedAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultStripeConnectedAccount getVerificationStatus(String appId, String stripeConnectedAccountId) throws ApiException {
        ApiResponse<RestApiResultStripeConnectedAccount> resp = getVerificationStatusWithHttpInfo(appId, stripeConnectedAccountId);
        return resp.getData();
    }

    /**
     * Gets the current verification status of the given connected account
     * 
     * @param appId  (required)
     * @param stripeConnectedAccountId  (required)
     * @return ApiResponse&lt;RestApiResultStripeConnectedAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultStripeConnectedAccount> getVerificationStatusWithHttpInfo(String appId, String stripeConnectedAccountId) throws ApiException {
        com.squareup.okhttp.Call call = getVerificationStatusValidateBeforeCall(appId, stripeConnectedAccountId, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultStripeConnectedAccount>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets the current verification status of the given connected account (asynchronously)
     * 
     * @param appId  (required)
     * @param stripeConnectedAccountId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getVerificationStatusAsync(String appId, String stripeConnectedAccountId, final ApiCallback<RestApiResultStripeConnectedAccount> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getVerificationStatusValidateBeforeCall(appId, stripeConnectedAccountId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultStripeConnectedAccount>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setBankAccountBusinessType
     * @param appId App Name (required)
     * @param bankAccountId Bank Account Id (required)
     * @param businessType Bank Account business type (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setBankAccountBusinessTypeCall(String appId, Integer bankAccountId, String businessType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = businessType;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/customconnect/bank-account/{bankAccountId}/businesstype"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "bankAccountId" + "\\}", apiClient.escapeString(bankAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setBankAccountBusinessTypeValidateBeforeCall(String appId, Integer bankAccountId, String businessType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling setBankAccountBusinessType(Async)");
        }
        
        // verify the required parameter 'bankAccountId' is set
        if (bankAccountId == null) {
            throw new ApiException("Missing the required parameter 'bankAccountId' when calling setBankAccountBusinessType(Async)");
        }
        
        // verify the required parameter 'businessType' is set
        if (businessType == null) {
            throw new ApiException("Missing the required parameter 'businessType' when calling setBankAccountBusinessType(Async)");
        }
        

        com.squareup.okhttp.Call call = setBankAccountBusinessTypeCall(appId, bankAccountId, businessType, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update bank account&#39;s BusinessType and create a Stripe Connected Account
     * 
     * @param appId App Name (required)
     * @param bankAccountId Bank Account Id (required)
     * @param businessType Bank Account business type (required)
     * @return RestApiResultBankAccountDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultBankAccountDetail setBankAccountBusinessType(String appId, Integer bankAccountId, String businessType) throws ApiException {
        ApiResponse<RestApiResultBankAccountDetail> resp = setBankAccountBusinessTypeWithHttpInfo(appId, bankAccountId, businessType);
        return resp.getData();
    }

    /**
     * Update bank account&#39;s BusinessType and create a Stripe Connected Account
     * 
     * @param appId App Name (required)
     * @param bankAccountId Bank Account Id (required)
     * @param businessType Bank Account business type (required)
     * @return ApiResponse&lt;RestApiResultBankAccountDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultBankAccountDetail> setBankAccountBusinessTypeWithHttpInfo(String appId, Integer bankAccountId, String businessType) throws ApiException {
        com.squareup.okhttp.Call call = setBankAccountBusinessTypeValidateBeforeCall(appId, bankAccountId, businessType, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultBankAccountDetail>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update bank account&#39;s BusinessType and create a Stripe Connected Account (asynchronously)
     * 
     * @param appId App Name (required)
     * @param bankAccountId Bank Account Id (required)
     * @param businessType Bank Account business type (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setBankAccountBusinessTypeAsync(String appId, Integer bankAccountId, String businessType, final ApiCallback<RestApiResultBankAccountDetail> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setBankAccountBusinessTypeValidateBeforeCall(appId, bankAccountId, businessType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultBankAccountDetail>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for stripeCustomConnectRefresh
     * @param linkRequestId  (required)
     * @param appId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call stripeCustomConnectRefreshCall(Integer linkRequestId, String appId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/customconnect/refresh-link"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (linkRequestId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("linkRequestId", linkRequestId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call stripeCustomConnectRefreshValidateBeforeCall(Integer linkRequestId, String appId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'linkRequestId' is set
        if (linkRequestId == null) {
            throw new ApiException("Missing the required parameter 'linkRequestId' when calling stripeCustomConnectRefresh(Async)");
        }
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling stripeCustomConnectRefresh(Async)");
        }
        

        com.squareup.okhttp.Call call = stripeCustomConnectRefreshCall(linkRequestId, appId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param linkRequestId  (required)
     * @param appId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object stripeCustomConnectRefresh(Integer linkRequestId, String appId) throws ApiException {
        ApiResponse<Object> resp = stripeCustomConnectRefreshWithHttpInfo(linkRequestId, appId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param linkRequestId  (required)
     * @param appId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> stripeCustomConnectRefreshWithHttpInfo(Integer linkRequestId, String appId) throws ApiException {
        com.squareup.okhttp.Call call = stripeCustomConnectRefreshValidateBeforeCall(linkRequestId, appId, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param linkRequestId  (required)
     * @param appId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call stripeCustomConnectRefreshAsync(Integer linkRequestId, String appId, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = stripeCustomConnectRefreshValidateBeforeCall(linkRequestId, appId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateBankAccountDetails
     * @param appId App Name Id (required)
     * @param bankAccountId Bank Account Id (required)
     * @param updateRequest fields to be updated (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateBankAccountDetailsCall(String appId, Integer bankAccountId, BankAccountDetailsUpdateRequest updateRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = updateRequest;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/customconnect/{bankAccountId}/update-bank-account-details"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "bankAccountId" + "\\}", apiClient.escapeString(bankAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateBankAccountDetailsValidateBeforeCall(String appId, Integer bankAccountId, BankAccountDetailsUpdateRequest updateRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling updateBankAccountDetails(Async)");
        }
        
        // verify the required parameter 'bankAccountId' is set
        if (bankAccountId == null) {
            throw new ApiException("Missing the required parameter 'bankAccountId' when calling updateBankAccountDetails(Async)");
        }
        
        // verify the required parameter 'updateRequest' is set
        if (updateRequest == null) {
            throw new ApiException("Missing the required parameter 'updateRequest' when calling updateBankAccountDetails(Async)");
        }
        

        com.squareup.okhttp.Call call = updateBankAccountDetailsCall(appId, bankAccountId, updateRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update bank account details
     * 
     * @param appId App Name Id (required)
     * @param bankAccountId Bank Account Id (required)
     * @param updateRequest fields to be updated (required)
     * @return RestApiResultStripeConnectedAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultStripeConnectedAccount updateBankAccountDetails(String appId, Integer bankAccountId, BankAccountDetailsUpdateRequest updateRequest) throws ApiException {
        ApiResponse<RestApiResultStripeConnectedAccount> resp = updateBankAccountDetailsWithHttpInfo(appId, bankAccountId, updateRequest);
        return resp.getData();
    }

    /**
     * Update bank account details
     * 
     * @param appId App Name Id (required)
     * @param bankAccountId Bank Account Id (required)
     * @param updateRequest fields to be updated (required)
     * @return ApiResponse&lt;RestApiResultStripeConnectedAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultStripeConnectedAccount> updateBankAccountDetailsWithHttpInfo(String appId, Integer bankAccountId, BankAccountDetailsUpdateRequest updateRequest) throws ApiException {
        com.squareup.okhttp.Call call = updateBankAccountDetailsValidateBeforeCall(appId, bankAccountId, updateRequest, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultStripeConnectedAccount>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update bank account details (asynchronously)
     * 
     * @param appId App Name Id (required)
     * @param bankAccountId Bank Account Id (required)
     * @param updateRequest fields to be updated (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateBankAccountDetailsAsync(String appId, Integer bankAccountId, BankAccountDetailsUpdateRequest updateRequest, final ApiCallback<RestApiResultStripeConnectedAccount> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateBankAccountDetailsValidateBeforeCall(appId, bankAccountId, updateRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultStripeConnectedAccount>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updatePayoutSchedule
     * @param appId  (required)
     * @param stripeConnectedAccountId  (required)
     * @param interval  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updatePayoutScheduleCall(String appId, String stripeConnectedAccountId, String interval, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/customconnect/update-payout-schedule/{stripeConnectedAccountId}/{interval}"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "stripeConnectedAccountId" + "\\}", apiClient.escapeString(stripeConnectedAccountId.toString()))
            .replaceAll("\\{" + "interval" + "\\}", apiClient.escapeString(interval.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updatePayoutScheduleValidateBeforeCall(String appId, String stripeConnectedAccountId, String interval, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling updatePayoutSchedule(Async)");
        }
        
        // verify the required parameter 'stripeConnectedAccountId' is set
        if (stripeConnectedAccountId == null) {
            throw new ApiException("Missing the required parameter 'stripeConnectedAccountId' when calling updatePayoutSchedule(Async)");
        }
        
        // verify the required parameter 'interval' is set
        if (interval == null) {
            throw new ApiException("Missing the required parameter 'interval' when calling updatePayoutSchedule(Async)");
        }
        

        com.squareup.okhttp.Call call = updatePayoutScheduleCall(appId, stripeConnectedAccountId, interval, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update Stripe Connection Account&#39;s payout schedule
     * 
     * @param appId  (required)
     * @param stripeConnectedAccountId  (required)
     * @param interval  (required)
     * @return RestApiResultModelBase
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultModelBase updatePayoutSchedule(String appId, String stripeConnectedAccountId, String interval) throws ApiException {
        ApiResponse<RestApiResultModelBase> resp = updatePayoutScheduleWithHttpInfo(appId, stripeConnectedAccountId, interval);
        return resp.getData();
    }

    /**
     * Update Stripe Connection Account&#39;s payout schedule
     * 
     * @param appId  (required)
     * @param stripeConnectedAccountId  (required)
     * @param interval  (required)
     * @return ApiResponse&lt;RestApiResultModelBase&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultModelBase> updatePayoutScheduleWithHttpInfo(String appId, String stripeConnectedAccountId, String interval) throws ApiException {
        com.squareup.okhttp.Call call = updatePayoutScheduleValidateBeforeCall(appId, stripeConnectedAccountId, interval, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultModelBase>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update Stripe Connection Account&#39;s payout schedule (asynchronously)
     * 
     * @param appId  (required)
     * @param stripeConnectedAccountId  (required)
     * @param interval  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updatePayoutScheduleAsync(String appId, String stripeConnectedAccountId, String interval, final ApiCallback<RestApiResultModelBase> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updatePayoutScheduleValidateBeforeCall(appId, stripeConnectedAccountId, interval, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultModelBase>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
