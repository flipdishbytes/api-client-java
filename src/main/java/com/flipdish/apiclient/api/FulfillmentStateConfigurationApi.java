/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.flipdish.apiclient.api;

import com.flipdish.apiclient.ApiCallback;
import com.flipdish.apiclient.ApiClient;
import com.flipdish.apiclient.ApiException;
import com.flipdish.apiclient.ApiResponse;
import com.flipdish.apiclient.Configuration;
import com.flipdish.apiclient.Pair;
import com.flipdish.apiclient.ProgressRequestBody;
import com.flipdish.apiclient.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.flipdish.apiclient.model.CreateFulfillmentStatesConfiguration;
import com.flipdish.apiclient.model.FulfillmentStatesConfiguration;
import com.flipdish.apiclient.model.RestApiArrayResultFulfillmentStatesConfigurationSummary;
import com.flipdish.apiclient.model.RestApiErrorResult;
import com.flipdish.apiclient.model.RestApiForbiddenResult;
import com.flipdish.apiclient.model.RestApiResultFulfillmentStatesConfiguration;
import com.flipdish.apiclient.model.RestApiStringResult;
import com.flipdish.apiclient.model.RestApiUnauthorizedResult;
import com.flipdish.apiclient.model.UpdateFulfillmentStatesConfiguration;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FulfillmentStateConfigurationApi {
    private ApiClient apiClient;

    public FulfillmentStateConfigurationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FulfillmentStateConfigurationApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createFulfillmentStatesConfig
     * @param appId App id (required)
     * @param fulfillmentStateConfiguration Fulfillment state configuration (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createFulfillmentStatesConfigCall(String appId, CreateFulfillmentStatesConfiguration fulfillmentStateConfiguration, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = fulfillmentStateConfiguration;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/fulfillment/configuration/states"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createFulfillmentStatesConfigValidateBeforeCall(String appId, CreateFulfillmentStatesConfiguration fulfillmentStateConfiguration, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling createFulfillmentStatesConfig(Async)");
        }
        
        // verify the required parameter 'fulfillmentStateConfiguration' is set
        if (fulfillmentStateConfiguration == null) {
            throw new ApiException("Missing the required parameter 'fulfillmentStateConfiguration' when calling createFulfillmentStatesConfig(Async)");
        }
        

        com.squareup.okhttp.Call call = createFulfillmentStatesConfigCall(appId, fulfillmentStateConfiguration, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create fulfillment configuration
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param appId App id (required)
     * @param fulfillmentStateConfiguration Fulfillment state configuration (required)
     * @return RestApiResultFulfillmentStatesConfiguration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultFulfillmentStatesConfiguration createFulfillmentStatesConfig(String appId, CreateFulfillmentStatesConfiguration fulfillmentStateConfiguration) throws ApiException {
        ApiResponse<RestApiResultFulfillmentStatesConfiguration> resp = createFulfillmentStatesConfigWithHttpInfo(appId, fulfillmentStateConfiguration);
        return resp.getData();
    }

    /**
     * Create fulfillment configuration
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param appId App id (required)
     * @param fulfillmentStateConfiguration Fulfillment state configuration (required)
     * @return ApiResponse&lt;RestApiResultFulfillmentStatesConfiguration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultFulfillmentStatesConfiguration> createFulfillmentStatesConfigWithHttpInfo(String appId, CreateFulfillmentStatesConfiguration fulfillmentStateConfiguration) throws ApiException {
        com.squareup.okhttp.Call call = createFulfillmentStatesConfigValidateBeforeCall(appId, fulfillmentStateConfiguration, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultFulfillmentStatesConfiguration>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create fulfillment configuration (asynchronously)
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param appId App id (required)
     * @param fulfillmentStateConfiguration Fulfillment state configuration (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createFulfillmentStatesConfigAsync(String appId, CreateFulfillmentStatesConfiguration fulfillmentStateConfiguration, final ApiCallback<RestApiResultFulfillmentStatesConfiguration> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createFulfillmentStatesConfigValidateBeforeCall(appId, fulfillmentStateConfiguration, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultFulfillmentStatesConfiguration>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteFulfillmentStatesConfig
     * @param appId App id (required)
     * @param configId Fulfillment states configuration id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteFulfillmentStatesConfigCall(String appId, String configId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/fulfillment/configuration/states/{configId}"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "configId" + "\\}", apiClient.escapeString(configId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteFulfillmentStatesConfigValidateBeforeCall(String appId, String configId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling deleteFulfillmentStatesConfig(Async)");
        }
        
        // verify the required parameter 'configId' is set
        if (configId == null) {
            throw new ApiException("Missing the required parameter 'configId' when calling deleteFulfillmentStatesConfig(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteFulfillmentStatesConfigCall(appId, configId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete fulfillment states configuration
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param appId App id (required)
     * @param configId Fulfillment states configuration id (required)
     * @return RestApiStringResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiStringResult deleteFulfillmentStatesConfig(String appId, String configId) throws ApiException {
        ApiResponse<RestApiStringResult> resp = deleteFulfillmentStatesConfigWithHttpInfo(appId, configId);
        return resp.getData();
    }

    /**
     * Delete fulfillment states configuration
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param appId App id (required)
     * @param configId Fulfillment states configuration id (required)
     * @return ApiResponse&lt;RestApiStringResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiStringResult> deleteFulfillmentStatesConfigWithHttpInfo(String appId, String configId) throws ApiException {
        com.squareup.okhttp.Call call = deleteFulfillmentStatesConfigValidateBeforeCall(appId, configId, null, null);
        Type localVarReturnType = new TypeToken<RestApiStringResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete fulfillment states configuration (asynchronously)
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param appId App id (required)
     * @param configId Fulfillment states configuration id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteFulfillmentStatesConfigAsync(String appId, String configId, final ApiCallback<RestApiStringResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteFulfillmentStatesConfigValidateBeforeCall(appId, configId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiStringResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFulfillmentStatesConfiguration
     * @param appId App id (required)
     * @param configId Fulfillment configuration id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFulfillmentStatesConfigurationCall(String appId, String configId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/fulfillment/configuration/states/{configId}"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "configId" + "\\}", apiClient.escapeString(configId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFulfillmentStatesConfigurationValidateBeforeCall(String appId, String configId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getFulfillmentStatesConfiguration(Async)");
        }
        
        // verify the required parameter 'configId' is set
        if (configId == null) {
            throw new ApiException("Missing the required parameter 'configId' when calling getFulfillmentStatesConfiguration(Async)");
        }
        

        com.squareup.okhttp.Call call = getFulfillmentStatesConfigurationCall(appId, configId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get fulfillment configuration
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param appId App id (required)
     * @param configId Fulfillment configuration id (required)
     * @return FulfillmentStatesConfiguration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FulfillmentStatesConfiguration getFulfillmentStatesConfiguration(String appId, String configId) throws ApiException {
        ApiResponse<FulfillmentStatesConfiguration> resp = getFulfillmentStatesConfigurationWithHttpInfo(appId, configId);
        return resp.getData();
    }

    /**
     * Get fulfillment configuration
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param appId App id (required)
     * @param configId Fulfillment configuration id (required)
     * @return ApiResponse&lt;FulfillmentStatesConfiguration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FulfillmentStatesConfiguration> getFulfillmentStatesConfigurationWithHttpInfo(String appId, String configId) throws ApiException {
        com.squareup.okhttp.Call call = getFulfillmentStatesConfigurationValidateBeforeCall(appId, configId, null, null);
        Type localVarReturnType = new TypeToken<FulfillmentStatesConfiguration>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get fulfillment configuration (asynchronously)
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param appId App id (required)
     * @param configId Fulfillment configuration id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFulfillmentStatesConfigurationAsync(String appId, String configId, final ApiCallback<FulfillmentStatesConfiguration> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFulfillmentStatesConfigurationValidateBeforeCall(appId, configId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FulfillmentStatesConfiguration>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFulfillmentStatesConfigurationTemplate
     * @param appId App id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFulfillmentStatesConfigurationTemplateCall(String appId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/fulfillment/configuration/states_template"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFulfillmentStatesConfigurationTemplateValidateBeforeCall(String appId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getFulfillmentStatesConfigurationTemplate(Async)");
        }
        

        com.squareup.okhttp.Call call = getFulfillmentStatesConfigurationTemplateCall(appId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get fulfillment configuration template
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param appId App id (required)
     * @return FulfillmentStatesConfiguration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FulfillmentStatesConfiguration getFulfillmentStatesConfigurationTemplate(String appId) throws ApiException {
        ApiResponse<FulfillmentStatesConfiguration> resp = getFulfillmentStatesConfigurationTemplateWithHttpInfo(appId);
        return resp.getData();
    }

    /**
     * Get fulfillment configuration template
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param appId App id (required)
     * @return ApiResponse&lt;FulfillmentStatesConfiguration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FulfillmentStatesConfiguration> getFulfillmentStatesConfigurationTemplateWithHttpInfo(String appId) throws ApiException {
        com.squareup.okhttp.Call call = getFulfillmentStatesConfigurationTemplateValidateBeforeCall(appId, null, null);
        Type localVarReturnType = new TypeToken<FulfillmentStatesConfiguration>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get fulfillment configuration template (asynchronously)
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param appId App id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFulfillmentStatesConfigurationTemplateAsync(String appId, final ApiCallback<FulfillmentStatesConfiguration> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFulfillmentStatesConfigurationTemplateValidateBeforeCall(appId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FulfillmentStatesConfiguration>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchFulfillmentStatesConfigurations
     * @param appId App id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchFulfillmentStatesConfigurationsCall(String appId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/fulfillment/configuration/states"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchFulfillmentStatesConfigurationsValidateBeforeCall(String appId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling searchFulfillmentStatesConfigurations(Async)");
        }
        

        com.squareup.okhttp.Call call = searchFulfillmentStatesConfigurationsCall(appId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List fulfillment configurations for AppId
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param appId App id (required)
     * @return RestApiArrayResultFulfillmentStatesConfigurationSummary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiArrayResultFulfillmentStatesConfigurationSummary searchFulfillmentStatesConfigurations(String appId) throws ApiException {
        ApiResponse<RestApiArrayResultFulfillmentStatesConfigurationSummary> resp = searchFulfillmentStatesConfigurationsWithHttpInfo(appId);
        return resp.getData();
    }

    /**
     * List fulfillment configurations for AppId
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param appId App id (required)
     * @return ApiResponse&lt;RestApiArrayResultFulfillmentStatesConfigurationSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiArrayResultFulfillmentStatesConfigurationSummary> searchFulfillmentStatesConfigurationsWithHttpInfo(String appId) throws ApiException {
        com.squareup.okhttp.Call call = searchFulfillmentStatesConfigurationsValidateBeforeCall(appId, null, null);
        Type localVarReturnType = new TypeToken<RestApiArrayResultFulfillmentStatesConfigurationSummary>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List fulfillment configurations for AppId (asynchronously)
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param appId App id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchFulfillmentStatesConfigurationsAsync(String appId, final ApiCallback<RestApiArrayResultFulfillmentStatesConfigurationSummary> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchFulfillmentStatesConfigurationsValidateBeforeCall(appId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiArrayResultFulfillmentStatesConfigurationSummary>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateFulfillmentStatesConfig
     * @param appId App id (required)
     * @param configId Fulfillment states configuration id (required)
     * @param updateFulfillmentStatesConfiguration Update fulfillment states configuration (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateFulfillmentStatesConfigCall(String appId, String configId, UpdateFulfillmentStatesConfiguration updateFulfillmentStatesConfiguration, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = updateFulfillmentStatesConfiguration;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/fulfillment/configuration/states/{configId}"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "configId" + "\\}", apiClient.escapeString(configId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateFulfillmentStatesConfigValidateBeforeCall(String appId, String configId, UpdateFulfillmentStatesConfiguration updateFulfillmentStatesConfiguration, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling updateFulfillmentStatesConfig(Async)");
        }
        
        // verify the required parameter 'configId' is set
        if (configId == null) {
            throw new ApiException("Missing the required parameter 'configId' when calling updateFulfillmentStatesConfig(Async)");
        }
        
        // verify the required parameter 'updateFulfillmentStatesConfiguration' is set
        if (updateFulfillmentStatesConfiguration == null) {
            throw new ApiException("Missing the required parameter 'updateFulfillmentStatesConfiguration' when calling updateFulfillmentStatesConfig(Async)");
        }
        

        com.squareup.okhttp.Call call = updateFulfillmentStatesConfigCall(appId, configId, updateFulfillmentStatesConfiguration, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update fulfillment configuration
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param appId App id (required)
     * @param configId Fulfillment states configuration id (required)
     * @param updateFulfillmentStatesConfiguration Update fulfillment states configuration (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateFulfillmentStatesConfig(String appId, String configId, UpdateFulfillmentStatesConfiguration updateFulfillmentStatesConfiguration) throws ApiException {
        updateFulfillmentStatesConfigWithHttpInfo(appId, configId, updateFulfillmentStatesConfiguration);
    }

    /**
     * Update fulfillment configuration
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param appId App id (required)
     * @param configId Fulfillment states configuration id (required)
     * @param updateFulfillmentStatesConfiguration Update fulfillment states configuration (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateFulfillmentStatesConfigWithHttpInfo(String appId, String configId, UpdateFulfillmentStatesConfiguration updateFulfillmentStatesConfiguration) throws ApiException {
        com.squareup.okhttp.Call call = updateFulfillmentStatesConfigValidateBeforeCall(appId, configId, updateFulfillmentStatesConfiguration, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update fulfillment configuration (asynchronously)
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param appId App id (required)
     * @param configId Fulfillment states configuration id (required)
     * @param updateFulfillmentStatesConfiguration Update fulfillment states configuration (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateFulfillmentStatesConfigAsync(String appId, String configId, UpdateFulfillmentStatesConfiguration updateFulfillmentStatesConfiguration, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateFulfillmentStatesConfigValidateBeforeCall(appId, configId, updateFulfillmentStatesConfiguration, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
