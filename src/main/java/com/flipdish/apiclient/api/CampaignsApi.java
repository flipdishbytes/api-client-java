/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.flipdish.apiclient.api;

import com.flipdish.apiclient.ApiCallback;
import com.flipdish.apiclient.ApiClient;
import com.flipdish.apiclient.ApiException;
import com.flipdish.apiclient.ApiResponse;
import com.flipdish.apiclient.Configuration;
import com.flipdish.apiclient.Pair;
import com.flipdish.apiclient.ProgressRequestBody;
import com.flipdish.apiclient.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.flipdish.apiclient.model.LoyaltyCampaignBase;
import com.flipdish.apiclient.model.RestApiArrayResultLoyaltyCampaign;
import com.flipdish.apiclient.model.RestApiArrayResultRetentionCampaign;
import com.flipdish.apiclient.model.RestApiArrayResultStoreListItem;
import com.flipdish.apiclient.model.RestApiErrorResult;
import com.flipdish.apiclient.model.RestApiForbiddenResult;
import com.flipdish.apiclient.model.RestApiResultLoyaltyCampaign;
import com.flipdish.apiclient.model.RestApiResultRetentionCampaign;
import com.flipdish.apiclient.model.RestApiUnauthorizedResult;
import com.flipdish.apiclient.model.RetentionCampaignBase;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CampaignsApi {
    private ApiClient apiClient;

    public CampaignsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CampaignsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createLoyaltyCampaign
     * @param appId App Name Id (required)
     * @param campaign Loyalty campaign details (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createLoyaltyCampaignCall(String appId, LoyaltyCampaignBase campaign, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = campaign;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/campaigns/loyalty"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createLoyaltyCampaignValidateBeforeCall(String appId, LoyaltyCampaignBase campaign, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling createLoyaltyCampaign(Async)");
        }
        
        // verify the required parameter 'campaign' is set
        if (campaign == null) {
            throw new ApiException("Missing the required parameter 'campaign' when calling createLoyaltyCampaign(Async)");
        }
        

        com.squareup.okhttp.Call call = createLoyaltyCampaignCall(appId, campaign, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Creates loyalty campaign
     * 
     * @param appId App Name Id (required)
     * @param campaign Loyalty campaign details (required)
     * @return RestApiResultLoyaltyCampaign
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultLoyaltyCampaign createLoyaltyCampaign(String appId, LoyaltyCampaignBase campaign) throws ApiException {
        ApiResponse<RestApiResultLoyaltyCampaign> resp = createLoyaltyCampaignWithHttpInfo(appId, campaign);
        return resp.getData();
    }

    /**
     * Creates loyalty campaign
     * 
     * @param appId App Name Id (required)
     * @param campaign Loyalty campaign details (required)
     * @return ApiResponse&lt;RestApiResultLoyaltyCampaign&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultLoyaltyCampaign> createLoyaltyCampaignWithHttpInfo(String appId, LoyaltyCampaignBase campaign) throws ApiException {
        com.squareup.okhttp.Call call = createLoyaltyCampaignValidateBeforeCall(appId, campaign, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultLoyaltyCampaign>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates loyalty campaign (asynchronously)
     * 
     * @param appId App Name Id (required)
     * @param campaign Loyalty campaign details (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createLoyaltyCampaignAsync(String appId, LoyaltyCampaignBase campaign, final ApiCallback<RestApiResultLoyaltyCampaign> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createLoyaltyCampaignValidateBeforeCall(appId, campaign, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultLoyaltyCampaign>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createRetentionCampaign
     * @param appId App Name Id (required)
     * @param campaign Retention campaign details (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createRetentionCampaignCall(String appId, RetentionCampaignBase campaign, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = campaign;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/campaigns/retention"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createRetentionCampaignValidateBeforeCall(String appId, RetentionCampaignBase campaign, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling createRetentionCampaign(Async)");
        }
        
        // verify the required parameter 'campaign' is set
        if (campaign == null) {
            throw new ApiException("Missing the required parameter 'campaign' when calling createRetentionCampaign(Async)");
        }
        

        com.squareup.okhttp.Call call = createRetentionCampaignCall(appId, campaign, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Creates retention campaign
     * 
     * @param appId App Name Id (required)
     * @param campaign Retention campaign details (required)
     * @return RestApiResultRetentionCampaign
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultRetentionCampaign createRetentionCampaign(String appId, RetentionCampaignBase campaign) throws ApiException {
        ApiResponse<RestApiResultRetentionCampaign> resp = createRetentionCampaignWithHttpInfo(appId, campaign);
        return resp.getData();
    }

    /**
     * Creates retention campaign
     * 
     * @param appId App Name Id (required)
     * @param campaign Retention campaign details (required)
     * @return ApiResponse&lt;RestApiResultRetentionCampaign&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultRetentionCampaign> createRetentionCampaignWithHttpInfo(String appId, RetentionCampaignBase campaign) throws ApiException {
        com.squareup.okhttp.Call call = createRetentionCampaignValidateBeforeCall(appId, campaign, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultRetentionCampaign>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates retention campaign (asynchronously)
     * 
     * @param appId App Name Id (required)
     * @param campaign Retention campaign details (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createRetentionCampaignAsync(String appId, RetentionCampaignBase campaign, final ApiCallback<RestApiResultRetentionCampaign> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createRetentionCampaignValidateBeforeCall(appId, campaign, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultRetentionCampaign>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLoyaltyCampaignsForApp
     * @param appId App Name Id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLoyaltyCampaignsForAppCall(String appId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/campaigns/loyalty"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLoyaltyCampaignsForAppValidateBeforeCall(String appId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getLoyaltyCampaignsForApp(Async)");
        }
        

        com.squareup.okhttp.Call call = getLoyaltyCampaignsForAppCall(appId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets loyalty campaigns for app
     * 
     * @param appId App Name Id (required)
     * @return RestApiArrayResultLoyaltyCampaign
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiArrayResultLoyaltyCampaign getLoyaltyCampaignsForApp(String appId) throws ApiException {
        ApiResponse<RestApiArrayResultLoyaltyCampaign> resp = getLoyaltyCampaignsForAppWithHttpInfo(appId);
        return resp.getData();
    }

    /**
     * Gets loyalty campaigns for app
     * 
     * @param appId App Name Id (required)
     * @return ApiResponse&lt;RestApiArrayResultLoyaltyCampaign&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiArrayResultLoyaltyCampaign> getLoyaltyCampaignsForAppWithHttpInfo(String appId) throws ApiException {
        com.squareup.okhttp.Call call = getLoyaltyCampaignsForAppValidateBeforeCall(appId, null, null);
        Type localVarReturnType = new TypeToken<RestApiArrayResultLoyaltyCampaign>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets loyalty campaigns for app (asynchronously)
     * 
     * @param appId App Name Id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLoyaltyCampaignsForAppAsync(String appId, final ApiCallback<RestApiArrayResultLoyaltyCampaign> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLoyaltyCampaignsForAppValidateBeforeCall(appId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiArrayResultLoyaltyCampaign>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLoyaltyCampaignsForStore
     * @param appId App Name Id (required)
     * @param storeId Store Id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLoyaltyCampaignsForStoreCall(String appId, Integer storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/campaigns/loyalty/{storeId}"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLoyaltyCampaignsForStoreValidateBeforeCall(String appId, Integer storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getLoyaltyCampaignsForStore(Async)");
        }
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling getLoyaltyCampaignsForStore(Async)");
        }
        

        com.squareup.okhttp.Call call = getLoyaltyCampaignsForStoreCall(appId, storeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets loyalty campaigns for store
     * 
     * @param appId App Name Id (required)
     * @param storeId Store Id (required)
     * @return RestApiArrayResultLoyaltyCampaign
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiArrayResultLoyaltyCampaign getLoyaltyCampaignsForStore(String appId, Integer storeId) throws ApiException {
        ApiResponse<RestApiArrayResultLoyaltyCampaign> resp = getLoyaltyCampaignsForStoreWithHttpInfo(appId, storeId);
        return resp.getData();
    }

    /**
     * Gets loyalty campaigns for store
     * 
     * @param appId App Name Id (required)
     * @param storeId Store Id (required)
     * @return ApiResponse&lt;RestApiArrayResultLoyaltyCampaign&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiArrayResultLoyaltyCampaign> getLoyaltyCampaignsForStoreWithHttpInfo(String appId, Integer storeId) throws ApiException {
        com.squareup.okhttp.Call call = getLoyaltyCampaignsForStoreValidateBeforeCall(appId, storeId, null, null);
        Type localVarReturnType = new TypeToken<RestApiArrayResultLoyaltyCampaign>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets loyalty campaigns for store (asynchronously)
     * 
     * @param appId App Name Id (required)
     * @param storeId Store Id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLoyaltyCampaignsForStoreAsync(String appId, Integer storeId, final ApiCallback<RestApiArrayResultLoyaltyCampaign> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLoyaltyCampaignsForStoreValidateBeforeCall(appId, storeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiArrayResultLoyaltyCampaign>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getRetentionCampaignsForApp
     * @param appId App Name Id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRetentionCampaignsForAppCall(String appId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/campaigns/retention"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRetentionCampaignsForAppValidateBeforeCall(String appId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getRetentionCampaignsForApp(Async)");
        }
        

        com.squareup.okhttp.Call call = getRetentionCampaignsForAppCall(appId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets retention campaigns for app
     * 
     * @param appId App Name Id (required)
     * @return RestApiArrayResultRetentionCampaign
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiArrayResultRetentionCampaign getRetentionCampaignsForApp(String appId) throws ApiException {
        ApiResponse<RestApiArrayResultRetentionCampaign> resp = getRetentionCampaignsForAppWithHttpInfo(appId);
        return resp.getData();
    }

    /**
     * Gets retention campaigns for app
     * 
     * @param appId App Name Id (required)
     * @return ApiResponse&lt;RestApiArrayResultRetentionCampaign&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiArrayResultRetentionCampaign> getRetentionCampaignsForAppWithHttpInfo(String appId) throws ApiException {
        com.squareup.okhttp.Call call = getRetentionCampaignsForAppValidateBeforeCall(appId, null, null);
        Type localVarReturnType = new TypeToken<RestApiArrayResultRetentionCampaign>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets retention campaigns for app (asynchronously)
     * 
     * @param appId App Name Id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRetentionCampaignsForAppAsync(String appId, final ApiCallback<RestApiArrayResultRetentionCampaign> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRetentionCampaignsForAppValidateBeforeCall(appId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiArrayResultRetentionCampaign>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getRetentionCampaignsForStore
     * @param appId App Name Id (required)
     * @param storeId Store Id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRetentionCampaignsForStoreCall(String appId, Integer storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/campaigns/retention/{storeId}"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRetentionCampaignsForStoreValidateBeforeCall(String appId, Integer storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getRetentionCampaignsForStore(Async)");
        }
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling getRetentionCampaignsForStore(Async)");
        }
        

        com.squareup.okhttp.Call call = getRetentionCampaignsForStoreCall(appId, storeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets retention campaigns for store
     * 
     * @param appId App Name Id (required)
     * @param storeId Store Id (required)
     * @return RestApiArrayResultRetentionCampaign
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiArrayResultRetentionCampaign getRetentionCampaignsForStore(String appId, Integer storeId) throws ApiException {
        ApiResponse<RestApiArrayResultRetentionCampaign> resp = getRetentionCampaignsForStoreWithHttpInfo(appId, storeId);
        return resp.getData();
    }

    /**
     * Gets retention campaigns for store
     * 
     * @param appId App Name Id (required)
     * @param storeId Store Id (required)
     * @return ApiResponse&lt;RestApiArrayResultRetentionCampaign&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiArrayResultRetentionCampaign> getRetentionCampaignsForStoreWithHttpInfo(String appId, Integer storeId) throws ApiException {
        com.squareup.okhttp.Call call = getRetentionCampaignsForStoreValidateBeforeCall(appId, storeId, null, null);
        Type localVarReturnType = new TypeToken<RestApiArrayResultRetentionCampaign>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets retention campaigns for store (asynchronously)
     * 
     * @param appId App Name Id (required)
     * @param storeId Store Id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRetentionCampaignsForStoreAsync(String appId, Integer storeId, final ApiCallback<RestApiArrayResultRetentionCampaign> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRetentionCampaignsForStoreValidateBeforeCall(appId, storeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiArrayResultRetentionCampaign>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getStoreList
     * @param appId App Name Id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getStoreListCall(String appId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/campaigns/stores"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStoreListValidateBeforeCall(String appId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getStoreList(Async)");
        }
        

        com.squareup.okhttp.Call call = getStoreListCall(appId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets list of stores for app
     * 
     * @param appId App Name Id (required)
     * @return RestApiArrayResultStoreListItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiArrayResultStoreListItem getStoreList(String appId) throws ApiException {
        ApiResponse<RestApiArrayResultStoreListItem> resp = getStoreListWithHttpInfo(appId);
        return resp.getData();
    }

    /**
     * Gets list of stores for app
     * 
     * @param appId App Name Id (required)
     * @return ApiResponse&lt;RestApiArrayResultStoreListItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiArrayResultStoreListItem> getStoreListWithHttpInfo(String appId) throws ApiException {
        com.squareup.okhttp.Call call = getStoreListValidateBeforeCall(appId, null, null);
        Type localVarReturnType = new TypeToken<RestApiArrayResultStoreListItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets list of stores for app (asynchronously)
     * 
     * @param appId App Name Id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStoreListAsync(String appId, final ApiCallback<RestApiArrayResultStoreListItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStoreListValidateBeforeCall(appId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiArrayResultStoreListItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for removeCampaign
     * @param appId App Name Id (required)
     * @param campaignId Campaign Id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call removeCampaignCall(String appId, Integer campaignId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/campaigns/{campaignId}"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "campaignId" + "\\}", apiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call removeCampaignValidateBeforeCall(String appId, Integer campaignId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling removeCampaign(Async)");
        }
        
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling removeCampaign(Async)");
        }
        

        com.squareup.okhttp.Call call = removeCampaignCall(appId, campaignId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Deletes a campaign
     * 
     * @param appId App Name Id (required)
     * @param campaignId Campaign Id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void removeCampaign(String appId, Integer campaignId) throws ApiException {
        removeCampaignWithHttpInfo(appId, campaignId);
    }

    /**
     * Deletes a campaign
     * 
     * @param appId App Name Id (required)
     * @param campaignId Campaign Id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> removeCampaignWithHttpInfo(String appId, Integer campaignId) throws ApiException {
        com.squareup.okhttp.Call call = removeCampaignValidateBeforeCall(appId, campaignId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Deletes a campaign (asynchronously)
     * 
     * @param appId App Name Id (required)
     * @param campaignId Campaign Id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeCampaignAsync(String appId, Integer campaignId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeCampaignValidateBeforeCall(appId, campaignId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateLoyaltyCampaign
     * @param appId App Name Id (required)
     * @param campaignId Loyalty campaign Id (required)
     * @param campaign Loyalty campaign details (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateLoyaltyCampaignCall(String appId, Integer campaignId, LoyaltyCampaignBase campaign, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = campaign;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/campaigns/loyalty/{campaignId}"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "campaignId" + "\\}", apiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateLoyaltyCampaignValidateBeforeCall(String appId, Integer campaignId, LoyaltyCampaignBase campaign, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling updateLoyaltyCampaign(Async)");
        }
        
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling updateLoyaltyCampaign(Async)");
        }
        
        // verify the required parameter 'campaign' is set
        if (campaign == null) {
            throw new ApiException("Missing the required parameter 'campaign' when calling updateLoyaltyCampaign(Async)");
        }
        

        com.squareup.okhttp.Call call = updateLoyaltyCampaignCall(appId, campaignId, campaign, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updates loyalty campaign
     * 
     * @param appId App Name Id (required)
     * @param campaignId Loyalty campaign Id (required)
     * @param campaign Loyalty campaign details (required)
     * @return RestApiResultLoyaltyCampaign
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultLoyaltyCampaign updateLoyaltyCampaign(String appId, Integer campaignId, LoyaltyCampaignBase campaign) throws ApiException {
        ApiResponse<RestApiResultLoyaltyCampaign> resp = updateLoyaltyCampaignWithHttpInfo(appId, campaignId, campaign);
        return resp.getData();
    }

    /**
     * Updates loyalty campaign
     * 
     * @param appId App Name Id (required)
     * @param campaignId Loyalty campaign Id (required)
     * @param campaign Loyalty campaign details (required)
     * @return ApiResponse&lt;RestApiResultLoyaltyCampaign&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultLoyaltyCampaign> updateLoyaltyCampaignWithHttpInfo(String appId, Integer campaignId, LoyaltyCampaignBase campaign) throws ApiException {
        com.squareup.okhttp.Call call = updateLoyaltyCampaignValidateBeforeCall(appId, campaignId, campaign, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultLoyaltyCampaign>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates loyalty campaign (asynchronously)
     * 
     * @param appId App Name Id (required)
     * @param campaignId Loyalty campaign Id (required)
     * @param campaign Loyalty campaign details (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateLoyaltyCampaignAsync(String appId, Integer campaignId, LoyaltyCampaignBase campaign, final ApiCallback<RestApiResultLoyaltyCampaign> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateLoyaltyCampaignValidateBeforeCall(appId, campaignId, campaign, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultLoyaltyCampaign>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateRetentionCampaign
     * @param appId App Name Id (required)
     * @param campaignId Retention campaign Id (required)
     * @param campaign Retention campaign details (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateRetentionCampaignCall(String appId, Integer campaignId, RetentionCampaignBase campaign, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = campaign;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/campaigns/retention/{campaignId}"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "campaignId" + "\\}", apiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateRetentionCampaignValidateBeforeCall(String appId, Integer campaignId, RetentionCampaignBase campaign, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling updateRetentionCampaign(Async)");
        }
        
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling updateRetentionCampaign(Async)");
        }
        
        // verify the required parameter 'campaign' is set
        if (campaign == null) {
            throw new ApiException("Missing the required parameter 'campaign' when calling updateRetentionCampaign(Async)");
        }
        

        com.squareup.okhttp.Call call = updateRetentionCampaignCall(appId, campaignId, campaign, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updates retention campaign
     * 
     * @param appId App Name Id (required)
     * @param campaignId Retention campaign Id (required)
     * @param campaign Retention campaign details (required)
     * @return RestApiResultRetentionCampaign
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultRetentionCampaign updateRetentionCampaign(String appId, Integer campaignId, RetentionCampaignBase campaign) throws ApiException {
        ApiResponse<RestApiResultRetentionCampaign> resp = updateRetentionCampaignWithHttpInfo(appId, campaignId, campaign);
        return resp.getData();
    }

    /**
     * Updates retention campaign
     * 
     * @param appId App Name Id (required)
     * @param campaignId Retention campaign Id (required)
     * @param campaign Retention campaign details (required)
     * @return ApiResponse&lt;RestApiResultRetentionCampaign&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultRetentionCampaign> updateRetentionCampaignWithHttpInfo(String appId, Integer campaignId, RetentionCampaignBase campaign) throws ApiException {
        com.squareup.okhttp.Call call = updateRetentionCampaignValidateBeforeCall(appId, campaignId, campaign, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultRetentionCampaign>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates retention campaign (asynchronously)
     * 
     * @param appId App Name Id (required)
     * @param campaignId Retention campaign Id (required)
     * @param campaign Retention campaign details (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateRetentionCampaignAsync(String appId, Integer campaignId, RetentionCampaignBase campaign, final ApiCallback<RestApiResultRetentionCampaign> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateRetentionCampaignValidateBeforeCall(appId, campaignId, campaign, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultRetentionCampaign>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
