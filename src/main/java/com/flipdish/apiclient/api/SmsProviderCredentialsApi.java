/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.flipdish.apiclient.api;

import com.flipdish.apiclient.ApiCallback;
import com.flipdish.apiclient.ApiClient;
import com.flipdish.apiclient.ApiException;
import com.flipdish.apiclient.ApiResponse;
import com.flipdish.apiclient.Configuration;
import com.flipdish.apiclient.Pair;
import com.flipdish.apiclient.ProgressRequestBody;
import com.flipdish.apiclient.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.flipdish.apiclient.model.RestApiArrayResultSmsProviderCredential;
import com.flipdish.apiclient.model.RestApiErrorResult;
import com.flipdish.apiclient.model.RestApiForbiddenResult;
import com.flipdish.apiclient.model.RestApiResultSmsProviderCredential;
import com.flipdish.apiclient.model.RestApiUnauthorizedResult;
import com.flipdish.apiclient.model.SmsProviderCredential;
import com.flipdish.apiclient.model.SmsProviderCredentialUpdateRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SmsProviderCredentialsApi {
    private ApiClient apiClient;
    private Map<String, String> headers;

    public SmsProviderCredentialsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SmsProviderCredentialsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public void setHeadersOverrides(Map<String, String> headers) {
        this.headers = headers;
    }

    /**
     * Build call for getBrandSmsProviderCredentialByServiceType
     * @param orgId  (required)
     * @param brandId  (required)
     * @param serviceType  (required)
     * @param withFallback  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBrandSmsProviderCredentialByServiceTypeCall(String orgId, String brandId, String serviceType, Boolean withFallback, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/sms-providers/orgs/{orgId}/brands/{brandId}/provider-credentials/{serviceType}"
            .replaceAll("\\{" + "orgId" + "\\}", apiClient.escapeString(orgId.toString()))
            .replaceAll("\\{" + "brandId" + "\\}", apiClient.escapeString(brandId.toString()))
            .replaceAll("\\{" + "serviceType" + "\\}", apiClient.escapeString(serviceType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (withFallback != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("withFallback", withFallback));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBrandSmsProviderCredentialByServiceTypeValidateBeforeCall(String orgId, String brandId, String serviceType, Boolean withFallback, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getBrandSmsProviderCredentialByServiceType(Async)");
        }
        
        // verify the required parameter 'brandId' is set
        if (brandId == null) {
            throw new ApiException("Missing the required parameter 'brandId' when calling getBrandSmsProviderCredentialByServiceType(Async)");
        }
        
        // verify the required parameter 'serviceType' is set
        if (serviceType == null) {
            throw new ApiException("Missing the required parameter 'serviceType' when calling getBrandSmsProviderCredentialByServiceType(Async)");
        }
        

        com.squareup.okhttp.Call call = getBrandSmsProviderCredentialByServiceTypeCall(orgId, brandId, serviceType, withFallback, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param orgId  (required)
     * @param brandId  (required)
     * @param serviceType  (required)
     * @param withFallback  (optional)
     * @return RestApiResultSmsProviderCredential
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultSmsProviderCredential getBrandSmsProviderCredentialByServiceType(String orgId, String brandId, String serviceType, Boolean withFallback) throws ApiException {
        ApiResponse<RestApiResultSmsProviderCredential> resp = getBrandSmsProviderCredentialByServiceTypeWithHttpInfo(orgId, brandId, serviceType, withFallback);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param orgId  (required)
     * @param brandId  (required)
     * @param serviceType  (required)
     * @param withFallback  (optional)
     * @return ApiResponse&lt;RestApiResultSmsProviderCredential&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultSmsProviderCredential> getBrandSmsProviderCredentialByServiceTypeWithHttpInfo(String orgId, String brandId, String serviceType, Boolean withFallback) throws ApiException {
        com.squareup.okhttp.Call call = getBrandSmsProviderCredentialByServiceTypeValidateBeforeCall(orgId, brandId, serviceType, withFallback, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultSmsProviderCredential>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param orgId  (required)
     * @param brandId  (required)
     * @param serviceType  (required)
     * @param withFallback  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBrandSmsProviderCredentialByServiceTypeAsync(String orgId, String brandId, String serviceType, Boolean withFallback, final ApiCallback<RestApiResultSmsProviderCredential> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBrandSmsProviderCredentialByServiceTypeValidateBeforeCall(orgId, brandId, serviceType, withFallback, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultSmsProviderCredential>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBrandSmsProviderCredentials
     * @param orgId  (required)
     * @param brandId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBrandSmsProviderCredentialsCall(String orgId, String brandId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/sms-providers/orgs/{orgId}/brands/{brandId}/provider-credentials"
            .replaceAll("\\{" + "orgId" + "\\}", apiClient.escapeString(orgId.toString()))
            .replaceAll("\\{" + "brandId" + "\\}", apiClient.escapeString(brandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBrandSmsProviderCredentialsValidateBeforeCall(String orgId, String brandId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getBrandSmsProviderCredentials(Async)");
        }
        
        // verify the required parameter 'brandId' is set
        if (brandId == null) {
            throw new ApiException("Missing the required parameter 'brandId' when calling getBrandSmsProviderCredentials(Async)");
        }
        

        com.squareup.okhttp.Call call = getBrandSmsProviderCredentialsCall(orgId, brandId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param orgId  (required)
     * @param brandId  (required)
     * @return RestApiArrayResultSmsProviderCredential
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiArrayResultSmsProviderCredential getBrandSmsProviderCredentials(String orgId, String brandId) throws ApiException {
        ApiResponse<RestApiArrayResultSmsProviderCredential> resp = getBrandSmsProviderCredentialsWithHttpInfo(orgId, brandId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param orgId  (required)
     * @param brandId  (required)
     * @return ApiResponse&lt;RestApiArrayResultSmsProviderCredential&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiArrayResultSmsProviderCredential> getBrandSmsProviderCredentialsWithHttpInfo(String orgId, String brandId) throws ApiException {
        com.squareup.okhttp.Call call = getBrandSmsProviderCredentialsValidateBeforeCall(orgId, brandId, null, null);
        Type localVarReturnType = new TypeToken<RestApiArrayResultSmsProviderCredential>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param orgId  (required)
     * @param brandId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBrandSmsProviderCredentialsAsync(String orgId, String brandId, final ApiCallback<RestApiArrayResultSmsProviderCredential> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBrandSmsProviderCredentialsValidateBeforeCall(orgId, brandId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiArrayResultSmsProviderCredential>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for smsProviderCredentialDelete
     * @param orgId  (required)
     * @param brandId  (required)
     * @param serviceType  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call smsProviderCredentialDeleteCall(String orgId, String brandId, String serviceType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/sms-providers/orgs/{orgId}/brands/{brandId}/provider-credentials/{serviceType}"
            .replaceAll("\\{" + "orgId" + "\\}", apiClient.escapeString(orgId.toString()))
            .replaceAll("\\{" + "brandId" + "\\}", apiClient.escapeString(brandId.toString()))
            .replaceAll("\\{" + "serviceType" + "\\}", apiClient.escapeString(serviceType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call smsProviderCredentialDeleteValidateBeforeCall(String orgId, String brandId, String serviceType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling smsProviderCredentialDelete(Async)");
        }
        
        // verify the required parameter 'brandId' is set
        if (brandId == null) {
            throw new ApiException("Missing the required parameter 'brandId' when calling smsProviderCredentialDelete(Async)");
        }
        
        // verify the required parameter 'serviceType' is set
        if (serviceType == null) {
            throw new ApiException("Missing the required parameter 'serviceType' when calling smsProviderCredentialDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = smsProviderCredentialDeleteCall(orgId, brandId, serviceType, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param orgId  (required)
     * @param brandId  (required)
     * @param serviceType  (required)
     * @return RestApiResultSmsProviderCredential
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultSmsProviderCredential smsProviderCredentialDelete(String orgId, String brandId, String serviceType) throws ApiException {
        ApiResponse<RestApiResultSmsProviderCredential> resp = smsProviderCredentialDeleteWithHttpInfo(orgId, brandId, serviceType);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param orgId  (required)
     * @param brandId  (required)
     * @param serviceType  (required)
     * @return ApiResponse&lt;RestApiResultSmsProviderCredential&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultSmsProviderCredential> smsProviderCredentialDeleteWithHttpInfo(String orgId, String brandId, String serviceType) throws ApiException {
        com.squareup.okhttp.Call call = smsProviderCredentialDeleteValidateBeforeCall(orgId, brandId, serviceType, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultSmsProviderCredential>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param orgId  (required)
     * @param brandId  (required)
     * @param serviceType  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call smsProviderCredentialDeleteAsync(String orgId, String brandId, String serviceType, final ApiCallback<RestApiResultSmsProviderCredential> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = smsProviderCredentialDeleteValidateBeforeCall(orgId, brandId, serviceType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultSmsProviderCredential>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for smsProviderCredentialUpdate
     * @param orgId  (required)
     * @param brandId  (required)
     * @param serviceType  (required)
     * @param credential  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call smsProviderCredentialUpdateCall(String orgId, String brandId, String serviceType, SmsProviderCredentialUpdateRequest credential, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = credential;

        // create path and map variables
        String localVarPath = "/api/v1.0/sms-providers/orgs/{orgId}/brands/{brandId}/provider-credentials/{serviceType}"
            .replaceAll("\\{" + "orgId" + "\\}", apiClient.escapeString(orgId.toString()))
            .replaceAll("\\{" + "brandId" + "\\}", apiClient.escapeString(brandId.toString()))
            .replaceAll("\\{" + "serviceType" + "\\}", apiClient.escapeString(serviceType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call smsProviderCredentialUpdateValidateBeforeCall(String orgId, String brandId, String serviceType, SmsProviderCredentialUpdateRequest credential, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling smsProviderCredentialUpdate(Async)");
        }
        
        // verify the required parameter 'brandId' is set
        if (brandId == null) {
            throw new ApiException("Missing the required parameter 'brandId' when calling smsProviderCredentialUpdate(Async)");
        }
        
        // verify the required parameter 'serviceType' is set
        if (serviceType == null) {
            throw new ApiException("Missing the required parameter 'serviceType' when calling smsProviderCredentialUpdate(Async)");
        }
        
        // verify the required parameter 'credential' is set
        if (credential == null) {
            throw new ApiException("Missing the required parameter 'credential' when calling smsProviderCredentialUpdate(Async)");
        }
        

        com.squareup.okhttp.Call call = smsProviderCredentialUpdateCall(orgId, brandId, serviceType, credential, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param orgId  (required)
     * @param brandId  (required)
     * @param serviceType  (required)
     * @param credential  (required)
     * @return RestApiResultSmsProviderCredential
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultSmsProviderCredential smsProviderCredentialUpdate(String orgId, String brandId, String serviceType, SmsProviderCredentialUpdateRequest credential) throws ApiException {
        ApiResponse<RestApiResultSmsProviderCredential> resp = smsProviderCredentialUpdateWithHttpInfo(orgId, brandId, serviceType, credential);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param orgId  (required)
     * @param brandId  (required)
     * @param serviceType  (required)
     * @param credential  (required)
     * @return ApiResponse&lt;RestApiResultSmsProviderCredential&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultSmsProviderCredential> smsProviderCredentialUpdateWithHttpInfo(String orgId, String brandId, String serviceType, SmsProviderCredentialUpdateRequest credential) throws ApiException {
        com.squareup.okhttp.Call call = smsProviderCredentialUpdateValidateBeforeCall(orgId, brandId, serviceType, credential, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultSmsProviderCredential>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param orgId  (required)
     * @param brandId  (required)
     * @param serviceType  (required)
     * @param credential  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call smsProviderCredentialUpdateAsync(String orgId, String brandId, String serviceType, SmsProviderCredentialUpdateRequest credential, final ApiCallback<RestApiResultSmsProviderCredential> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = smsProviderCredentialUpdateValidateBeforeCall(orgId, brandId, serviceType, credential, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultSmsProviderCredential>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for smsProviderCredentialsBulkUpsert
     * @param credentials  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call smsProviderCredentialsBulkUpsertCall(List<SmsProviderCredential> credentials, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = credentials;

        // create path and map variables
        String localVarPath = "/api/v1.0/sms-providers/bulk-upsert";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call smsProviderCredentialsBulkUpsertValidateBeforeCall(List<SmsProviderCredential> credentials, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'credentials' is set
        if (credentials == null) {
            throw new ApiException("Missing the required parameter 'credentials' when calling smsProviderCredentialsBulkUpsert(Async)");
        }
        

        com.squareup.okhttp.Call call = smsProviderCredentialsBulkUpsertCall(credentials, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param credentials  (required)
     * @return RestApiArrayResultSmsProviderCredential
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiArrayResultSmsProviderCredential smsProviderCredentialsBulkUpsert(List<SmsProviderCredential> credentials) throws ApiException {
        ApiResponse<RestApiArrayResultSmsProviderCredential> resp = smsProviderCredentialsBulkUpsertWithHttpInfo(credentials);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param credentials  (required)
     * @return ApiResponse&lt;RestApiArrayResultSmsProviderCredential&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiArrayResultSmsProviderCredential> smsProviderCredentialsBulkUpsertWithHttpInfo(List<SmsProviderCredential> credentials) throws ApiException {
        com.squareup.okhttp.Call call = smsProviderCredentialsBulkUpsertValidateBeforeCall(credentials, null, null);
        Type localVarReturnType = new TypeToken<RestApiArrayResultSmsProviderCredential>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param credentials  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call smsProviderCredentialsBulkUpsertAsync(List<SmsProviderCredential> credentials, final ApiCallback<RestApiArrayResultSmsProviderCredential> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = smsProviderCredentialsBulkUpsertValidateBeforeCall(credentials, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiArrayResultSmsProviderCredential>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
