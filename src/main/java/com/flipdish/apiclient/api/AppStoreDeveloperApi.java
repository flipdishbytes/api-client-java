/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.flipdish.apiclient.api;

import com.flipdish.apiclient.ApiCallback;
import com.flipdish.apiclient.ApiClient;
import com.flipdish.apiclient.ApiException;
import com.flipdish.apiclient.ApiResponse;
import com.flipdish.apiclient.Configuration;
import com.flipdish.apiclient.Pair;
import com.flipdish.apiclient.ProgressRequestBody;
import com.flipdish.apiclient.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.flipdish.apiclient.model.CreateAppStoreApp;
import java.io.File;
import com.flipdish.apiclient.model.RestApiErrorResult;
import com.flipdish.apiclient.model.RestApiForbiddenResult;
import com.flipdish.apiclient.model.RestApiResultAppStoreApp;
import com.flipdish.apiclient.model.RestApiStringResult;
import com.flipdish.apiclient.model.RestApiUnauthorizedResult;
import com.flipdish.apiclient.model.UpdateAppStoreApp;
import com.flipdish.apiclient.model.UpdateAppStoreAppExternalProduct;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AppStoreDeveloperApi {
    private ApiClient apiClient;

    public AppStoreDeveloperApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AppStoreDeveloperApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for appVerificationUpdate
     * @param oauthAppId  (required)
     * @param appStoreAppId  (required)
     * @param verificationStatus  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call appVerificationUpdateCall(String oauthAppId, String appStoreAppId, String verificationStatus, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/oauthclients/{oauthAppId}/appstore/apps/{appStoreAppId}/verification"
            .replaceAll("\\{" + "oauthAppId" + "\\}", apiClient.escapeString(oauthAppId.toString()))
            .replaceAll("\\{" + "appStoreAppId" + "\\}", apiClient.escapeString(appStoreAppId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (verificationStatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("verificationStatus", verificationStatus));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call appVerificationUpdateValidateBeforeCall(String oauthAppId, String appStoreAppId, String verificationStatus, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'oauthAppId' is set
        if (oauthAppId == null) {
            throw new ApiException("Missing the required parameter 'oauthAppId' when calling appVerificationUpdate(Async)");
        }
        
        // verify the required parameter 'appStoreAppId' is set
        if (appStoreAppId == null) {
            throw new ApiException("Missing the required parameter 'appStoreAppId' when calling appVerificationUpdate(Async)");
        }
        
        // verify the required parameter 'verificationStatus' is set
        if (verificationStatus == null) {
            throw new ApiException("Missing the required parameter 'verificationStatus' when calling appVerificationUpdate(Async)");
        }
        

        com.squareup.okhttp.Call call = appVerificationUpdateCall(oauthAppId, appStoreAppId, verificationStatus, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param oauthAppId  (required)
     * @param appStoreAppId  (required)
     * @param verificationStatus  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void appVerificationUpdate(String oauthAppId, String appStoreAppId, String verificationStatus) throws ApiException {
        appVerificationUpdateWithHttpInfo(oauthAppId, appStoreAppId, verificationStatus);
    }

    /**
     * 
     * 
     * @param oauthAppId  (required)
     * @param appStoreAppId  (required)
     * @param verificationStatus  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> appVerificationUpdateWithHttpInfo(String oauthAppId, String appStoreAppId, String verificationStatus) throws ApiException {
        com.squareup.okhttp.Call call = appVerificationUpdateValidateBeforeCall(oauthAppId, appStoreAppId, verificationStatus, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param oauthAppId  (required)
     * @param appStoreAppId  (required)
     * @param verificationStatus  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call appVerificationUpdateAsync(String oauthAppId, String appStoreAppId, String verificationStatus, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = appVerificationUpdateValidateBeforeCall(oauthAppId, appStoreAppId, verificationStatus, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createAppStoreApp
     * @param oauthAppId  (required)
     * @param createAppStoreApp  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createAppStoreAppCall(String oauthAppId, CreateAppStoreApp createAppStoreApp, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = createAppStoreApp;

        // create path and map variables
        String localVarPath = "/api/v1.0/oauthclients/{oauthAppId}/appstore/apps"
            .replaceAll("\\{" + "oauthAppId" + "\\}", apiClient.escapeString(oauthAppId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createAppStoreAppValidateBeforeCall(String oauthAppId, CreateAppStoreApp createAppStoreApp, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'oauthAppId' is set
        if (oauthAppId == null) {
            throw new ApiException("Missing the required parameter 'oauthAppId' when calling createAppStoreApp(Async)");
        }
        
        // verify the required parameter 'createAppStoreApp' is set
        if (createAppStoreApp == null) {
            throw new ApiException("Missing the required parameter 'createAppStoreApp' when calling createAppStoreApp(Async)");
        }
        

        com.squareup.okhttp.Call call = createAppStoreAppCall(oauthAppId, createAppStoreApp, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param oauthAppId  (required)
     * @param createAppStoreApp  (required)
     * @return RestApiResultAppStoreApp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultAppStoreApp createAppStoreApp(String oauthAppId, CreateAppStoreApp createAppStoreApp) throws ApiException {
        ApiResponse<RestApiResultAppStoreApp> resp = createAppStoreAppWithHttpInfo(oauthAppId, createAppStoreApp);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param oauthAppId  (required)
     * @param createAppStoreApp  (required)
     * @return ApiResponse&lt;RestApiResultAppStoreApp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultAppStoreApp> createAppStoreAppWithHttpInfo(String oauthAppId, CreateAppStoreApp createAppStoreApp) throws ApiException {
        com.squareup.okhttp.Call call = createAppStoreAppValidateBeforeCall(oauthAppId, createAppStoreApp, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultAppStoreApp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param oauthAppId  (required)
     * @param createAppStoreApp  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createAppStoreAppAsync(String oauthAppId, CreateAppStoreApp createAppStoreApp, final ApiCallback<RestApiResultAppStoreApp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createAppStoreAppValidateBeforeCall(oauthAppId, createAppStoreApp, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultAppStoreApp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteAppStoreApp
     * @param oauthAppId  (required)
     * @param appStoreAppId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAppStoreAppCall(String oauthAppId, String appStoreAppId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/oauthclients/{oauthAppId}/appstore/apps/{appStoreAppId}"
            .replaceAll("\\{" + "oauthAppId" + "\\}", apiClient.escapeString(oauthAppId.toString()))
            .replaceAll("\\{" + "appStoreAppId" + "\\}", apiClient.escapeString(appStoreAppId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAppStoreAppValidateBeforeCall(String oauthAppId, String appStoreAppId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'oauthAppId' is set
        if (oauthAppId == null) {
            throw new ApiException("Missing the required parameter 'oauthAppId' when calling deleteAppStoreApp(Async)");
        }
        
        // verify the required parameter 'appStoreAppId' is set
        if (appStoreAppId == null) {
            throw new ApiException("Missing the required parameter 'appStoreAppId' when calling deleteAppStoreApp(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteAppStoreAppCall(oauthAppId, appStoreAppId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param oauthAppId  (required)
     * @param appStoreAppId  (required)
     * @return RestApiStringResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiStringResult deleteAppStoreApp(String oauthAppId, String appStoreAppId) throws ApiException {
        ApiResponse<RestApiStringResult> resp = deleteAppStoreAppWithHttpInfo(oauthAppId, appStoreAppId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param oauthAppId  (required)
     * @param appStoreAppId  (required)
     * @return ApiResponse&lt;RestApiStringResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiStringResult> deleteAppStoreAppWithHttpInfo(String oauthAppId, String appStoreAppId) throws ApiException {
        com.squareup.okhttp.Call call = deleteAppStoreAppValidateBeforeCall(oauthAppId, appStoreAppId, null, null);
        Type localVarReturnType = new TypeToken<RestApiStringResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param oauthAppId  (required)
     * @param appStoreAppId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAppStoreAppAsync(String oauthAppId, String appStoreAppId, final ApiCallback<RestApiStringResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAppStoreAppValidateBeforeCall(oauthAppId, appStoreAppId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiStringResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAppExternalProduct
     * @param oauthAppId  (required)
     * @param appStoreAppId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAppExternalProductCall(String oauthAppId, String appStoreAppId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/oauthclients/{oauthAppId}/appstore/apps/{appStoreAppId}/external_product"
            .replaceAll("\\{" + "oauthAppId" + "\\}", apiClient.escapeString(oauthAppId.toString()))
            .replaceAll("\\{" + "appStoreAppId" + "\\}", apiClient.escapeString(appStoreAppId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAppExternalProductValidateBeforeCall(String oauthAppId, String appStoreAppId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'oauthAppId' is set
        if (oauthAppId == null) {
            throw new ApiException("Missing the required parameter 'oauthAppId' when calling getAppExternalProduct(Async)");
        }
        
        // verify the required parameter 'appStoreAppId' is set
        if (appStoreAppId == null) {
            throw new ApiException("Missing the required parameter 'appStoreAppId' when calling getAppExternalProduct(Async)");
        }
        

        com.squareup.okhttp.Call call = getAppExternalProductCall(oauthAppId, appStoreAppId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param oauthAppId  (required)
     * @param appStoreAppId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getAppExternalProduct(String oauthAppId, String appStoreAppId) throws ApiException {
        getAppExternalProductWithHttpInfo(oauthAppId, appStoreAppId);
    }

    /**
     * 
     * 
     * @param oauthAppId  (required)
     * @param appStoreAppId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getAppExternalProductWithHttpInfo(String oauthAppId, String appStoreAppId) throws ApiException {
        com.squareup.okhttp.Call call = getAppExternalProductValidateBeforeCall(oauthAppId, appStoreAppId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param oauthAppId  (required)
     * @param appStoreAppId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAppExternalProductAsync(String oauthAppId, String appStoreAppId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAppExternalProductValidateBeforeCall(oauthAppId, appStoreAppId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getExternalFunctionSigningKey
     * @param oauthAppId  (required)
     * @param appStoreAppId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getExternalFunctionSigningKeyCall(String oauthAppId, String appStoreAppId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/oauthclients/{oauthAppId}/appstore/apps/{appStoreAppId}/external_function_signing_key"
            .replaceAll("\\{" + "oauthAppId" + "\\}", apiClient.escapeString(oauthAppId.toString()))
            .replaceAll("\\{" + "appStoreAppId" + "\\}", apiClient.escapeString(appStoreAppId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getExternalFunctionSigningKeyValidateBeforeCall(String oauthAppId, String appStoreAppId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'oauthAppId' is set
        if (oauthAppId == null) {
            throw new ApiException("Missing the required parameter 'oauthAppId' when calling getExternalFunctionSigningKey(Async)");
        }
        
        // verify the required parameter 'appStoreAppId' is set
        if (appStoreAppId == null) {
            throw new ApiException("Missing the required parameter 'appStoreAppId' when calling getExternalFunctionSigningKey(Async)");
        }
        

        com.squareup.okhttp.Call call = getExternalFunctionSigningKeyCall(oauthAppId, appStoreAppId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param oauthAppId  (required)
     * @param appStoreAppId  (required)
     * @return RestApiStringResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiStringResult getExternalFunctionSigningKey(String oauthAppId, String appStoreAppId) throws ApiException {
        ApiResponse<RestApiStringResult> resp = getExternalFunctionSigningKeyWithHttpInfo(oauthAppId, appStoreAppId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param oauthAppId  (required)
     * @param appStoreAppId  (required)
     * @return ApiResponse&lt;RestApiStringResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiStringResult> getExternalFunctionSigningKeyWithHttpInfo(String oauthAppId, String appStoreAppId) throws ApiException {
        com.squareup.okhttp.Call call = getExternalFunctionSigningKeyValidateBeforeCall(oauthAppId, appStoreAppId, null, null);
        Type localVarReturnType = new TypeToken<RestApiStringResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param oauthAppId  (required)
     * @param appStoreAppId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getExternalFunctionSigningKeyAsync(String oauthAppId, String appStoreAppId, final ApiCallback<RestApiStringResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getExternalFunctionSigningKeyValidateBeforeCall(oauthAppId, appStoreAppId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiStringResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateAppStoreApp
     * @param oauthAppId  (required)
     * @param appStoreAppId  (required)
     * @param appStoreApp  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateAppStoreAppCall(String oauthAppId, String appStoreAppId, UpdateAppStoreApp appStoreApp, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = appStoreApp;

        // create path and map variables
        String localVarPath = "/api/v1.0/oauthclients/{oauthAppId}/appstore/apps/{appStoreAppId}"
            .replaceAll("\\{" + "oauthAppId" + "\\}", apiClient.escapeString(oauthAppId.toString()))
            .replaceAll("\\{" + "appStoreAppId" + "\\}", apiClient.escapeString(appStoreAppId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateAppStoreAppValidateBeforeCall(String oauthAppId, String appStoreAppId, UpdateAppStoreApp appStoreApp, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'oauthAppId' is set
        if (oauthAppId == null) {
            throw new ApiException("Missing the required parameter 'oauthAppId' when calling updateAppStoreApp(Async)");
        }
        
        // verify the required parameter 'appStoreAppId' is set
        if (appStoreAppId == null) {
            throw new ApiException("Missing the required parameter 'appStoreAppId' when calling updateAppStoreApp(Async)");
        }
        
        // verify the required parameter 'appStoreApp' is set
        if (appStoreApp == null) {
            throw new ApiException("Missing the required parameter 'appStoreApp' when calling updateAppStoreApp(Async)");
        }
        

        com.squareup.okhttp.Call call = updateAppStoreAppCall(oauthAppId, appStoreAppId, appStoreApp, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param oauthAppId  (required)
     * @param appStoreAppId  (required)
     * @param appStoreApp  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateAppStoreApp(String oauthAppId, String appStoreAppId, UpdateAppStoreApp appStoreApp) throws ApiException {
        updateAppStoreAppWithHttpInfo(oauthAppId, appStoreAppId, appStoreApp);
    }

    /**
     * 
     * 
     * @param oauthAppId  (required)
     * @param appStoreAppId  (required)
     * @param appStoreApp  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateAppStoreAppWithHttpInfo(String oauthAppId, String appStoreAppId, UpdateAppStoreApp appStoreApp) throws ApiException {
        com.squareup.okhttp.Call call = updateAppStoreAppValidateBeforeCall(oauthAppId, appStoreAppId, appStoreApp, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param oauthAppId  (required)
     * @param appStoreAppId  (required)
     * @param appStoreApp  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateAppStoreAppAsync(String oauthAppId, String appStoreAppId, UpdateAppStoreApp appStoreApp, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateAppStoreAppValidateBeforeCall(oauthAppId, appStoreAppId, appStoreApp, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateExternalProduct
     * @param oauthAppId  (required)
     * @param appStoreAppId  (required)
     * @param appStoreAppExternalProduct  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateExternalProductCall(String oauthAppId, String appStoreAppId, UpdateAppStoreAppExternalProduct appStoreAppExternalProduct, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = appStoreAppExternalProduct;

        // create path and map variables
        String localVarPath = "/api/v1.0/oauthclients/{oauthAppId}/appstore/apps/{appStoreAppId}/external_product"
            .replaceAll("\\{" + "oauthAppId" + "\\}", apiClient.escapeString(oauthAppId.toString()))
            .replaceAll("\\{" + "appStoreAppId" + "\\}", apiClient.escapeString(appStoreAppId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateExternalProductValidateBeforeCall(String oauthAppId, String appStoreAppId, UpdateAppStoreAppExternalProduct appStoreAppExternalProduct, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'oauthAppId' is set
        if (oauthAppId == null) {
            throw new ApiException("Missing the required parameter 'oauthAppId' when calling updateExternalProduct(Async)");
        }
        
        // verify the required parameter 'appStoreAppId' is set
        if (appStoreAppId == null) {
            throw new ApiException("Missing the required parameter 'appStoreAppId' when calling updateExternalProduct(Async)");
        }
        
        // verify the required parameter 'appStoreAppExternalProduct' is set
        if (appStoreAppExternalProduct == null) {
            throw new ApiException("Missing the required parameter 'appStoreAppExternalProduct' when calling updateExternalProduct(Async)");
        }
        

        com.squareup.okhttp.Call call = updateExternalProductCall(oauthAppId, appStoreAppId, appStoreAppExternalProduct, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param oauthAppId  (required)
     * @param appStoreAppId  (required)
     * @param appStoreAppExternalProduct  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateExternalProduct(String oauthAppId, String appStoreAppId, UpdateAppStoreAppExternalProduct appStoreAppExternalProduct) throws ApiException {
        updateExternalProductWithHttpInfo(oauthAppId, appStoreAppId, appStoreAppExternalProduct);
    }

    /**
     * 
     * 
     * @param oauthAppId  (required)
     * @param appStoreAppId  (required)
     * @param appStoreAppExternalProduct  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateExternalProductWithHttpInfo(String oauthAppId, String appStoreAppId, UpdateAppStoreAppExternalProduct appStoreAppExternalProduct) throws ApiException {
        com.squareup.okhttp.Call call = updateExternalProductValidateBeforeCall(oauthAppId, appStoreAppId, appStoreAppExternalProduct, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param oauthAppId  (required)
     * @param appStoreAppId  (required)
     * @param appStoreAppExternalProduct  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateExternalProductAsync(String oauthAppId, String appStoreAppId, UpdateAppStoreAppExternalProduct appStoreAppExternalProduct, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateExternalProductValidateBeforeCall(oauthAppId, appStoreAppId, appStoreAppExternalProduct, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for uploadAppStoreAppLogo
     * @param oauthAppId  (required)
     * @param appStoreAppId  (required)
     * @param image App Store App Logo (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call uploadAppStoreAppLogoCall(String oauthAppId, String appStoreAppId, File image, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/oauthclients/{oauthAppId}/appstore/apps/{appStoreAppId}/logo"
            .replaceAll("\\{" + "oauthAppId" + "\\}", apiClient.escapeString(oauthAppId.toString()))
            .replaceAll("\\{" + "appStoreAppId" + "\\}", apiClient.escapeString(appStoreAppId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (image != null)
        localVarFormParams.put("Image", image);

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call uploadAppStoreAppLogoValidateBeforeCall(String oauthAppId, String appStoreAppId, File image, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'oauthAppId' is set
        if (oauthAppId == null) {
            throw new ApiException("Missing the required parameter 'oauthAppId' when calling uploadAppStoreAppLogo(Async)");
        }
        
        // verify the required parameter 'appStoreAppId' is set
        if (appStoreAppId == null) {
            throw new ApiException("Missing the required parameter 'appStoreAppId' when calling uploadAppStoreAppLogo(Async)");
        }
        
        // verify the required parameter 'image' is set
        if (image == null) {
            throw new ApiException("Missing the required parameter 'image' when calling uploadAppStoreAppLogo(Async)");
        }
        

        com.squareup.okhttp.Call call = uploadAppStoreAppLogoCall(oauthAppId, appStoreAppId, image, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param oauthAppId  (required)
     * @param appStoreAppId  (required)
     * @param image App Store App Logo (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void uploadAppStoreAppLogo(String oauthAppId, String appStoreAppId, File image) throws ApiException {
        uploadAppStoreAppLogoWithHttpInfo(oauthAppId, appStoreAppId, image);
    }

    /**
     * 
     * 
     * @param oauthAppId  (required)
     * @param appStoreAppId  (required)
     * @param image App Store App Logo (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> uploadAppStoreAppLogoWithHttpInfo(String oauthAppId, String appStoreAppId, File image) throws ApiException {
        com.squareup.okhttp.Call call = uploadAppStoreAppLogoValidateBeforeCall(oauthAppId, appStoreAppId, image, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param oauthAppId  (required)
     * @param appStoreAppId  (required)
     * @param image App Store App Logo (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call uploadAppStoreAppLogoAsync(String oauthAppId, String appStoreAppId, File image, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = uploadAppStoreAppLogoValidateBeforeCall(oauthAppId, appStoreAppId, image, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
