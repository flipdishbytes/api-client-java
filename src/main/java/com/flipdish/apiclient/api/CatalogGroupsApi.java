/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.flipdish.apiclient.api;

import com.flipdish.apiclient.ApiCallback;
import com.flipdish.apiclient.ApiClient;
import com.flipdish.apiclient.ApiException;
import com.flipdish.apiclient.ApiResponse;
import com.flipdish.apiclient.Configuration;
import com.flipdish.apiclient.Pair;
import com.flipdish.apiclient.ProgressRequestBody;
import com.flipdish.apiclient.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.flipdish.apiclient.model.CatalogGroup;
import com.flipdish.apiclient.model.CreateCatalogGroup;
import com.flipdish.apiclient.model.RestApiErrorResult;
import com.flipdish.apiclient.model.RestApiForbiddenResult;
import com.flipdish.apiclient.model.RestApiPaginationResultCatalogGroup;
import com.flipdish.apiclient.model.RestApiResultCatalogGroup;
import com.flipdish.apiclient.model.RestApiUnauthorizedResult;
import com.flipdish.apiclient.model.UpdateCatalogGroup;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CatalogGroupsApi {
    private ApiClient apiClient;

    public CatalogGroupsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CatalogGroupsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for archiveCatalogGroup
     * @param appId  (required)
     * @param catalogGroupId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call archiveCatalogGroupCall(String appId, String catalogGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/catalog/groups/{catalogGroupId}/archive"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "catalogGroupId" + "\\}", apiClient.escapeString(catalogGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call archiveCatalogGroupValidateBeforeCall(String appId, String catalogGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling archiveCatalogGroup(Async)");
        }
        
        // verify the required parameter 'catalogGroupId' is set
        if (catalogGroupId == null) {
            throw new ApiException("Missing the required parameter 'catalogGroupId' when calling archiveCatalogGroup(Async)");
        }
        

        com.squareup.okhttp.Call call = archiveCatalogGroupCall(appId, catalogGroupId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Archive Catalog Group
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param appId  (required)
     * @param catalogGroupId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void archiveCatalogGroup(String appId, String catalogGroupId) throws ApiException {
        archiveCatalogGroupWithHttpInfo(appId, catalogGroupId);
    }

    /**
     * Archive Catalog Group
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param appId  (required)
     * @param catalogGroupId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> archiveCatalogGroupWithHttpInfo(String appId, String catalogGroupId) throws ApiException {
        com.squareup.okhttp.Call call = archiveCatalogGroupValidateBeforeCall(appId, catalogGroupId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Archive Catalog Group (asynchronously)
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param appId  (required)
     * @param catalogGroupId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call archiveCatalogGroupAsync(String appId, String catalogGroupId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = archiveCatalogGroupValidateBeforeCall(appId, catalogGroupId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createCatalogGroup
     * @param appId  (required)
     * @param createCatalogGroup  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createCatalogGroupCall(String appId, CreateCatalogGroup createCatalogGroup, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = createCatalogGroup;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/catalog/groups"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createCatalogGroupValidateBeforeCall(String appId, CreateCatalogGroup createCatalogGroup, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling createCatalogGroup(Async)");
        }
        
        // verify the required parameter 'createCatalogGroup' is set
        if (createCatalogGroup == null) {
            throw new ApiException("Missing the required parameter 'createCatalogGroup' when calling createCatalogGroup(Async)");
        }
        

        com.squareup.okhttp.Call call = createCatalogGroupCall(appId, createCatalogGroup, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a Catalog Group
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param appId  (required)
     * @param createCatalogGroup  (required)
     * @return RestApiResultCatalogGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultCatalogGroup createCatalogGroup(String appId, CreateCatalogGroup createCatalogGroup) throws ApiException {
        ApiResponse<RestApiResultCatalogGroup> resp = createCatalogGroupWithHttpInfo(appId, createCatalogGroup);
        return resp.getData();
    }

    /**
     * Create a Catalog Group
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param appId  (required)
     * @param createCatalogGroup  (required)
     * @return ApiResponse&lt;RestApiResultCatalogGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultCatalogGroup> createCatalogGroupWithHttpInfo(String appId, CreateCatalogGroup createCatalogGroup) throws ApiException {
        com.squareup.okhttp.Call call = createCatalogGroupValidateBeforeCall(appId, createCatalogGroup, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultCatalogGroup>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a Catalog Group (asynchronously)
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param appId  (required)
     * @param createCatalogGroup  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createCatalogGroupAsync(String appId, CreateCatalogGroup createCatalogGroup, final ApiCallback<RestApiResultCatalogGroup> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createCatalogGroupValidateBeforeCall(appId, createCatalogGroup, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultCatalogGroup>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for duplicateCatalogGroup
     * @param appId  (required)
     * @param catalogGroupId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call duplicateCatalogGroupCall(String appId, String catalogGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/catalog/groups/{catalogGroupId}/duplicate"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "catalogGroupId" + "\\}", apiClient.escapeString(catalogGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call duplicateCatalogGroupValidateBeforeCall(String appId, String catalogGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling duplicateCatalogGroup(Async)");
        }
        
        // verify the required parameter 'catalogGroupId' is set
        if (catalogGroupId == null) {
            throw new ApiException("Missing the required parameter 'catalogGroupId' when calling duplicateCatalogGroup(Async)");
        }
        

        com.squareup.okhttp.Call call = duplicateCatalogGroupCall(appId, catalogGroupId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Duplicate Catalog Group
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param appId  (required)
     * @param catalogGroupId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void duplicateCatalogGroup(String appId, String catalogGroupId) throws ApiException {
        duplicateCatalogGroupWithHttpInfo(appId, catalogGroupId);
    }

    /**
     * Duplicate Catalog Group
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param appId  (required)
     * @param catalogGroupId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> duplicateCatalogGroupWithHttpInfo(String appId, String catalogGroupId) throws ApiException {
        com.squareup.okhttp.Call call = duplicateCatalogGroupValidateBeforeCall(appId, catalogGroupId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Duplicate Catalog Group (asynchronously)
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param appId  (required)
     * @param catalogGroupId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call duplicateCatalogGroupAsync(String appId, String catalogGroupId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = duplicateCatalogGroupValidateBeforeCall(appId, catalogGroupId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getCatalogGroupById
     * @param appId  (required)
     * @param catalogGroupId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCatalogGroupByIdCall(String appId, String catalogGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/catalog/groups/{catalogGroupId}"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "catalogGroupId" + "\\}", apiClient.escapeString(catalogGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCatalogGroupByIdValidateBeforeCall(String appId, String catalogGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getCatalogGroupById(Async)");
        }
        
        // verify the required parameter 'catalogGroupId' is set
        if (catalogGroupId == null) {
            throw new ApiException("Missing the required parameter 'catalogGroupId' when calling getCatalogGroupById(Async)");
        }
        

        com.squareup.okhttp.Call call = getCatalogGroupByIdCall(appId, catalogGroupId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get group by Id
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param appId  (required)
     * @param catalogGroupId  (required)
     * @return CatalogGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CatalogGroup getCatalogGroupById(String appId, String catalogGroupId) throws ApiException {
        ApiResponse<CatalogGroup> resp = getCatalogGroupByIdWithHttpInfo(appId, catalogGroupId);
        return resp.getData();
    }

    /**
     * Get group by Id
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param appId  (required)
     * @param catalogGroupId  (required)
     * @return ApiResponse&lt;CatalogGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CatalogGroup> getCatalogGroupByIdWithHttpInfo(String appId, String catalogGroupId) throws ApiException {
        com.squareup.okhttp.Call call = getCatalogGroupByIdValidateBeforeCall(appId, catalogGroupId, null, null);
        Type localVarReturnType = new TypeToken<CatalogGroup>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get group by Id (asynchronously)
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param appId  (required)
     * @param catalogGroupId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCatalogGroupByIdAsync(String appId, String catalogGroupId, final ApiCallback<CatalogGroup> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCatalogGroupByIdValidateBeforeCall(appId, catalogGroupId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CatalogGroup>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getGroups
     * @param appId  (required)
     * @param groupTypes  (required)
     * @param searchTerm  (optional)
     * @param page  (optional)
     * @param limit  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getGroupsCall(String appId, List<String> groupTypes, String searchTerm, Integer page, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/catalog/groups"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (groupTypes != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "groupTypes", groupTypes));
        if (searchTerm != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("searchTerm", searchTerm));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getGroupsValidateBeforeCall(String appId, List<String> groupTypes, String searchTerm, Integer page, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getGroups(Async)");
        }
        
        // verify the required parameter 'groupTypes' is set
        if (groupTypes == null) {
            throw new ApiException("Missing the required parameter 'groupTypes' when calling getGroups(Async)");
        }
        

        com.squareup.okhttp.Call call = getGroupsCall(appId, groupTypes, searchTerm, page, limit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get paginated groups by app name id filtered by types
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param appId  (required)
     * @param groupTypes  (required)
     * @param searchTerm  (optional)
     * @param page  (optional)
     * @param limit  (optional)
     * @return RestApiPaginationResultCatalogGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiPaginationResultCatalogGroup getGroups(String appId, List<String> groupTypes, String searchTerm, Integer page, Integer limit) throws ApiException {
        ApiResponse<RestApiPaginationResultCatalogGroup> resp = getGroupsWithHttpInfo(appId, groupTypes, searchTerm, page, limit);
        return resp.getData();
    }

    /**
     * Get paginated groups by app name id filtered by types
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param appId  (required)
     * @param groupTypes  (required)
     * @param searchTerm  (optional)
     * @param page  (optional)
     * @param limit  (optional)
     * @return ApiResponse&lt;RestApiPaginationResultCatalogGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiPaginationResultCatalogGroup> getGroupsWithHttpInfo(String appId, List<String> groupTypes, String searchTerm, Integer page, Integer limit) throws ApiException {
        com.squareup.okhttp.Call call = getGroupsValidateBeforeCall(appId, groupTypes, searchTerm, page, limit, null, null);
        Type localVarReturnType = new TypeToken<RestApiPaginationResultCatalogGroup>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get paginated groups by app name id filtered by types (asynchronously)
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param appId  (required)
     * @param groupTypes  (required)
     * @param searchTerm  (optional)
     * @param page  (optional)
     * @param limit  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getGroupsAsync(String appId, List<String> groupTypes, String searchTerm, Integer page, Integer limit, final ApiCallback<RestApiPaginationResultCatalogGroup> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getGroupsValidateBeforeCall(appId, groupTypes, searchTerm, page, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiPaginationResultCatalogGroup>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateCatalogGroup
     * @param appId  (required)
     * @param catalogGroupId  (required)
     * @param updateCatalogGroup  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateCatalogGroupCall(String appId, String catalogGroupId, UpdateCatalogGroup updateCatalogGroup, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = updateCatalogGroup;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/catalog/groups/{catalogGroupId}"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "catalogGroupId" + "\\}", apiClient.escapeString(catalogGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateCatalogGroupValidateBeforeCall(String appId, String catalogGroupId, UpdateCatalogGroup updateCatalogGroup, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling updateCatalogGroup(Async)");
        }
        
        // verify the required parameter 'catalogGroupId' is set
        if (catalogGroupId == null) {
            throw new ApiException("Missing the required parameter 'catalogGroupId' when calling updateCatalogGroup(Async)");
        }
        
        // verify the required parameter 'updateCatalogGroup' is set
        if (updateCatalogGroup == null) {
            throw new ApiException("Missing the required parameter 'updateCatalogGroup' when calling updateCatalogGroup(Async)");
        }
        

        com.squareup.okhttp.Call call = updateCatalogGroupCall(appId, catalogGroupId, updateCatalogGroup, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update Catalog Group
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param appId  (required)
     * @param catalogGroupId  (required)
     * @param updateCatalogGroup  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateCatalogGroup(String appId, String catalogGroupId, UpdateCatalogGroup updateCatalogGroup) throws ApiException {
        updateCatalogGroupWithHttpInfo(appId, catalogGroupId, updateCatalogGroup);
    }

    /**
     * Update Catalog Group
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param appId  (required)
     * @param catalogGroupId  (required)
     * @param updateCatalogGroup  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateCatalogGroupWithHttpInfo(String appId, String catalogGroupId, UpdateCatalogGroup updateCatalogGroup) throws ApiException {
        com.squareup.okhttp.Call call = updateCatalogGroupValidateBeforeCall(appId, catalogGroupId, updateCatalogGroup, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update Catalog Group (asynchronously)
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param appId  (required)
     * @param catalogGroupId  (required)
     * @param updateCatalogGroup  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateCatalogGroupAsync(String appId, String catalogGroupId, UpdateCatalogGroup updateCatalogGroup, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateCatalogGroupValidateBeforeCall(appId, catalogGroupId, updateCatalogGroup, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
