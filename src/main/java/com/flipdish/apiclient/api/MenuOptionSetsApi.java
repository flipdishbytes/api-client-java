/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.flipdish.apiclient.api;

import com.flipdish.apiclient.ApiCallback;
import com.flipdish.apiclient.ApiClient;
import com.flipdish.apiclient.ApiException;
import com.flipdish.apiclient.ApiResponse;
import com.flipdish.apiclient.Configuration;
import com.flipdish.apiclient.Pair;
import com.flipdish.apiclient.ProgressRequestBody;
import com.flipdish.apiclient.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import com.flipdish.apiclient.model.MenuItemOptionSetBase;
import com.flipdish.apiclient.model.RestApiArrayResultMenuItemOptionSet;
import com.flipdish.apiclient.model.RestApiErrorResult;
import com.flipdish.apiclient.model.RestApiForbiddenResult;
import com.flipdish.apiclient.model.RestApiResultMenuItemOptionSet;
import com.flipdish.apiclient.model.RestApiStringResult;
import com.flipdish.apiclient.model.RestApiUnauthorizedResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MenuOptionSetsApi {
    private ApiClient apiClient;
    private Map<String, String> headers;

    public MenuOptionSetsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MenuOptionSetsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public void setHeadersOverrides(Map<String, String> headers) {
        this.headers = headers;
    }

    /**
     * Build call for createMenuItemOptionSet
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSectionItemId Menu section item identifier (required)
     * @param menuItemOptionSet Menu item option set (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createMenuItemOptionSetCall(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, MenuItemOptionSetBase menuItemOptionSet, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = menuItemOptionSet;

        // create path and map variables
        String localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/optionsets"
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()))
            .replaceAll("\\{" + "menuSectionId" + "\\}", apiClient.escapeString(menuSectionId.toString()))
            .replaceAll("\\{" + "menuSectionItemId" + "\\}", apiClient.escapeString(menuSectionItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createMenuItemOptionSetValidateBeforeCall(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, MenuItemOptionSetBase menuItemOptionSet, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling createMenuItemOptionSet(Async)");
        }
        
        // verify the required parameter 'menuSectionId' is set
        if (menuSectionId == null) {
            throw new ApiException("Missing the required parameter 'menuSectionId' when calling createMenuItemOptionSet(Async)");
        }
        
        // verify the required parameter 'menuSectionItemId' is set
        if (menuSectionItemId == null) {
            throw new ApiException("Missing the required parameter 'menuSectionItemId' when calling createMenuItemOptionSet(Async)");
        }
        
        // verify the required parameter 'menuItemOptionSet' is set
        if (menuItemOptionSet == null) {
            throw new ApiException("Missing the required parameter 'menuItemOptionSet' when calling createMenuItemOptionSet(Async)");
        }
        

        com.squareup.okhttp.Call call = createMenuItemOptionSetCall(menuId, menuSectionId, menuSectionItemId, menuItemOptionSet, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create menu item option set
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSectionItemId Menu section item identifier (required)
     * @param menuItemOptionSet Menu item option set (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object createMenuItemOptionSet(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, MenuItemOptionSetBase menuItemOptionSet) throws ApiException {
        ApiResponse<Object> resp = createMenuItemOptionSetWithHttpInfo(menuId, menuSectionId, menuSectionItemId, menuItemOptionSet);
        return resp.getData();
    }

    /**
     * Create menu item option set
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSectionItemId Menu section item identifier (required)
     * @param menuItemOptionSet Menu item option set (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> createMenuItemOptionSetWithHttpInfo(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, MenuItemOptionSetBase menuItemOptionSet) throws ApiException {
        com.squareup.okhttp.Call call = createMenuItemOptionSetValidateBeforeCall(menuId, menuSectionId, menuSectionItemId, menuItemOptionSet, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create menu item option set (asynchronously)
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSectionItemId Menu section item identifier (required)
     * @param menuItemOptionSet Menu item option set (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createMenuItemOptionSetAsync(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, MenuItemOptionSetBase menuItemOptionSet, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createMenuItemOptionSetValidateBeforeCall(menuId, menuSectionId, menuSectionItemId, menuItemOptionSet, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteMenuItemOptionSet
     * @param menuId Menu identifier (required)
     * @param menuSectionItemId Menu section item identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param optionSetId Option set identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteMenuItemOptionSetCall(Integer menuId, Integer menuSectionItemId, Integer menuSectionId, Integer optionSetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/optionsets/{optionSetId}"
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()))
            .replaceAll("\\{" + "menuSectionItemId" + "\\}", apiClient.escapeString(menuSectionItemId.toString()))
            .replaceAll("\\{" + "menuSectionId" + "\\}", apiClient.escapeString(menuSectionId.toString()))
            .replaceAll("\\{" + "optionSetId" + "\\}", apiClient.escapeString(optionSetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteMenuItemOptionSetValidateBeforeCall(Integer menuId, Integer menuSectionItemId, Integer menuSectionId, Integer optionSetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling deleteMenuItemOptionSet(Async)");
        }
        
        // verify the required parameter 'menuSectionItemId' is set
        if (menuSectionItemId == null) {
            throw new ApiException("Missing the required parameter 'menuSectionItemId' when calling deleteMenuItemOptionSet(Async)");
        }
        
        // verify the required parameter 'menuSectionId' is set
        if (menuSectionId == null) {
            throw new ApiException("Missing the required parameter 'menuSectionId' when calling deleteMenuItemOptionSet(Async)");
        }
        
        // verify the required parameter 'optionSetId' is set
        if (optionSetId == null) {
            throw new ApiException("Missing the required parameter 'optionSetId' when calling deleteMenuItemOptionSet(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteMenuItemOptionSetCall(menuId, menuSectionItemId, menuSectionId, optionSetId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete menu item option set
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionItemId Menu section item identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param optionSetId Option set identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteMenuItemOptionSet(Integer menuId, Integer menuSectionItemId, Integer menuSectionId, Integer optionSetId) throws ApiException {
        deleteMenuItemOptionSetWithHttpInfo(menuId, menuSectionItemId, menuSectionId, optionSetId);
    }

    /**
     * Delete menu item option set
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionItemId Menu section item identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param optionSetId Option set identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteMenuItemOptionSetWithHttpInfo(Integer menuId, Integer menuSectionItemId, Integer menuSectionId, Integer optionSetId) throws ApiException {
        com.squareup.okhttp.Call call = deleteMenuItemOptionSetValidateBeforeCall(menuId, menuSectionItemId, menuSectionId, optionSetId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete menu item option set (asynchronously)
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionItemId Menu section item identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param optionSetId Option set identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteMenuItemOptionSetAsync(Integer menuId, Integer menuSectionItemId, Integer menuSectionId, Integer optionSetId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteMenuItemOptionSetValidateBeforeCall(menuId, menuSectionItemId, menuSectionId, optionSetId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteOptionSetImage
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSectionItemId Menu section item identifier (required)
     * @param optionSetId Option set identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteOptionSetImageCall(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, Integer optionSetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/optionsets/{optionSetId}/image"
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()))
            .replaceAll("\\{" + "menuSectionId" + "\\}", apiClient.escapeString(menuSectionId.toString()))
            .replaceAll("\\{" + "menuSectionItemId" + "\\}", apiClient.escapeString(menuSectionItemId.toString()))
            .replaceAll("\\{" + "optionSetId" + "\\}", apiClient.escapeString(optionSetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteOptionSetImageValidateBeforeCall(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, Integer optionSetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling deleteOptionSetImage(Async)");
        }
        
        // verify the required parameter 'menuSectionId' is set
        if (menuSectionId == null) {
            throw new ApiException("Missing the required parameter 'menuSectionId' when calling deleteOptionSetImage(Async)");
        }
        
        // verify the required parameter 'menuSectionItemId' is set
        if (menuSectionItemId == null) {
            throw new ApiException("Missing the required parameter 'menuSectionItemId' when calling deleteOptionSetImage(Async)");
        }
        
        // verify the required parameter 'optionSetId' is set
        if (optionSetId == null) {
            throw new ApiException("Missing the required parameter 'optionSetId' when calling deleteOptionSetImage(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteOptionSetImageCall(menuId, menuSectionId, menuSectionItemId, optionSetId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete option set image
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSectionItemId Menu section item identifier (required)
     * @param optionSetId Option set identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteOptionSetImage(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, Integer optionSetId) throws ApiException {
        deleteOptionSetImageWithHttpInfo(menuId, menuSectionId, menuSectionItemId, optionSetId);
    }

    /**
     * Delete option set image
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSectionItemId Menu section item identifier (required)
     * @param optionSetId Option set identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteOptionSetImageWithHttpInfo(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, Integer optionSetId) throws ApiException {
        com.squareup.okhttp.Call call = deleteOptionSetImageValidateBeforeCall(menuId, menuSectionId, menuSectionItemId, optionSetId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete option set image (asynchronously)
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSectionItemId Menu section item identifier (required)
     * @param optionSetId Option set identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteOptionSetImageAsync(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, Integer optionSetId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteOptionSetImageValidateBeforeCall(menuId, menuSectionId, menuSectionItemId, optionSetId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getMenuItemOptionSetById
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSectionItemId Menu section item identifier (required)
     * @param optionSetId Menu item option set identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMenuItemOptionSetByIdCall(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, Integer optionSetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/optionsets/{optionSetId}"
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()))
            .replaceAll("\\{" + "menuSectionId" + "\\}", apiClient.escapeString(menuSectionId.toString()))
            .replaceAll("\\{" + "menuSectionItemId" + "\\}", apiClient.escapeString(menuSectionItemId.toString()))
            .replaceAll("\\{" + "optionSetId" + "\\}", apiClient.escapeString(optionSetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMenuItemOptionSetByIdValidateBeforeCall(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, Integer optionSetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling getMenuItemOptionSetById(Async)");
        }
        
        // verify the required parameter 'menuSectionId' is set
        if (menuSectionId == null) {
            throw new ApiException("Missing the required parameter 'menuSectionId' when calling getMenuItemOptionSetById(Async)");
        }
        
        // verify the required parameter 'menuSectionItemId' is set
        if (menuSectionItemId == null) {
            throw new ApiException("Missing the required parameter 'menuSectionItemId' when calling getMenuItemOptionSetById(Async)");
        }
        
        // verify the required parameter 'optionSetId' is set
        if (optionSetId == null) {
            throw new ApiException("Missing the required parameter 'optionSetId' when calling getMenuItemOptionSetById(Async)");
        }
        

        com.squareup.okhttp.Call call = getMenuItemOptionSetByIdCall(menuId, menuSectionId, menuSectionItemId, optionSetId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get menu item option set by identifier
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSectionItemId Menu section item identifier (required)
     * @param optionSetId Menu item option set identifier (required)
     * @return RestApiResultMenuItemOptionSet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultMenuItemOptionSet getMenuItemOptionSetById(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, Integer optionSetId) throws ApiException {
        ApiResponse<RestApiResultMenuItemOptionSet> resp = getMenuItemOptionSetByIdWithHttpInfo(menuId, menuSectionId, menuSectionItemId, optionSetId);
        return resp.getData();
    }

    /**
     * Get menu item option set by identifier
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSectionItemId Menu section item identifier (required)
     * @param optionSetId Menu item option set identifier (required)
     * @return ApiResponse&lt;RestApiResultMenuItemOptionSet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultMenuItemOptionSet> getMenuItemOptionSetByIdWithHttpInfo(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, Integer optionSetId) throws ApiException {
        com.squareup.okhttp.Call call = getMenuItemOptionSetByIdValidateBeforeCall(menuId, menuSectionId, menuSectionItemId, optionSetId, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultMenuItemOptionSet>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get menu item option set by identifier (asynchronously)
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSectionItemId Menu section item identifier (required)
     * @param optionSetId Menu item option set identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMenuItemOptionSetByIdAsync(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, Integer optionSetId, final ApiCallback<RestApiResultMenuItemOptionSet> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMenuItemOptionSetByIdValidateBeforeCall(menuId, menuSectionId, menuSectionItemId, optionSetId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultMenuItemOptionSet>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getMenuItemOptionSets
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSectionItemId Menu section item identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMenuItemOptionSetsCall(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/optionsets"
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()))
            .replaceAll("\\{" + "menuSectionId" + "\\}", apiClient.escapeString(menuSectionId.toString()))
            .replaceAll("\\{" + "menuSectionItemId" + "\\}", apiClient.escapeString(menuSectionItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMenuItemOptionSetsValidateBeforeCall(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling getMenuItemOptionSets(Async)");
        }
        
        // verify the required parameter 'menuSectionId' is set
        if (menuSectionId == null) {
            throw new ApiException("Missing the required parameter 'menuSectionId' when calling getMenuItemOptionSets(Async)");
        }
        
        // verify the required parameter 'menuSectionItemId' is set
        if (menuSectionItemId == null) {
            throw new ApiException("Missing the required parameter 'menuSectionItemId' when calling getMenuItemOptionSets(Async)");
        }
        

        com.squareup.okhttp.Call call = getMenuItemOptionSetsCall(menuId, menuSectionId, menuSectionItemId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get menu item option sets
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSectionItemId Menu section item identifier (required)
     * @return RestApiArrayResultMenuItemOptionSet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiArrayResultMenuItemOptionSet getMenuItemOptionSets(Integer menuId, Integer menuSectionId, Integer menuSectionItemId) throws ApiException {
        ApiResponse<RestApiArrayResultMenuItemOptionSet> resp = getMenuItemOptionSetsWithHttpInfo(menuId, menuSectionId, menuSectionItemId);
        return resp.getData();
    }

    /**
     * Get menu item option sets
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSectionItemId Menu section item identifier (required)
     * @return ApiResponse&lt;RestApiArrayResultMenuItemOptionSet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiArrayResultMenuItemOptionSet> getMenuItemOptionSetsWithHttpInfo(Integer menuId, Integer menuSectionId, Integer menuSectionItemId) throws ApiException {
        com.squareup.okhttp.Call call = getMenuItemOptionSetsValidateBeforeCall(menuId, menuSectionId, menuSectionItemId, null, null);
        Type localVarReturnType = new TypeToken<RestApiArrayResultMenuItemOptionSet>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get menu item option sets (asynchronously)
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSectionItemId Menu section item identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMenuItemOptionSetsAsync(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, final ApiCallback<RestApiArrayResultMenuItemOptionSet> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMenuItemOptionSetsValidateBeforeCall(menuId, menuSectionId, menuSectionItemId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiArrayResultMenuItemOptionSet>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateMenuItemOptionSet
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSectionItemId Menu section item identifier (required)
     * @param optionSetId Option set identifier (required)
     * @param menuItemOptionSet Menu item option set (delta) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateMenuItemOptionSetCall(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, Integer optionSetId, MenuItemOptionSetBase menuItemOptionSet, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = menuItemOptionSet;

        // create path and map variables
        String localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/optionsets/{optionSetId}"
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()))
            .replaceAll("\\{" + "menuSectionId" + "\\}", apiClient.escapeString(menuSectionId.toString()))
            .replaceAll("\\{" + "menuSectionItemId" + "\\}", apiClient.escapeString(menuSectionItemId.toString()))
            .replaceAll("\\{" + "optionSetId" + "\\}", apiClient.escapeString(optionSetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateMenuItemOptionSetValidateBeforeCall(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, Integer optionSetId, MenuItemOptionSetBase menuItemOptionSet, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling updateMenuItemOptionSet(Async)");
        }
        
        // verify the required parameter 'menuSectionId' is set
        if (menuSectionId == null) {
            throw new ApiException("Missing the required parameter 'menuSectionId' when calling updateMenuItemOptionSet(Async)");
        }
        
        // verify the required parameter 'menuSectionItemId' is set
        if (menuSectionItemId == null) {
            throw new ApiException("Missing the required parameter 'menuSectionItemId' when calling updateMenuItemOptionSet(Async)");
        }
        
        // verify the required parameter 'optionSetId' is set
        if (optionSetId == null) {
            throw new ApiException("Missing the required parameter 'optionSetId' when calling updateMenuItemOptionSet(Async)");
        }
        
        // verify the required parameter 'menuItemOptionSet' is set
        if (menuItemOptionSet == null) {
            throw new ApiException("Missing the required parameter 'menuItemOptionSet' when calling updateMenuItemOptionSet(Async)");
        }
        

        com.squareup.okhttp.Call call = updateMenuItemOptionSetCall(menuId, menuSectionId, menuSectionItemId, optionSetId, menuItemOptionSet, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update menu item option set
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSectionItemId Menu section item identifier (required)
     * @param optionSetId Option set identifier (required)
     * @param menuItemOptionSet Menu item option set (delta) (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateMenuItemOptionSet(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, Integer optionSetId, MenuItemOptionSetBase menuItemOptionSet) throws ApiException {
        updateMenuItemOptionSetWithHttpInfo(menuId, menuSectionId, menuSectionItemId, optionSetId, menuItemOptionSet);
    }

    /**
     * Update menu item option set
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSectionItemId Menu section item identifier (required)
     * @param optionSetId Option set identifier (required)
     * @param menuItemOptionSet Menu item option set (delta) (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateMenuItemOptionSetWithHttpInfo(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, Integer optionSetId, MenuItemOptionSetBase menuItemOptionSet) throws ApiException {
        com.squareup.okhttp.Call call = updateMenuItemOptionSetValidateBeforeCall(menuId, menuSectionId, menuSectionItemId, optionSetId, menuItemOptionSet, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update menu item option set (asynchronously)
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSectionItemId Menu section item identifier (required)
     * @param optionSetId Option set identifier (required)
     * @param menuItemOptionSet Menu item option set (delta) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateMenuItemOptionSetAsync(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, Integer optionSetId, MenuItemOptionSetBase menuItemOptionSet, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateMenuItemOptionSetValidateBeforeCall(menuId, menuSectionId, menuSectionItemId, optionSetId, menuItemOptionSet, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for uploadOptionSetImage
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSectionItemId Menu section item identifier (required)
     * @param optionSetId Option set identifier (required)
     * @param image Option set image (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call uploadOptionSetImageCall(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, Integer optionSetId, File image, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/optionsets/{optionSetId}/image"
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()))
            .replaceAll("\\{" + "menuSectionId" + "\\}", apiClient.escapeString(menuSectionId.toString()))
            .replaceAll("\\{" + "menuSectionItemId" + "\\}", apiClient.escapeString(menuSectionItemId.toString()))
            .replaceAll("\\{" + "optionSetId" + "\\}", apiClient.escapeString(optionSetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (image != null)
        localVarFormParams.put("Image", image);

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call uploadOptionSetImageValidateBeforeCall(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, Integer optionSetId, File image, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling uploadOptionSetImage(Async)");
        }
        
        // verify the required parameter 'menuSectionId' is set
        if (menuSectionId == null) {
            throw new ApiException("Missing the required parameter 'menuSectionId' when calling uploadOptionSetImage(Async)");
        }
        
        // verify the required parameter 'menuSectionItemId' is set
        if (menuSectionItemId == null) {
            throw new ApiException("Missing the required parameter 'menuSectionItemId' when calling uploadOptionSetImage(Async)");
        }
        
        // verify the required parameter 'optionSetId' is set
        if (optionSetId == null) {
            throw new ApiException("Missing the required parameter 'optionSetId' when calling uploadOptionSetImage(Async)");
        }
        
        // verify the required parameter 'image' is set
        if (image == null) {
            throw new ApiException("Missing the required parameter 'image' when calling uploadOptionSetImage(Async)");
        }
        

        com.squareup.okhttp.Call call = uploadOptionSetImageCall(menuId, menuSectionId, menuSectionItemId, optionSetId, image, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Upload menu item option set image
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSectionItemId Menu section item identifier (required)
     * @param optionSetId Option set identifier (required)
     * @param image Option set image (required)
     * @return RestApiStringResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiStringResult uploadOptionSetImage(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, Integer optionSetId, File image) throws ApiException {
        ApiResponse<RestApiStringResult> resp = uploadOptionSetImageWithHttpInfo(menuId, menuSectionId, menuSectionItemId, optionSetId, image);
        return resp.getData();
    }

    /**
     * Upload menu item option set image
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSectionItemId Menu section item identifier (required)
     * @param optionSetId Option set identifier (required)
     * @param image Option set image (required)
     * @return ApiResponse&lt;RestApiStringResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiStringResult> uploadOptionSetImageWithHttpInfo(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, Integer optionSetId, File image) throws ApiException {
        com.squareup.okhttp.Call call = uploadOptionSetImageValidateBeforeCall(menuId, menuSectionId, menuSectionItemId, optionSetId, image, null, null);
        Type localVarReturnType = new TypeToken<RestApiStringResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Upload menu item option set image (asynchronously)
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSectionItemId Menu section item identifier (required)
     * @param optionSetId Option set identifier (required)
     * @param image Option set image (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call uploadOptionSetImageAsync(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, Integer optionSetId, File image, final ApiCallback<RestApiStringResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = uploadOptionSetImageValidateBeforeCall(menuId, menuSectionId, menuSectionItemId, optionSetId, image, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiStringResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
