/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.flipdish.apiclient.api;

import com.flipdish.apiclient.ApiCallback;
import com.flipdish.apiclient.ApiClient;
import com.flipdish.apiclient.ApiException;
import com.flipdish.apiclient.ApiResponse;
import com.flipdish.apiclient.Configuration;
import com.flipdish.apiclient.Pair;
import com.flipdish.apiclient.ProgressRequestBody;
import com.flipdish.apiclient.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.flipdish.apiclient.model.AppConfigSalesChannel;
import com.flipdish.apiclient.model.MobileAppsSubmission;
import com.flipdish.apiclient.model.RestApiErrorResult;
import com.flipdish.apiclient.model.RestApiForbiddenResult;
import com.flipdish.apiclient.model.RestApiResultAppConfigSalesChannel;
import com.flipdish.apiclient.model.RestApiUnauthorizedResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MobileAppsApi {
    private ApiClient apiClient;

    public MobileAppsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MobileAppsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for editAppConfigSalesChannel
     * @param appId  (required)
     * @param mobileAppsSubmission  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editAppConfigSalesChannelCall(String appId, MobileAppsSubmission mobileAppsSubmission, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = mobileAppsSubmission;

        // create path and map variables
        String localVarPath = "/api/v1.0/mobileapps/{appId}/submission"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editAppConfigSalesChannelValidateBeforeCall(String appId, MobileAppsSubmission mobileAppsSubmission, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling editAppConfigSalesChannel(Async)");
        }
        
        // verify the required parameter 'mobileAppsSubmission' is set
        if (mobileAppsSubmission == null) {
            throw new ApiException("Missing the required parameter 'mobileAppsSubmission' when calling editAppConfigSalesChannel(Async)");
        }
        

        com.squareup.okhttp.Call call = editAppConfigSalesChannelCall(appId, mobileAppsSubmission, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Submission form mobile apps
     * 
     * @param appId  (required)
     * @param mobileAppsSubmission  (required)
     * @return RestApiResultAppConfigSalesChannel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultAppConfigSalesChannel editAppConfigSalesChannel(String appId, MobileAppsSubmission mobileAppsSubmission) throws ApiException {
        ApiResponse<RestApiResultAppConfigSalesChannel> resp = editAppConfigSalesChannelWithHttpInfo(appId, mobileAppsSubmission);
        return resp.getData();
    }

    /**
     * Submission form mobile apps
     * 
     * @param appId  (required)
     * @param mobileAppsSubmission  (required)
     * @return ApiResponse&lt;RestApiResultAppConfigSalesChannel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultAppConfigSalesChannel> editAppConfigSalesChannelWithHttpInfo(String appId, MobileAppsSubmission mobileAppsSubmission) throws ApiException {
        com.squareup.okhttp.Call call = editAppConfigSalesChannelValidateBeforeCall(appId, mobileAppsSubmission, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultAppConfigSalesChannel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Submission form mobile apps (asynchronously)
     * 
     * @param appId  (required)
     * @param mobileAppsSubmission  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editAppConfigSalesChannelAsync(String appId, MobileAppsSubmission mobileAppsSubmission, final ApiCallback<RestApiResultAppConfigSalesChannel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editAppConfigSalesChannelValidateBeforeCall(appId, mobileAppsSubmission, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultAppConfigSalesChannel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for editAppConfigSalesChannel_0
     * @param appId  (required)
     * @param appConfigSalesChannel  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editAppConfigSalesChannel_0Call(String appId, AppConfigSalesChannel appConfigSalesChannel, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = appConfigSalesChannel;

        // create path and map variables
        String localVarPath = "/api/v1.0/mobileapps/{appId}/saleschannel"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editAppConfigSalesChannel_0ValidateBeforeCall(String appId, AppConfigSalesChannel appConfigSalesChannel, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling editAppConfigSalesChannel_0(Async)");
        }
        
        // verify the required parameter 'appConfigSalesChannel' is set
        if (appConfigSalesChannel == null) {
            throw new ApiException("Missing the required parameter 'appConfigSalesChannel' when calling editAppConfigSalesChannel_0(Async)");
        }
        

        com.squareup.okhttp.Call call = editAppConfigSalesChannel_0Call(appId, appConfigSalesChannel, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Set the application sales channel configuration
     * 
     * @param appId  (required)
     * @param appConfigSalesChannel  (required)
     * @return RestApiResultAppConfigSalesChannel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultAppConfigSalesChannel editAppConfigSalesChannel_0(String appId, AppConfigSalesChannel appConfigSalesChannel) throws ApiException {
        ApiResponse<RestApiResultAppConfigSalesChannel> resp = editAppConfigSalesChannel_0WithHttpInfo(appId, appConfigSalesChannel);
        return resp.getData();
    }

    /**
     * Set the application sales channel configuration
     * 
     * @param appId  (required)
     * @param appConfigSalesChannel  (required)
     * @return ApiResponse&lt;RestApiResultAppConfigSalesChannel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultAppConfigSalesChannel> editAppConfigSalesChannel_0WithHttpInfo(String appId, AppConfigSalesChannel appConfigSalesChannel) throws ApiException {
        com.squareup.okhttp.Call call = editAppConfigSalesChannel_0ValidateBeforeCall(appId, appConfigSalesChannel, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultAppConfigSalesChannel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Set the application sales channel configuration (asynchronously)
     * 
     * @param appId  (required)
     * @param appConfigSalesChannel  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editAppConfigSalesChannel_0Async(String appId, AppConfigSalesChannel appConfigSalesChannel, final ApiCallback<RestApiResultAppConfigSalesChannel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editAppConfigSalesChannel_0ValidateBeforeCall(appId, appConfigSalesChannel, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultAppConfigSalesChannel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
