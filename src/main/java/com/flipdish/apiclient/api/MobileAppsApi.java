/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.flipdish.apiclient.api;

import com.flipdish.apiclient.ApiCallback;
import com.flipdish.apiclient.ApiClient;
import com.flipdish.apiclient.ApiException;
import com.flipdish.apiclient.ApiResponse;
import com.flipdish.apiclient.Configuration;
import com.flipdish.apiclient.Pair;
import com.flipdish.apiclient.ProgressRequestBody;
import com.flipdish.apiclient.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.flipdish.apiclient.model.AppConfigSalesChannel;
import java.io.File;
import com.flipdish.apiclient.model.MobileAppsSubmission;
import com.flipdish.apiclient.model.RestApiArrayResultMobileAppsStatistics;
import com.flipdish.apiclient.model.RestApiErrorResult;
import com.flipdish.apiclient.model.RestApiForbiddenResult;
import com.flipdish.apiclient.model.RestApiResultAppConfigSalesChannel;
import com.flipdish.apiclient.model.RestApiResultMobileAppsImage;
import com.flipdish.apiclient.model.RestApiResultMobileAppsSubmission;
import com.flipdish.apiclient.model.RestApiResultMobileAppsSubmissionDetails;
import com.flipdish.apiclient.model.RestApiResultMobileAppsSubmissionStatus;
import com.flipdish.apiclient.model.RestApiUnauthorizedResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MobileAppsApi {
    private ApiClient apiClient;

    public MobileAppsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MobileAppsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getAppConfigSalesChannel
     * @param appId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAppConfigSalesChannelCall(String appId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/mobileapps/{appId}/saleschannel/details"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAppConfigSalesChannelValidateBeforeCall(String appId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getAppConfigSalesChannel(Async)");
        }
        

        com.squareup.okhttp.Call call = getAppConfigSalesChannelCall(appId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get sales channel configuration
     * 
     * @param appId  (required)
     * @return RestApiResultAppConfigSalesChannel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultAppConfigSalesChannel getAppConfigSalesChannel(String appId) throws ApiException {
        ApiResponse<RestApiResultAppConfigSalesChannel> resp = getAppConfigSalesChannelWithHttpInfo(appId);
        return resp.getData();
    }

    /**
     * Get sales channel configuration
     * 
     * @param appId  (required)
     * @return ApiResponse&lt;RestApiResultAppConfigSalesChannel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultAppConfigSalesChannel> getAppConfigSalesChannelWithHttpInfo(String appId) throws ApiException {
        com.squareup.okhttp.Call call = getAppConfigSalesChannelValidateBeforeCall(appId, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultAppConfigSalesChannel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get sales channel configuration (asynchronously)
     * 
     * @param appId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAppConfigSalesChannelAsync(String appId, final ApiCallback<RestApiResultAppConfigSalesChannel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAppConfigSalesChannelValidateBeforeCall(appId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultAppConfigSalesChannel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getStatistics
     * @param appId  (required)
     * @param platformTypes  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getStatisticsCall(String appId, List<String> platformTypes, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/mobileapps/{appId}/statistics"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (platformTypes != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "platformTypes", platformTypes));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStatisticsValidateBeforeCall(String appId, List<String> platformTypes, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getStatistics(Async)");
        }
        
        // verify the required parameter 'platformTypes' is set
        if (platformTypes == null) {
            throw new ApiException("Missing the required parameter 'platformTypes' when calling getStatistics(Async)");
        }
        

        com.squareup.okhttp.Call call = getStatisticsCall(appId, platformTypes, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get statistics mobile apps
     * 
     * @param appId  (required)
     * @param platformTypes  (required)
     * @return RestApiArrayResultMobileAppsStatistics
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiArrayResultMobileAppsStatistics getStatistics(String appId, List<String> platformTypes) throws ApiException {
        ApiResponse<RestApiArrayResultMobileAppsStatistics> resp = getStatisticsWithHttpInfo(appId, platformTypes);
        return resp.getData();
    }

    /**
     * Get statistics mobile apps
     * 
     * @param appId  (required)
     * @param platformTypes  (required)
     * @return ApiResponse&lt;RestApiArrayResultMobileAppsStatistics&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiArrayResultMobileAppsStatistics> getStatisticsWithHttpInfo(String appId, List<String> platformTypes) throws ApiException {
        com.squareup.okhttp.Call call = getStatisticsValidateBeforeCall(appId, platformTypes, null, null);
        Type localVarReturnType = new TypeToken<RestApiArrayResultMobileAppsStatistics>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get statistics mobile apps (asynchronously)
     * 
     * @param appId  (required)
     * @param platformTypes  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStatisticsAsync(String appId, List<String> platformTypes, final ApiCallback<RestApiArrayResultMobileAppsStatistics> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStatisticsValidateBeforeCall(appId, platformTypes, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiArrayResultMobileAppsStatistics>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSubmissionDetails
     * @param appId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSubmissionDetailsCall(String appId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/mobileapps/{appId}/submission/details"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSubmissionDetailsValidateBeforeCall(String appId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getSubmissionDetails(Async)");
        }
        

        com.squareup.okhttp.Call call = getSubmissionDetailsCall(appId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get submission details mobile apps
     * 
     * @param appId  (required)
     * @return RestApiResultMobileAppsSubmissionDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultMobileAppsSubmissionDetails getSubmissionDetails(String appId) throws ApiException {
        ApiResponse<RestApiResultMobileAppsSubmissionDetails> resp = getSubmissionDetailsWithHttpInfo(appId);
        return resp.getData();
    }

    /**
     * Get submission details mobile apps
     * 
     * @param appId  (required)
     * @return ApiResponse&lt;RestApiResultMobileAppsSubmissionDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultMobileAppsSubmissionDetails> getSubmissionDetailsWithHttpInfo(String appId) throws ApiException {
        com.squareup.okhttp.Call call = getSubmissionDetailsValidateBeforeCall(appId, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultMobileAppsSubmissionDetails>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get submission details mobile apps (asynchronously)
     * 
     * @param appId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSubmissionDetailsAsync(String appId, final ApiCallback<RestApiResultMobileAppsSubmissionDetails> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSubmissionDetailsValidateBeforeCall(appId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultMobileAppsSubmissionDetails>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSubmissionStatus
     * @param appId  (required)
     * @param type  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSubmissionStatusCall(String appId, String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/mobileapps/{appId}/submission/status"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSubmissionStatusValidateBeforeCall(String appId, String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getSubmissionStatus(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling getSubmissionStatus(Async)");
        }
        

        com.squareup.okhttp.Call call = getSubmissionStatusCall(appId, type, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get submission status mobile apps
     * 
     * @param appId  (required)
     * @param type  (required)
     * @return RestApiResultMobileAppsSubmissionStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultMobileAppsSubmissionStatus getSubmissionStatus(String appId, String type) throws ApiException {
        ApiResponse<RestApiResultMobileAppsSubmissionStatus> resp = getSubmissionStatusWithHttpInfo(appId, type);
        return resp.getData();
    }

    /**
     * Get submission status mobile apps
     * 
     * @param appId  (required)
     * @param type  (required)
     * @return ApiResponse&lt;RestApiResultMobileAppsSubmissionStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultMobileAppsSubmissionStatus> getSubmissionStatusWithHttpInfo(String appId, String type) throws ApiException {
        com.squareup.okhttp.Call call = getSubmissionStatusValidateBeforeCall(appId, type, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultMobileAppsSubmissionStatus>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get submission status mobile apps (asynchronously)
     * 
     * @param appId  (required)
     * @param type  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSubmissionStatusAsync(String appId, String type, final ApiCallback<RestApiResultMobileAppsSubmissionStatus> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSubmissionStatusValidateBeforeCall(appId, type, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultMobileAppsSubmissionStatus>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for submission
     * @param appId  (required)
     * @param mobileAppsSubmission  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call submissionCall(String appId, MobileAppsSubmission mobileAppsSubmission, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = mobileAppsSubmission;

        // create path and map variables
        String localVarPath = "/api/v1.0/mobileapps/{appId}/submission"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call submissionValidateBeforeCall(String appId, MobileAppsSubmission mobileAppsSubmission, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling submission(Async)");
        }
        
        // verify the required parameter 'mobileAppsSubmission' is set
        if (mobileAppsSubmission == null) {
            throw new ApiException("Missing the required parameter 'mobileAppsSubmission' when calling submission(Async)");
        }
        

        com.squareup.okhttp.Call call = submissionCall(appId, mobileAppsSubmission, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Submission form mobile apps
     * 
     * @param appId  (required)
     * @param mobileAppsSubmission  (required)
     * @return RestApiResultMobileAppsSubmission
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultMobileAppsSubmission submission(String appId, MobileAppsSubmission mobileAppsSubmission) throws ApiException {
        ApiResponse<RestApiResultMobileAppsSubmission> resp = submissionWithHttpInfo(appId, mobileAppsSubmission);
        return resp.getData();
    }

    /**
     * Submission form mobile apps
     * 
     * @param appId  (required)
     * @param mobileAppsSubmission  (required)
     * @return ApiResponse&lt;RestApiResultMobileAppsSubmission&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultMobileAppsSubmission> submissionWithHttpInfo(String appId, MobileAppsSubmission mobileAppsSubmission) throws ApiException {
        com.squareup.okhttp.Call call = submissionValidateBeforeCall(appId, mobileAppsSubmission, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultMobileAppsSubmission>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Submission form mobile apps (asynchronously)
     * 
     * @param appId  (required)
     * @param mobileAppsSubmission  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call submissionAsync(String appId, MobileAppsSubmission mobileAppsSubmission, final ApiCallback<RestApiResultMobileAppsSubmission> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = submissionValidateBeforeCall(appId, mobileAppsSubmission, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultMobileAppsSubmission>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateAppConfigSalesChannel
     * @param appId  (required)
     * @param appConfigSalesChannel  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateAppConfigSalesChannelCall(String appId, AppConfigSalesChannel appConfigSalesChannel, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = appConfigSalesChannel;

        // create path and map variables
        String localVarPath = "/api/v1.0/mobileapps/{appId}/saleschannel"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateAppConfigSalesChannelValidateBeforeCall(String appId, AppConfigSalesChannel appConfigSalesChannel, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling updateAppConfigSalesChannel(Async)");
        }
        
        // verify the required parameter 'appConfigSalesChannel' is set
        if (appConfigSalesChannel == null) {
            throw new ApiException("Missing the required parameter 'appConfigSalesChannel' when calling updateAppConfigSalesChannel(Async)");
        }
        

        com.squareup.okhttp.Call call = updateAppConfigSalesChannelCall(appId, appConfigSalesChannel, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update the application sales channel configuration
     * 
     * @param appId  (required)
     * @param appConfigSalesChannel  (required)
     * @return RestApiResultAppConfigSalesChannel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultAppConfigSalesChannel updateAppConfigSalesChannel(String appId, AppConfigSalesChannel appConfigSalesChannel) throws ApiException {
        ApiResponse<RestApiResultAppConfigSalesChannel> resp = updateAppConfigSalesChannelWithHttpInfo(appId, appConfigSalesChannel);
        return resp.getData();
    }

    /**
     * Update the application sales channel configuration
     * 
     * @param appId  (required)
     * @param appConfigSalesChannel  (required)
     * @return ApiResponse&lt;RestApiResultAppConfigSalesChannel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultAppConfigSalesChannel> updateAppConfigSalesChannelWithHttpInfo(String appId, AppConfigSalesChannel appConfigSalesChannel) throws ApiException {
        com.squareup.okhttp.Call call = updateAppConfigSalesChannelValidateBeforeCall(appId, appConfigSalesChannel, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultAppConfigSalesChannel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update the application sales channel configuration (asynchronously)
     * 
     * @param appId  (required)
     * @param appConfigSalesChannel  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateAppConfigSalesChannelAsync(String appId, AppConfigSalesChannel appConfigSalesChannel, final ApiCallback<RestApiResultAppConfigSalesChannel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateAppConfigSalesChannelValidateBeforeCall(appId, appConfigSalesChannel, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultAppConfigSalesChannel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for uploadImage
     * @param appId  (required)
     * @param image Mobile Apps image (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call uploadImageCall(String appId, File image, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/mobileapps/{appId}/submission/image"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (image != null)
        localVarFormParams.put("Image", image);

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call uploadImageValidateBeforeCall(String appId, File image, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling uploadImage(Async)");
        }
        
        // verify the required parameter 'image' is set
        if (image == null) {
            throw new ApiException("Missing the required parameter 'image' when calling uploadImage(Async)");
        }
        

        com.squareup.okhttp.Call call = uploadImageCall(appId, image, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Upload image mobile apps
     * 
     * @param appId  (required)
     * @param image Mobile Apps image (required)
     * @return RestApiResultMobileAppsImage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultMobileAppsImage uploadImage(String appId, File image) throws ApiException {
        ApiResponse<RestApiResultMobileAppsImage> resp = uploadImageWithHttpInfo(appId, image);
        return resp.getData();
    }

    /**
     * Upload image mobile apps
     * 
     * @param appId  (required)
     * @param image Mobile Apps image (required)
     * @return ApiResponse&lt;RestApiResultMobileAppsImage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultMobileAppsImage> uploadImageWithHttpInfo(String appId, File image) throws ApiException {
        com.squareup.okhttp.Call call = uploadImageValidateBeforeCall(appId, image, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultMobileAppsImage>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Upload image mobile apps (asynchronously)
     * 
     * @param appId  (required)
     * @param image Mobile Apps image (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call uploadImageAsync(String appId, File image, final ApiCallback<RestApiResultMobileAppsImage> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = uploadImageValidateBeforeCall(appId, image, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultMobileAppsImage>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
