/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.flipdish.apiclient.api;

import com.flipdish.apiclient.ApiCallback;
import com.flipdish.apiclient.ApiClient;
import com.flipdish.apiclient.ApiException;
import com.flipdish.apiclient.ApiResponse;
import com.flipdish.apiclient.Configuration;
import com.flipdish.apiclient.Pair;
import com.flipdish.apiclient.ProgressRequestBody;
import com.flipdish.apiclient.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.flipdish.apiclient.model.AppConfigSalesChannel;
import java.io.File;
import com.flipdish.apiclient.model.MobileAppConfig;
import com.flipdish.apiclient.model.MobileAppsSubmission;
import com.flipdish.apiclient.model.RestApiArrayResultMobileAppsStatistics;
import com.flipdish.apiclient.model.RestApiErrorResult;
import com.flipdish.apiclient.model.RestApiForbiddenResult;
import com.flipdish.apiclient.model.RestApiResult;
import com.flipdish.apiclient.model.RestApiResultAppConfigSalesChannel;
import com.flipdish.apiclient.model.RestApiResultMobileAppsDetails;
import com.flipdish.apiclient.model.RestApiResultMobileAppsImage;
import com.flipdish.apiclient.model.RestApiResultMobileAppsSubmission;
import com.flipdish.apiclient.model.RestApiResultMobileAppsSubmissionStatus;
import com.flipdish.apiclient.model.RestApiUnauthorizedResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MobileAppsApi {
    private ApiClient apiClient;

    public MobileAppsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MobileAppsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for editAppConfigSalesChannel
     * @param appId  (required)
     * @param appConfigSalesChannel  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editAppConfigSalesChannelCall(String appId, AppConfigSalesChannel appConfigSalesChannel, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = appConfigSalesChannel;

        // create path and map variables
        String localVarPath = "/api/v1.0/mobileapps/{appId}/saleschannel"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editAppConfigSalesChannelValidateBeforeCall(String appId, AppConfigSalesChannel appConfigSalesChannel, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling editAppConfigSalesChannel(Async)");
        }
        
        // verify the required parameter 'appConfigSalesChannel' is set
        if (appConfigSalesChannel == null) {
            throw new ApiException("Missing the required parameter 'appConfigSalesChannel' when calling editAppConfigSalesChannel(Async)");
        }
        

        com.squareup.okhttp.Call call = editAppConfigSalesChannelCall(appId, appConfigSalesChannel, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Set the application sales channel configuration
     * 
     * @param appId  (required)
     * @param appConfigSalesChannel  (required)
     * @return RestApiResultAppConfigSalesChannel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultAppConfigSalesChannel editAppConfigSalesChannel(String appId, AppConfigSalesChannel appConfigSalesChannel) throws ApiException {
        ApiResponse<RestApiResultAppConfigSalesChannel> resp = editAppConfigSalesChannelWithHttpInfo(appId, appConfigSalesChannel);
        return resp.getData();
    }

    /**
     * Set the application sales channel configuration
     * 
     * @param appId  (required)
     * @param appConfigSalesChannel  (required)
     * @return ApiResponse&lt;RestApiResultAppConfigSalesChannel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultAppConfigSalesChannel> editAppConfigSalesChannelWithHttpInfo(String appId, AppConfigSalesChannel appConfigSalesChannel) throws ApiException {
        com.squareup.okhttp.Call call = editAppConfigSalesChannelValidateBeforeCall(appId, appConfigSalesChannel, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultAppConfigSalesChannel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Set the application sales channel configuration (asynchronously)
     * 
     * @param appId  (required)
     * @param appConfigSalesChannel  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editAppConfigSalesChannelAsync(String appId, AppConfigSalesChannel appConfigSalesChannel, final ApiCallback<RestApiResultAppConfigSalesChannel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editAppConfigSalesChannelValidateBeforeCall(appId, appConfigSalesChannel, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultAppConfigSalesChannel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAppConfig
     * @param appId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAppConfigCall(String appId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/mobileapps/{appId}/config"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAppConfigValidateBeforeCall(String appId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getAppConfig(Async)");
        }
        

        com.squareup.okhttp.Call call = getAppConfigCall(appId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get mobile app configuration
     * 
     * @param appId  (required)
     * @return RestApiResultMobileAppsDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultMobileAppsDetails getAppConfig(String appId) throws ApiException {
        ApiResponse<RestApiResultMobileAppsDetails> resp = getAppConfigWithHttpInfo(appId);
        return resp.getData();
    }

    /**
     * Get mobile app configuration
     * 
     * @param appId  (required)
     * @return ApiResponse&lt;RestApiResultMobileAppsDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultMobileAppsDetails> getAppConfigWithHttpInfo(String appId) throws ApiException {
        com.squareup.okhttp.Call call = getAppConfigValidateBeforeCall(appId, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultMobileAppsDetails>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get mobile app configuration (asynchronously)
     * 
     * @param appId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAppConfigAsync(String appId, final ApiCallback<RestApiResultMobileAppsDetails> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAppConfigValidateBeforeCall(appId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultMobileAppsDetails>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAppDetails
     * @param appId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAppDetailsCall(String appId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/mobileapps/{appId}/details"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAppDetailsValidateBeforeCall(String appId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getAppDetails(Async)");
        }
        

        com.squareup.okhttp.Call call = getAppDetailsCall(appId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get mobile app details
     * 
     * @param appId  (required)
     * @return RestApiResultMobileAppsDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultMobileAppsDetails getAppDetails(String appId) throws ApiException {
        ApiResponse<RestApiResultMobileAppsDetails> resp = getAppDetailsWithHttpInfo(appId);
        return resp.getData();
    }

    /**
     * Get mobile app details
     * 
     * @param appId  (required)
     * @return ApiResponse&lt;RestApiResultMobileAppsDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultMobileAppsDetails> getAppDetailsWithHttpInfo(String appId) throws ApiException {
        com.squareup.okhttp.Call call = getAppDetailsValidateBeforeCall(appId, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultMobileAppsDetails>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get mobile app details (asynchronously)
     * 
     * @param appId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAppDetailsAsync(String appId, final ApiCallback<RestApiResultMobileAppsDetails> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAppDetailsValidateBeforeCall(appId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultMobileAppsDetails>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getMobileAppsSubmissionStatus
     * @param appId  (required)
     * @param plataformType  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMobileAppsSubmissionStatusCall(String appId, String plataformType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/mobileapps/{appId}/submissionstatus{plataformType}"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "plataformType" + "\\}", apiClient.escapeString(plataformType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMobileAppsSubmissionStatusValidateBeforeCall(String appId, String plataformType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getMobileAppsSubmissionStatus(Async)");
        }
        
        // verify the required parameter 'plataformType' is set
        if (plataformType == null) {
            throw new ApiException("Missing the required parameter 'plataformType' when calling getMobileAppsSubmissionStatus(Async)");
        }
        

        com.squareup.okhttp.Call call = getMobileAppsSubmissionStatusCall(appId, plataformType, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get mobile app submitted status
     * 
     * @param appId  (required)
     * @param plataformType  (required)
     * @return RestApiResultMobileAppsSubmissionStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultMobileAppsSubmissionStatus getMobileAppsSubmissionStatus(String appId, String plataformType) throws ApiException {
        ApiResponse<RestApiResultMobileAppsSubmissionStatus> resp = getMobileAppsSubmissionStatusWithHttpInfo(appId, plataformType);
        return resp.getData();
    }

    /**
     * Get mobile app submitted status
     * 
     * @param appId  (required)
     * @param plataformType  (required)
     * @return ApiResponse&lt;RestApiResultMobileAppsSubmissionStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultMobileAppsSubmissionStatus> getMobileAppsSubmissionStatusWithHttpInfo(String appId, String plataformType) throws ApiException {
        com.squareup.okhttp.Call call = getMobileAppsSubmissionStatusValidateBeforeCall(appId, plataformType, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultMobileAppsSubmissionStatus>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get mobile app submitted status (asynchronously)
     * 
     * @param appId  (required)
     * @param plataformType  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMobileAppsSubmissionStatusAsync(String appId, String plataformType, final ApiCallback<RestApiResultMobileAppsSubmissionStatus> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMobileAppsSubmissionStatusValidateBeforeCall(appId, plataformType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultMobileAppsSubmissionStatus>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getStatistics
     * @param appId  (required)
     * @param platformTypes  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getStatisticsCall(String appId, List<String> platformTypes, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/mobileapps/{appId}/statistics"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (platformTypes != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "platformTypes", platformTypes));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStatisticsValidateBeforeCall(String appId, List<String> platformTypes, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getStatistics(Async)");
        }
        
        // verify the required parameter 'platformTypes' is set
        if (platformTypes == null) {
            throw new ApiException("Missing the required parameter 'platformTypes' when calling getStatistics(Async)");
        }
        

        com.squareup.okhttp.Call call = getStatisticsCall(appId, platformTypes, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get statistics mobile apps
     * 
     * @param appId  (required)
     * @param platformTypes  (required)
     * @return RestApiArrayResultMobileAppsStatistics
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiArrayResultMobileAppsStatistics getStatistics(String appId, List<String> platformTypes) throws ApiException {
        ApiResponse<RestApiArrayResultMobileAppsStatistics> resp = getStatisticsWithHttpInfo(appId, platformTypes);
        return resp.getData();
    }

    /**
     * Get statistics mobile apps
     * 
     * @param appId  (required)
     * @param platformTypes  (required)
     * @return ApiResponse&lt;RestApiArrayResultMobileAppsStatistics&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiArrayResultMobileAppsStatistics> getStatisticsWithHttpInfo(String appId, List<String> platformTypes) throws ApiException {
        com.squareup.okhttp.Call call = getStatisticsValidateBeforeCall(appId, platformTypes, null, null);
        Type localVarReturnType = new TypeToken<RestApiArrayResultMobileAppsStatistics>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get statistics mobile apps (asynchronously)
     * 
     * @param appId  (required)
     * @param platformTypes  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStatisticsAsync(String appId, List<String> platformTypes, final ApiCallback<RestApiArrayResultMobileAppsStatistics> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStatisticsValidateBeforeCall(appId, platformTypes, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiArrayResultMobileAppsStatistics>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setAppConfig
     * @param appId  (required)
     * @param configUpdate  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setAppConfigCall(String appId, MobileAppConfig configUpdate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = configUpdate;

        // create path and map variables
        String localVarPath = "/api/v1.0/mobileapps/{appId}/config"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setAppConfigValidateBeforeCall(String appId, MobileAppConfig configUpdate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling setAppConfig(Async)");
        }
        
        // verify the required parameter 'configUpdate' is set
        if (configUpdate == null) {
            throw new ApiException("Missing the required parameter 'configUpdate' when calling setAppConfig(Async)");
        }
        

        com.squareup.okhttp.Call call = setAppConfigCall(appId, configUpdate, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Set mobile app configuration
     * 
     * @param appId  (required)
     * @param configUpdate  (required)
     * @return RestApiResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResult setAppConfig(String appId, MobileAppConfig configUpdate) throws ApiException {
        ApiResponse<RestApiResult> resp = setAppConfigWithHttpInfo(appId, configUpdate);
        return resp.getData();
    }

    /**
     * Set mobile app configuration
     * 
     * @param appId  (required)
     * @param configUpdate  (required)
     * @return ApiResponse&lt;RestApiResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResult> setAppConfigWithHttpInfo(String appId, MobileAppConfig configUpdate) throws ApiException {
        com.squareup.okhttp.Call call = setAppConfigValidateBeforeCall(appId, configUpdate, null, null);
        Type localVarReturnType = new TypeToken<RestApiResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Set mobile app configuration (asynchronously)
     * 
     * @param appId  (required)
     * @param configUpdate  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setAppConfigAsync(String appId, MobileAppConfig configUpdate, final ApiCallback<RestApiResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setAppConfigValidateBeforeCall(appId, configUpdate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for submission
     * @param appId  (required)
     * @param mobileAppsSubmission  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call submissionCall(String appId, MobileAppsSubmission mobileAppsSubmission, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = mobileAppsSubmission;

        // create path and map variables
        String localVarPath = "/api/v1.0/mobileapps/{appId}/submission"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call submissionValidateBeforeCall(String appId, MobileAppsSubmission mobileAppsSubmission, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling submission(Async)");
        }
        
        // verify the required parameter 'mobileAppsSubmission' is set
        if (mobileAppsSubmission == null) {
            throw new ApiException("Missing the required parameter 'mobileAppsSubmission' when calling submission(Async)");
        }
        

        com.squareup.okhttp.Call call = submissionCall(appId, mobileAppsSubmission, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Submission form mobile apps
     * 
     * @param appId  (required)
     * @param mobileAppsSubmission  (required)
     * @return RestApiResultMobileAppsSubmission
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultMobileAppsSubmission submission(String appId, MobileAppsSubmission mobileAppsSubmission) throws ApiException {
        ApiResponse<RestApiResultMobileAppsSubmission> resp = submissionWithHttpInfo(appId, mobileAppsSubmission);
        return resp.getData();
    }

    /**
     * Submission form mobile apps
     * 
     * @param appId  (required)
     * @param mobileAppsSubmission  (required)
     * @return ApiResponse&lt;RestApiResultMobileAppsSubmission&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultMobileAppsSubmission> submissionWithHttpInfo(String appId, MobileAppsSubmission mobileAppsSubmission) throws ApiException {
        com.squareup.okhttp.Call call = submissionValidateBeforeCall(appId, mobileAppsSubmission, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultMobileAppsSubmission>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Submission form mobile apps (asynchronously)
     * 
     * @param appId  (required)
     * @param mobileAppsSubmission  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call submissionAsync(String appId, MobileAppsSubmission mobileAppsSubmission, final ApiCallback<RestApiResultMobileAppsSubmission> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = submissionValidateBeforeCall(appId, mobileAppsSubmission, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultMobileAppsSubmission>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for uploadMobileAppsImage
     * @param appId  (required)
     * @param image Mobile Apps image (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call uploadMobileAppsImageCall(String appId, File image, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/mobileapps/{appId}/image"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (image != null)
        localVarFormParams.put("Image", image);

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call uploadMobileAppsImageValidateBeforeCall(String appId, File image, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling uploadMobileAppsImage(Async)");
        }
        
        // verify the required parameter 'image' is set
        if (image == null) {
            throw new ApiException("Missing the required parameter 'image' when calling uploadMobileAppsImage(Async)");
        }
        

        com.squareup.okhttp.Call call = uploadMobileAppsImageCall(appId, image, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Upload a Mobile Apps Image
     * 
     * @param appId  (required)
     * @param image Mobile Apps image (required)
     * @return RestApiResultMobileAppsImage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultMobileAppsImage uploadMobileAppsImage(String appId, File image) throws ApiException {
        ApiResponse<RestApiResultMobileAppsImage> resp = uploadMobileAppsImageWithHttpInfo(appId, image);
        return resp.getData();
    }

    /**
     * Upload a Mobile Apps Image
     * 
     * @param appId  (required)
     * @param image Mobile Apps image (required)
     * @return ApiResponse&lt;RestApiResultMobileAppsImage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultMobileAppsImage> uploadMobileAppsImageWithHttpInfo(String appId, File image) throws ApiException {
        com.squareup.okhttp.Call call = uploadMobileAppsImageValidateBeforeCall(appId, image, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultMobileAppsImage>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Upload a Mobile Apps Image (asynchronously)
     * 
     * @param appId  (required)
     * @param image Mobile Apps image (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call uploadMobileAppsImageAsync(String appId, File image, final ApiCallback<RestApiResultMobileAppsImage> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = uploadMobileAppsImageValidateBeforeCall(appId, image, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultMobileAppsImage>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
