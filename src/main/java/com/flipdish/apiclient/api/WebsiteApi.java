/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.flipdish.apiclient.api;

import com.flipdish.apiclient.ApiCallback;
import com.flipdish.apiclient.ApiClient;
import com.flipdish.apiclient.ApiException;
import com.flipdish.apiclient.ApiResponse;
import com.flipdish.apiclient.Configuration;
import com.flipdish.apiclient.Pair;
import com.flipdish.apiclient.ProgressRequestBody;
import com.flipdish.apiclient.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import com.flipdish.apiclient.model.IndexPageBase;
import com.flipdish.apiclient.model.RestApiErrorResult;
import com.flipdish.apiclient.model.RestApiForbiddenResult;
import com.flipdish.apiclient.model.RestApiResultIndexPage;
import com.flipdish.apiclient.model.RestApiResultIndexPageBase;
import com.flipdish.apiclient.model.RestApiResultWebsiteImage;
import com.flipdish.apiclient.model.RestApiResultWebsiteTestimonial;
import com.flipdish.apiclient.model.RestApiUnauthorizedResult;
import com.flipdish.apiclient.model.WebsiteTestimonialBase;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WebsiteApi {
    private ApiClient apiClient;

    public WebsiteApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WebsiteApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addTestimonial
     * @param appId Application identifier (required)
     * @param testimonial Testimonial to be added (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addTestimonialCall(String appId, WebsiteTestimonialBase testimonial, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = testimonial;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/website/testimonial"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addTestimonialValidateBeforeCall(String appId, WebsiteTestimonialBase testimonial, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling addTestimonial(Async)");
        }
        
        // verify the required parameter 'testimonial' is set
        if (testimonial == null) {
            throw new ApiException("Missing the required parameter 'testimonial' when calling addTestimonial(Async)");
        }
        

        com.squareup.okhttp.Call call = addTestimonialCall(appId, testimonial, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add a testimonial
     * 
     * @param appId Application identifier (required)
     * @param testimonial Testimonial to be added (required)
     * @return RestApiResultWebsiteTestimonial
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultWebsiteTestimonial addTestimonial(String appId, WebsiteTestimonialBase testimonial) throws ApiException {
        ApiResponse<RestApiResultWebsiteTestimonial> resp = addTestimonialWithHttpInfo(appId, testimonial);
        return resp.getData();
    }

    /**
     * Add a testimonial
     * 
     * @param appId Application identifier (required)
     * @param testimonial Testimonial to be added (required)
     * @return ApiResponse&lt;RestApiResultWebsiteTestimonial&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultWebsiteTestimonial> addTestimonialWithHttpInfo(String appId, WebsiteTestimonialBase testimonial) throws ApiException {
        com.squareup.okhttp.Call call = addTestimonialValidateBeforeCall(appId, testimonial, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultWebsiteTestimonial>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add a testimonial (asynchronously)
     * 
     * @param appId Application identifier (required)
     * @param testimonial Testimonial to be added (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addTestimonialAsync(String appId, WebsiteTestimonialBase testimonial, final ApiCallback<RestApiResultWebsiteTestimonial> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addTestimonialValidateBeforeCall(appId, testimonial, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultWebsiteTestimonial>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteTestimonial
     * @param appId Application identifier (required)
     * @param testimonialId Id of the testimonial to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteTestimonialCall(String appId, Integer testimonialId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/website/testimonial/{testimonialId}"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "testimonialId" + "\\}", apiClient.escapeString(testimonialId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteTestimonialValidateBeforeCall(String appId, Integer testimonialId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling deleteTestimonial(Async)");
        }
        
        // verify the required parameter 'testimonialId' is set
        if (testimonialId == null) {
            throw new ApiException("Missing the required parameter 'testimonialId' when calling deleteTestimonial(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteTestimonialCall(appId, testimonialId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a testimonial
     * 
     * @param appId Application identifier (required)
     * @param testimonialId Id of the testimonial to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteTestimonial(String appId, Integer testimonialId) throws ApiException {
        deleteTestimonialWithHttpInfo(appId, testimonialId);
    }

    /**
     * Delete a testimonial
     * 
     * @param appId Application identifier (required)
     * @param testimonialId Id of the testimonial to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteTestimonialWithHttpInfo(String appId, Integer testimonialId) throws ApiException {
        com.squareup.okhttp.Call call = deleteTestimonialValidateBeforeCall(appId, testimonialId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a testimonial (asynchronously)
     * 
     * @param appId Application identifier (required)
     * @param testimonialId Id of the testimonial to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteTestimonialAsync(String appId, Integer testimonialId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteTestimonialValidateBeforeCall(appId, testimonialId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteWebsiteImage
     * @param appId Application identifier (required)
     * @param imageId Id of the image (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteWebsiteImageCall(String appId, Integer imageId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/website/image/{imageId}"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "imageId" + "\\}", apiClient.escapeString(imageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteWebsiteImageValidateBeforeCall(String appId, Integer imageId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling deleteWebsiteImage(Async)");
        }
        
        // verify the required parameter 'imageId' is set
        if (imageId == null) {
            throw new ApiException("Missing the required parameter 'imageId' when calling deleteWebsiteImage(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteWebsiteImageCall(appId, imageId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete Website Image
     * 
     * @param appId Application identifier (required)
     * @param imageId Id of the image (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteWebsiteImage(String appId, Integer imageId) throws ApiException {
        deleteWebsiteImageWithHttpInfo(appId, imageId);
    }

    /**
     * Delete Website Image
     * 
     * @param appId Application identifier (required)
     * @param imageId Id of the image (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteWebsiteImageWithHttpInfo(String appId, Integer imageId) throws ApiException {
        com.squareup.okhttp.Call call = deleteWebsiteImageValidateBeforeCall(appId, imageId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete Website Image (asynchronously)
     * 
     * @param appId Application identifier (required)
     * @param imageId Id of the image (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteWebsiteImageAsync(String appId, Integer imageId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteWebsiteImageValidateBeforeCall(appId, imageId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for editTestimonial
     * @param appId Application identifier (required)
     * @param testimonialId Id of the testimonial to edit (required)
     * @param testimonial New values of the testimonial (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editTestimonialCall(String appId, Integer testimonialId, WebsiteTestimonialBase testimonial, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = testimonial;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/website/testimonial/{testimonialId}"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "testimonialId" + "\\}", apiClient.escapeString(testimonialId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editTestimonialValidateBeforeCall(String appId, Integer testimonialId, WebsiteTestimonialBase testimonial, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling editTestimonial(Async)");
        }
        
        // verify the required parameter 'testimonialId' is set
        if (testimonialId == null) {
            throw new ApiException("Missing the required parameter 'testimonialId' when calling editTestimonial(Async)");
        }
        
        // verify the required parameter 'testimonial' is set
        if (testimonial == null) {
            throw new ApiException("Missing the required parameter 'testimonial' when calling editTestimonial(Async)");
        }
        

        com.squareup.okhttp.Call call = editTestimonialCall(appId, testimonialId, testimonial, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Edit a testimonial
     * 
     * @param appId Application identifier (required)
     * @param testimonialId Id of the testimonial to edit (required)
     * @param testimonial New values of the testimonial (required)
     * @return RestApiResultWebsiteTestimonial
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultWebsiteTestimonial editTestimonial(String appId, Integer testimonialId, WebsiteTestimonialBase testimonial) throws ApiException {
        ApiResponse<RestApiResultWebsiteTestimonial> resp = editTestimonialWithHttpInfo(appId, testimonialId, testimonial);
        return resp.getData();
    }

    /**
     * Edit a testimonial
     * 
     * @param appId Application identifier (required)
     * @param testimonialId Id of the testimonial to edit (required)
     * @param testimonial New values of the testimonial (required)
     * @return ApiResponse&lt;RestApiResultWebsiteTestimonial&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultWebsiteTestimonial> editTestimonialWithHttpInfo(String appId, Integer testimonialId, WebsiteTestimonialBase testimonial) throws ApiException {
        com.squareup.okhttp.Call call = editTestimonialValidateBeforeCall(appId, testimonialId, testimonial, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultWebsiteTestimonial>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Edit a testimonial (asynchronously)
     * 
     * @param appId Application identifier (required)
     * @param testimonialId Id of the testimonial to edit (required)
     * @param testimonial New values of the testimonial (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editTestimonialAsync(String appId, Integer testimonialId, WebsiteTestimonialBase testimonial, final ApiCallback<RestApiResultWebsiteTestimonial> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editTestimonialValidateBeforeCall(appId, testimonialId, testimonial, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultWebsiteTestimonial>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getIndexConfiguration
     * @param appId Application identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getIndexConfigurationCall(String appId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/website/index"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getIndexConfigurationValidateBeforeCall(String appId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getIndexConfiguration(Async)");
        }
        

        com.squareup.okhttp.Call call = getIndexConfigurationCall(appId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Index Configuration
     * 
     * @param appId Application identifier (required)
     * @return RestApiResultIndexPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultIndexPage getIndexConfiguration(String appId) throws ApiException {
        ApiResponse<RestApiResultIndexPage> resp = getIndexConfigurationWithHttpInfo(appId);
        return resp.getData();
    }

    /**
     * Get Index Configuration
     * 
     * @param appId Application identifier (required)
     * @return ApiResponse&lt;RestApiResultIndexPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultIndexPage> getIndexConfigurationWithHttpInfo(String appId) throws ApiException {
        com.squareup.okhttp.Call call = getIndexConfigurationValidateBeforeCall(appId, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultIndexPage>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Index Configuration (asynchronously)
     * 
     * @param appId Application identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getIndexConfigurationAsync(String appId, final ApiCallback<RestApiResultIndexPage> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getIndexConfigurationValidateBeforeCall(appId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultIndexPage>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setIndexConfiguration
     * @param appId Application identifier (required)
     * @param indexPage New index page definition (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setIndexConfigurationCall(String appId, IndexPageBase indexPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = indexPage;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/website/index"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setIndexConfigurationValidateBeforeCall(String appId, IndexPageBase indexPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling setIndexConfiguration(Async)");
        }
        
        // verify the required parameter 'indexPage' is set
        if (indexPage == null) {
            throw new ApiException("Missing the required parameter 'indexPage' when calling setIndexConfiguration(Async)");
        }
        

        com.squareup.okhttp.Call call = setIndexConfigurationCall(appId, indexPage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Set Index Configuration
     * 
     * @param appId Application identifier (required)
     * @param indexPage New index page definition (required)
     * @return RestApiResultIndexPageBase
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultIndexPageBase setIndexConfiguration(String appId, IndexPageBase indexPage) throws ApiException {
        ApiResponse<RestApiResultIndexPageBase> resp = setIndexConfigurationWithHttpInfo(appId, indexPage);
        return resp.getData();
    }

    /**
     * Set Index Configuration
     * 
     * @param appId Application identifier (required)
     * @param indexPage New index page definition (required)
     * @return ApiResponse&lt;RestApiResultIndexPageBase&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultIndexPageBase> setIndexConfigurationWithHttpInfo(String appId, IndexPageBase indexPage) throws ApiException {
        com.squareup.okhttp.Call call = setIndexConfigurationValidateBeforeCall(appId, indexPage, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultIndexPageBase>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Set Index Configuration (asynchronously)
     * 
     * @param appId Application identifier (required)
     * @param indexPage New index page definition (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setIndexConfigurationAsync(String appId, IndexPageBase indexPage, final ApiCallback<RestApiResultIndexPageBase> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setIndexConfigurationValidateBeforeCall(appId, indexPage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultIndexPageBase>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for uploadWebsiteImage
     * @param appId Application identifier (required)
     * @param imageLocation Section for which to upload the image (required)
     * @param image App Logo (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call uploadWebsiteImageCall(String appId, String imageLocation, File image, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/website/image/{imageLocation}"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "imageLocation" + "\\}", apiClient.escapeString(imageLocation.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (image != null)
        localVarFormParams.put("Image", image);

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call uploadWebsiteImageValidateBeforeCall(String appId, String imageLocation, File image, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling uploadWebsiteImage(Async)");
        }
        
        // verify the required parameter 'imageLocation' is set
        if (imageLocation == null) {
            throw new ApiException("Missing the required parameter 'imageLocation' when calling uploadWebsiteImage(Async)");
        }
        
        // verify the required parameter 'image' is set
        if (image == null) {
            throw new ApiException("Missing the required parameter 'image' when calling uploadWebsiteImage(Async)");
        }
        

        com.squareup.okhttp.Call call = uploadWebsiteImageCall(appId, imageLocation, image, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Upload Website Image
     * 
     * @param appId Application identifier (required)
     * @param imageLocation Section for which to upload the image (required)
     * @param image App Logo (required)
     * @return RestApiResultWebsiteImage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultWebsiteImage uploadWebsiteImage(String appId, String imageLocation, File image) throws ApiException {
        ApiResponse<RestApiResultWebsiteImage> resp = uploadWebsiteImageWithHttpInfo(appId, imageLocation, image);
        return resp.getData();
    }

    /**
     * Upload Website Image
     * 
     * @param appId Application identifier (required)
     * @param imageLocation Section for which to upload the image (required)
     * @param image App Logo (required)
     * @return ApiResponse&lt;RestApiResultWebsiteImage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultWebsiteImage> uploadWebsiteImageWithHttpInfo(String appId, String imageLocation, File image) throws ApiException {
        com.squareup.okhttp.Call call = uploadWebsiteImageValidateBeforeCall(appId, imageLocation, image, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultWebsiteImage>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Upload Website Image (asynchronously)
     * 
     * @param appId Application identifier (required)
     * @param imageLocation Section for which to upload the image (required)
     * @param image App Logo (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call uploadWebsiteImageAsync(String appId, String imageLocation, File image, final ApiCallback<RestApiResultWebsiteImage> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = uploadWebsiteImageValidateBeforeCall(appId, imageLocation, image, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultWebsiteImage>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for websiteCheckNow
     * @param appId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call websiteCheckNowCall(String appId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/website/dnscheck"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call websiteCheckNowValidateBeforeCall(String appId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling websiteCheckNow(Async)");
        }
        

        com.squareup.okhttp.Call call = websiteCheckNowCall(appId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Triggers a Check DNS Process
     * 
     * @param appId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void websiteCheckNow(String appId) throws ApiException {
        websiteCheckNowWithHttpInfo(appId);
    }

    /**
     * Triggers a Check DNS Process
     * 
     * @param appId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> websiteCheckNowWithHttpInfo(String appId) throws ApiException {
        com.squareup.okhttp.Call call = websiteCheckNowValidateBeforeCall(appId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Triggers a Check DNS Process (asynchronously)
     * 
     * @param appId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call websiteCheckNowAsync(String appId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = websiteCheckNowValidateBeforeCall(appId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
