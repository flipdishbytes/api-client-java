/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.flipdish.apiclient.api;

import com.flipdish.apiclient.ApiCallback;
import com.flipdish.apiclient.ApiClient;
import com.flipdish.apiclient.ApiException;
import com.flipdish.apiclient.ApiResponse;
import com.flipdish.apiclient.Configuration;
import com.flipdish.apiclient.Pair;
import com.flipdish.apiclient.ProgressRequestBody;
import com.flipdish.apiclient.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.flipdish.apiclient.model.Accept;
import org.threeten.bp.OffsetDateTime;
import com.flipdish.apiclient.model.OrderDeliveryInformationBase;
import com.flipdish.apiclient.model.OrderFulfillmentStatusBase;
import com.flipdish.apiclient.model.Refund;
import com.flipdish.apiclient.model.Reject;
import com.flipdish.apiclient.model.RestApiArrayResultOrderFulfillmentStatus;
import com.flipdish.apiclient.model.RestApiErrorResult;
import com.flipdish.apiclient.model.RestApiForbiddenResult;
import com.flipdish.apiclient.model.RestApiPaginationResultOrder;
import com.flipdish.apiclient.model.RestApiPaginationResultOrderSummary;
import com.flipdish.apiclient.model.RestApiResultOrder;
import com.flipdish.apiclient.model.RestApiResultOrderDeliveryInformation;
import com.flipdish.apiclient.model.RestApiResultOrderFulfillmentStatus;
import com.flipdish.apiclient.model.RestApiUnauthorizedResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OrdersApi {
    private ApiClient apiClient;

    public OrdersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OrdersApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for acceptOrder
     * @param id Order identifier (required)
     * @param acceptObject Order accept parameters (eg: EstimatedMinutesForDelivery) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call acceptOrderCall(Integer id, Accept acceptObject, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = acceptObject;

        // create path and map variables
        String localVarPath = "/api/v1.0/orders/{id}/accept"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call acceptOrderValidateBeforeCall(Integer id, Accept acceptObject, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling acceptOrder(Async)");
        }
        
        // verify the required parameter 'acceptObject' is set
        if (acceptObject == null) {
            throw new ApiException("Missing the required parameter 'acceptObject' when calling acceptOrder(Async)");
        }
        

        com.squareup.okhttp.Call call = acceptOrderCall(id, acceptObject, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Accept order
     * To accept an order, you create an &#x60;accept&#x60; object and send it to Flipdish API using HTTP POST method. &#x60;Id&#x60; path parameter identifies the order.
     * @param id Order identifier (required)
     * @param acceptObject Order accept parameters (eg: EstimatedMinutesForDelivery) (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void acceptOrder(Integer id, Accept acceptObject) throws ApiException {
        acceptOrderWithHttpInfo(id, acceptObject);
    }

    /**
     * Accept order
     * To accept an order, you create an &#x60;accept&#x60; object and send it to Flipdish API using HTTP POST method. &#x60;Id&#x60; path parameter identifies the order.
     * @param id Order identifier (required)
     * @param acceptObject Order accept parameters (eg: EstimatedMinutesForDelivery) (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> acceptOrderWithHttpInfo(Integer id, Accept acceptObject) throws ApiException {
        com.squareup.okhttp.Call call = acceptOrderValidateBeforeCall(id, acceptObject, null, null);
        return apiClient.execute(call);
    }

    /**
     * Accept order (asynchronously)
     * To accept an order, you create an &#x60;accept&#x60; object and send it to Flipdish API using HTTP POST method. &#x60;Id&#x60; path parameter identifies the order.
     * @param id Order identifier (required)
     * @param acceptObject Order accept parameters (eg: EstimatedMinutesForDelivery) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call acceptOrderAsync(Integer id, Accept acceptObject, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = acceptOrderValidateBeforeCall(id, acceptObject, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for dispatchOrder
     * @param id Order identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call dispatchOrderCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/orders/{id}/dispatch"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call dispatchOrderValidateBeforeCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dispatchOrder(Async)");
        }
        

        com.squareup.okhttp.Call call = dispatchOrderCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Dispatch order
     * To dispatch an order send a POST request with &#x60;Id&#x60; path parameter which identifies the order.
     * @param id Order identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void dispatchOrder(Integer id) throws ApiException {
        dispatchOrderWithHttpInfo(id);
    }

    /**
     * Dispatch order
     * To dispatch an order send a POST request with &#x60;Id&#x60; path parameter which identifies the order.
     * @param id Order identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> dispatchOrderWithHttpInfo(Integer id) throws ApiException {
        com.squareup.okhttp.Call call = dispatchOrderValidateBeforeCall(id, null, null);
        return apiClient.execute(call);
    }

    /**
     * Dispatch order (asynchronously)
     * To dispatch an order send a POST request with &#x60;Id&#x60; path parameter which identifies the order.
     * @param id Order identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call dispatchOrderAsync(Integer id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = dispatchOrderValidateBeforeCall(id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDeliveryInformation
     * @param orderId Flipdish Order Id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDeliveryInformationCall(Integer orderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/orders/{orderId}/deliveryinfo"
            .replaceAll("\\{" + "orderId" + "\\}", apiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDeliveryInformationValidateBeforeCall(Integer orderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling getDeliveryInformation(Async)");
        }
        

        com.squareup.okhttp.Call call = getDeliveryInformationCall(orderId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get order delivery information
     * Returns an orders delivery information. This would be used to display the latest known delivery information on a screen.
     * @param orderId Flipdish Order Id (required)
     * @return RestApiResultOrderDeliveryInformation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultOrderDeliveryInformation getDeliveryInformation(Integer orderId) throws ApiException {
        ApiResponse<RestApiResultOrderDeliveryInformation> resp = getDeliveryInformationWithHttpInfo(orderId);
        return resp.getData();
    }

    /**
     * Get order delivery information
     * Returns an orders delivery information. This would be used to display the latest known delivery information on a screen.
     * @param orderId Flipdish Order Id (required)
     * @return ApiResponse&lt;RestApiResultOrderDeliveryInformation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultOrderDeliveryInformation> getDeliveryInformationWithHttpInfo(Integer orderId) throws ApiException {
        com.squareup.okhttp.Call call = getDeliveryInformationValidateBeforeCall(orderId, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultOrderDeliveryInformation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get order delivery information (asynchronously)
     * Returns an orders delivery information. This would be used to display the latest known delivery information on a screen.
     * @param orderId Flipdish Order Id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDeliveryInformationAsync(Integer orderId, final ApiCallback<RestApiResultOrderDeliveryInformation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDeliveryInformationValidateBeforeCall(orderId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultOrderDeliveryInformation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFulfillmentStatus
     * @param orderId Flipdish Order Id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFulfillmentStatusCall(Integer orderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/orders/{orderId}/fulfillmentstatus"
            .replaceAll("\\{" + "orderId" + "\\}", apiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFulfillmentStatusValidateBeforeCall(Integer orderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling getFulfillmentStatus(Async)");
        }
        

        com.squareup.okhttp.Call call = getFulfillmentStatusCall(orderId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get order fulfillment status
     * [BETA - this endpoint is under development, do not use it in your production system] Returns an order&#39;s fulfillment status.
     * @param orderId Flipdish Order Id (required)
     * @return RestApiResultOrderFulfillmentStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultOrderFulfillmentStatus getFulfillmentStatus(Integer orderId) throws ApiException {
        ApiResponse<RestApiResultOrderFulfillmentStatus> resp = getFulfillmentStatusWithHttpInfo(orderId);
        return resp.getData();
    }

    /**
     * Get order fulfillment status
     * [BETA - this endpoint is under development, do not use it in your production system] Returns an order&#39;s fulfillment status.
     * @param orderId Flipdish Order Id (required)
     * @return ApiResponse&lt;RestApiResultOrderFulfillmentStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultOrderFulfillmentStatus> getFulfillmentStatusWithHttpInfo(Integer orderId) throws ApiException {
        com.squareup.okhttp.Call call = getFulfillmentStatusValidateBeforeCall(orderId, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultOrderFulfillmentStatus>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get order fulfillment status (asynchronously)
     * [BETA - this endpoint is under development, do not use it in your production system] Returns an order&#39;s fulfillment status.
     * @param orderId Flipdish Order Id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFulfillmentStatusAsync(Integer orderId, final ApiCallback<RestApiResultOrderFulfillmentStatus> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFulfillmentStatusValidateBeforeCall(orderId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultOrderFulfillmentStatus>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOrderById
     * @param id Order identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOrderByIdCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/orders/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOrderByIdValidateBeforeCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrderById(Async)");
        }
        

        com.squareup.okhttp.Call call = getOrderByIdCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get order by ID
     * 
     * @param id Order identifier (required)
     * @return RestApiResultOrder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultOrder getOrderById(Integer id) throws ApiException {
        ApiResponse<RestApiResultOrder> resp = getOrderByIdWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Get order by ID
     * 
     * @param id Order identifier (required)
     * @return ApiResponse&lt;RestApiResultOrder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultOrder> getOrderByIdWithHttpInfo(Integer id) throws ApiException {
        com.squareup.okhttp.Call call = getOrderByIdValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultOrder>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get order by ID (asynchronously)
     * 
     * @param id Order identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOrderByIdAsync(Integer id, final ApiCallback<RestApiResultOrder> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOrderByIdValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultOrder>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOrders
     * @param physicalRestaurantId Physical restaurant identifiers (optional)
     * @param state Order states (optional)
     * @param from Order has been placed after this parameter value (optional)
     * @param to Order has been placed before this parameter value (optional)
     * @param page Requested page number (optional)
     * @param limit Requested page limit (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOrdersCall(List<Integer> physicalRestaurantId, List<String> state, OffsetDateTime from, OffsetDateTime to, Integer page, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/orders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (physicalRestaurantId != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "physicalRestaurantId", physicalRestaurantId));
        if (state != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "state", state));
        if (from != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("from", from));
        if (to != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("to", to));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOrdersValidateBeforeCall(List<Integer> physicalRestaurantId, List<String> state, OffsetDateTime from, OffsetDateTime to, Integer page, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getOrdersCall(physicalRestaurantId, state, from, to, page, limit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get orders by filter
     * 
     * @param physicalRestaurantId Physical restaurant identifiers (optional)
     * @param state Order states (optional)
     * @param from Order has been placed after this parameter value (optional)
     * @param to Order has been placed before this parameter value (optional)
     * @param page Requested page number (optional)
     * @param limit Requested page limit (optional)
     * @return RestApiPaginationResultOrder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiPaginationResultOrder getOrders(List<Integer> physicalRestaurantId, List<String> state, OffsetDateTime from, OffsetDateTime to, Integer page, Integer limit) throws ApiException {
        ApiResponse<RestApiPaginationResultOrder> resp = getOrdersWithHttpInfo(physicalRestaurantId, state, from, to, page, limit);
        return resp.getData();
    }

    /**
     * Get orders by filter
     * 
     * @param physicalRestaurantId Physical restaurant identifiers (optional)
     * @param state Order states (optional)
     * @param from Order has been placed after this parameter value (optional)
     * @param to Order has been placed before this parameter value (optional)
     * @param page Requested page number (optional)
     * @param limit Requested page limit (optional)
     * @return ApiResponse&lt;RestApiPaginationResultOrder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiPaginationResultOrder> getOrdersWithHttpInfo(List<Integer> physicalRestaurantId, List<String> state, OffsetDateTime from, OffsetDateTime to, Integer page, Integer limit) throws ApiException {
        com.squareup.okhttp.Call call = getOrdersValidateBeforeCall(physicalRestaurantId, state, from, to, page, limit, null, null);
        Type localVarReturnType = new TypeToken<RestApiPaginationResultOrder>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get orders by filter (asynchronously)
     * 
     * @param physicalRestaurantId Physical restaurant identifiers (optional)
     * @param state Order states (optional)
     * @param from Order has been placed after this parameter value (optional)
     * @param to Order has been placed before this parameter value (optional)
     * @param page Requested page number (optional)
     * @param limit Requested page limit (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOrdersAsync(List<Integer> physicalRestaurantId, List<String> state, OffsetDateTime from, OffsetDateTime to, Integer page, Integer limit, final ApiCallback<RestApiPaginationResultOrder> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOrdersValidateBeforeCall(physicalRestaurantId, state, from, to, page, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiPaginationResultOrder>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOrdersSummary
     * @param appId App Name Id (required)
     * @param searchQuery Query string (optional)
     * @param physicalRestaurantId Physical restaurant identifiers (optional)
     * @param state Order states (optional)
     * @param page Requested page number (optional)
     * @param limit Requested page limit (optional)
     * @param orderByRequestedForTime  (optional)
     * @param channels  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOrdersSummaryCall(String appId, String searchQuery, List<Integer> physicalRestaurantId, List<String> state, Integer page, Integer limit, Boolean orderByRequestedForTime, List<String> channels, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/orders/summaries"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (searchQuery != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("searchQuery", searchQuery));
        if (physicalRestaurantId != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "physicalRestaurantId", physicalRestaurantId));
        if (state != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "state", state));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (orderByRequestedForTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orderByRequestedForTime", orderByRequestedForTime));
        if (channels != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "channels", channels));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOrdersSummaryValidateBeforeCall(String appId, String searchQuery, List<Integer> physicalRestaurantId, List<String> state, Integer page, Integer limit, Boolean orderByRequestedForTime, List<String> channels, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getOrdersSummary(Async)");
        }
        

        com.squareup.okhttp.Call call = getOrdersSummaryCall(appId, searchQuery, physicalRestaurantId, state, page, limit, orderByRequestedForTime, channels, progressListener, progressRequestListener);
        return call;

    }

    /**
     * [PRIVATE API] Get summary of orders by filter
     * 
     * @param appId App Name Id (required)
     * @param searchQuery Query string (optional)
     * @param physicalRestaurantId Physical restaurant identifiers (optional)
     * @param state Order states (optional)
     * @param page Requested page number (optional)
     * @param limit Requested page limit (optional)
     * @param orderByRequestedForTime  (optional)
     * @param channels  (optional)
     * @return RestApiPaginationResultOrderSummary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiPaginationResultOrderSummary getOrdersSummary(String appId, String searchQuery, List<Integer> physicalRestaurantId, List<String> state, Integer page, Integer limit, Boolean orderByRequestedForTime, List<String> channels) throws ApiException {
        ApiResponse<RestApiPaginationResultOrderSummary> resp = getOrdersSummaryWithHttpInfo(appId, searchQuery, physicalRestaurantId, state, page, limit, orderByRequestedForTime, channels);
        return resp.getData();
    }

    /**
     * [PRIVATE API] Get summary of orders by filter
     * 
     * @param appId App Name Id (required)
     * @param searchQuery Query string (optional)
     * @param physicalRestaurantId Physical restaurant identifiers (optional)
     * @param state Order states (optional)
     * @param page Requested page number (optional)
     * @param limit Requested page limit (optional)
     * @param orderByRequestedForTime  (optional)
     * @param channels  (optional)
     * @return ApiResponse&lt;RestApiPaginationResultOrderSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiPaginationResultOrderSummary> getOrdersSummaryWithHttpInfo(String appId, String searchQuery, List<Integer> physicalRestaurantId, List<String> state, Integer page, Integer limit, Boolean orderByRequestedForTime, List<String> channels) throws ApiException {
        com.squareup.okhttp.Call call = getOrdersSummaryValidateBeforeCall(appId, searchQuery, physicalRestaurantId, state, page, limit, orderByRequestedForTime, channels, null, null);
        Type localVarReturnType = new TypeToken<RestApiPaginationResultOrderSummary>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * [PRIVATE API] Get summary of orders by filter (asynchronously)
     * 
     * @param appId App Name Id (required)
     * @param searchQuery Query string (optional)
     * @param physicalRestaurantId Physical restaurant identifiers (optional)
     * @param state Order states (optional)
     * @param page Requested page number (optional)
     * @param limit Requested page limit (optional)
     * @param orderByRequestedForTime  (optional)
     * @param channels  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOrdersSummaryAsync(String appId, String searchQuery, List<Integer> physicalRestaurantId, List<String> state, Integer page, Integer limit, Boolean orderByRequestedForTime, List<String> channels, final ApiCallback<RestApiPaginationResultOrderSummary> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOrdersSummaryValidateBeforeCall(appId, searchQuery, physicalRestaurantId, state, page, limit, orderByRequestedForTime, channels, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiPaginationResultOrderSummary>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for refundOrder
     * @param id Order identifier (required)
     * @param refundObject  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call refundOrderCall(Integer id, Refund refundObject, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = refundObject;

        // create path and map variables
        String localVarPath = "/api/v1.0/orders/{id}/refund"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call refundOrderValidateBeforeCall(Integer id, Refund refundObject, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling refundOrder(Async)");
        }
        
        // verify the required parameter 'refundObject' is set
        if (refundObject == null) {
            throw new ApiException("Missing the required parameter 'refundObject' when calling refundOrder(Async)");
        }
        

        com.squareup.okhttp.Call call = refundOrderCall(id, refundObject, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Refund order
     * To refund an order, you create a &#x60;refund&#x60; object and send it to Flipdish API using HTTP POST method. &#x60;Id&#x60; path parameter identifies the order.
     * @param id Order identifier (required)
     * @param refundObject  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void refundOrder(Integer id, Refund refundObject) throws ApiException {
        refundOrderWithHttpInfo(id, refundObject);
    }

    /**
     * Refund order
     * To refund an order, you create a &#x60;refund&#x60; object and send it to Flipdish API using HTTP POST method. &#x60;Id&#x60; path parameter identifies the order.
     * @param id Order identifier (required)
     * @param refundObject  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> refundOrderWithHttpInfo(Integer id, Refund refundObject) throws ApiException {
        com.squareup.okhttp.Call call = refundOrderValidateBeforeCall(id, refundObject, null, null);
        return apiClient.execute(call);
    }

    /**
     * Refund order (asynchronously)
     * To refund an order, you create a &#x60;refund&#x60; object and send it to Flipdish API using HTTP POST method. &#x60;Id&#x60; path parameter identifies the order.
     * @param id Order identifier (required)
     * @param refundObject  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call refundOrderAsync(Integer id, Refund refundObject, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = refundOrderValidateBeforeCall(id, refundObject, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for rejectOrder
     * @param id Order identifier (required)
     * @param rejectObject  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call rejectOrderCall(Integer id, Reject rejectObject, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = rejectObject;

        // create path and map variables
        String localVarPath = "/api/v1.0/orders/{id}/reject"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call rejectOrderValidateBeforeCall(Integer id, Reject rejectObject, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling rejectOrder(Async)");
        }
        
        // verify the required parameter 'rejectObject' is set
        if (rejectObject == null) {
            throw new ApiException("Missing the required parameter 'rejectObject' when calling rejectOrder(Async)");
        }
        

        com.squareup.okhttp.Call call = rejectOrderCall(id, rejectObject, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Reject order
     * To reject an order, you create a &#x60;reject&#x60; object and send it to Flipdish API using HTTP POST method. &#x60;Id&#x60; path parameter identifies the order.
     * @param id Order identifier (required)
     * @param rejectObject  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void rejectOrder(Integer id, Reject rejectObject) throws ApiException {
        rejectOrderWithHttpInfo(id, rejectObject);
    }

    /**
     * Reject order
     * To reject an order, you create a &#x60;reject&#x60; object and send it to Flipdish API using HTTP POST method. &#x60;Id&#x60; path parameter identifies the order.
     * @param id Order identifier (required)
     * @param rejectObject  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> rejectOrderWithHttpInfo(Integer id, Reject rejectObject) throws ApiException {
        com.squareup.okhttp.Call call = rejectOrderValidateBeforeCall(id, rejectObject, null, null);
        return apiClient.execute(call);
    }

    /**
     * Reject order (asynchronously)
     * To reject an order, you create a &#x60;reject&#x60; object and send it to Flipdish API using HTTP POST method. &#x60;Id&#x60; path parameter identifies the order.
     * @param id Order identifier (required)
     * @param rejectObject  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call rejectOrderAsync(Integer id, Reject rejectObject, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = rejectOrderValidateBeforeCall(id, rejectObject, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for searchFulfillmentStatuses
     * @param appId App Id (required)
     * @param orderIds Flipdish Order Id list, comma separated (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchFulfillmentStatusesCall(String appId, String orderIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/orders/fulfillmentstatuses"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (orderIds != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orderIds", orderIds));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchFulfillmentStatusesValidateBeforeCall(String appId, String orderIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling searchFulfillmentStatuses(Async)");
        }
        
        // verify the required parameter 'orderIds' is set
        if (orderIds == null) {
            throw new ApiException("Missing the required parameter 'orderIds' when calling searchFulfillmentStatuses(Async)");
        }
        

        com.squareup.okhttp.Call call = searchFulfillmentStatusesCall(appId, orderIds, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get fulfillment status for a list of orders
     * [BETA - this endpoint is under development, do not use it in your production system] Returns fulfillment status for list of orders.
     * @param appId App Id (required)
     * @param orderIds Flipdish Order Id list, comma separated (required)
     * @return RestApiArrayResultOrderFulfillmentStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiArrayResultOrderFulfillmentStatus searchFulfillmentStatuses(String appId, String orderIds) throws ApiException {
        ApiResponse<RestApiArrayResultOrderFulfillmentStatus> resp = searchFulfillmentStatusesWithHttpInfo(appId, orderIds);
        return resp.getData();
    }

    /**
     * Get fulfillment status for a list of orders
     * [BETA - this endpoint is under development, do not use it in your production system] Returns fulfillment status for list of orders.
     * @param appId App Id (required)
     * @param orderIds Flipdish Order Id list, comma separated (required)
     * @return ApiResponse&lt;RestApiArrayResultOrderFulfillmentStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiArrayResultOrderFulfillmentStatus> searchFulfillmentStatusesWithHttpInfo(String appId, String orderIds) throws ApiException {
        com.squareup.okhttp.Call call = searchFulfillmentStatusesValidateBeforeCall(appId, orderIds, null, null);
        Type localVarReturnType = new TypeToken<RestApiArrayResultOrderFulfillmentStatus>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get fulfillment status for a list of orders (asynchronously)
     * [BETA - this endpoint is under development, do not use it in your production system] Returns fulfillment status for list of orders.
     * @param appId App Id (required)
     * @param orderIds Flipdish Order Id list, comma separated (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchFulfillmentStatusesAsync(String appId, String orderIds, final ApiCallback<RestApiArrayResultOrderFulfillmentStatus> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchFulfillmentStatusesValidateBeforeCall(appId, orderIds, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiArrayResultOrderFulfillmentStatus>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateDeliveryInformation
     * @param orderId Flipdish Order Id (required)
     * @param deliveryInformation Delivery Information (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateDeliveryInformationCall(Integer orderId, OrderDeliveryInformationBase deliveryInformation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = deliveryInformation;

        // create path and map variables
        String localVarPath = "/api/v1.0/orders/{orderId}/deliveryinfo"
            .replaceAll("\\{" + "orderId" + "\\}", apiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateDeliveryInformationValidateBeforeCall(Integer orderId, OrderDeliveryInformationBase deliveryInformation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling updateDeliveryInformation(Async)");
        }
        
        // verify the required parameter 'deliveryInformation' is set
        if (deliveryInformation == null) {
            throw new ApiException("Missing the required parameter 'deliveryInformation' when calling updateDeliveryInformation(Async)");
        }
        

        com.squareup.okhttp.Call call = updateDeliveryInformationCall(orderId, deliveryInformation, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add/update delivery-related information to an order
     * Returns an order&#39;s delivery information. This would be used to display the latest known delivery information on a screen.
     * @param orderId Flipdish Order Id (required)
     * @param deliveryInformation Delivery Information (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateDeliveryInformation(Integer orderId, OrderDeliveryInformationBase deliveryInformation) throws ApiException {
        updateDeliveryInformationWithHttpInfo(orderId, deliveryInformation);
    }

    /**
     * Add/update delivery-related information to an order
     * Returns an order&#39;s delivery information. This would be used to display the latest known delivery information on a screen.
     * @param orderId Flipdish Order Id (required)
     * @param deliveryInformation Delivery Information (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateDeliveryInformationWithHttpInfo(Integer orderId, OrderDeliveryInformationBase deliveryInformation) throws ApiException {
        com.squareup.okhttp.Call call = updateDeliveryInformationValidateBeforeCall(orderId, deliveryInformation, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add/update delivery-related information to an order (asynchronously)
     * Returns an order&#39;s delivery information. This would be used to display the latest known delivery information on a screen.
     * @param orderId Flipdish Order Id (required)
     * @param deliveryInformation Delivery Information (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateDeliveryInformationAsync(Integer orderId, OrderDeliveryInformationBase deliveryInformation, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateDeliveryInformationValidateBeforeCall(orderId, deliveryInformation, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateFulfillmentStatus
     * @param orderId Flipdish Order Id (required)
     * @param fulfillmentStatusRequest Fulfillment Status (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateFulfillmentStatusCall(Integer orderId, OrderFulfillmentStatusBase fulfillmentStatusRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = fulfillmentStatusRequest;

        // create path and map variables
        String localVarPath = "/api/v1.0/orders/{orderId}/fulfillmentstatus"
            .replaceAll("\\{" + "orderId" + "\\}", apiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateFulfillmentStatusValidateBeforeCall(Integer orderId, OrderFulfillmentStatusBase fulfillmentStatusRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling updateFulfillmentStatus(Async)");
        }
        
        // verify the required parameter 'fulfillmentStatusRequest' is set
        if (fulfillmentStatusRequest == null) {
            throw new ApiException("Missing the required parameter 'fulfillmentStatusRequest' when calling updateFulfillmentStatus(Async)");
        }
        

        com.squareup.okhttp.Call call = updateFulfillmentStatusCall(orderId, fulfillmentStatusRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add/update fulfillment status information to an order
     * [BETA - this endpoint is under development, do not use it in your production system] Updates an order&#39;s fulfillment status.
     * @param orderId Flipdish Order Id (required)
     * @param fulfillmentStatusRequest Fulfillment Status (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateFulfillmentStatus(Integer orderId, OrderFulfillmentStatusBase fulfillmentStatusRequest) throws ApiException {
        updateFulfillmentStatusWithHttpInfo(orderId, fulfillmentStatusRequest);
    }

    /**
     * Add/update fulfillment status information to an order
     * [BETA - this endpoint is under development, do not use it in your production system] Updates an order&#39;s fulfillment status.
     * @param orderId Flipdish Order Id (required)
     * @param fulfillmentStatusRequest Fulfillment Status (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateFulfillmentStatusWithHttpInfo(Integer orderId, OrderFulfillmentStatusBase fulfillmentStatusRequest) throws ApiException {
        com.squareup.okhttp.Call call = updateFulfillmentStatusValidateBeforeCall(orderId, fulfillmentStatusRequest, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add/update fulfillment status information to an order (asynchronously)
     * [BETA - this endpoint is under development, do not use it in your production system] Updates an order&#39;s fulfillment status.
     * @param orderId Flipdish Order Id (required)
     * @param fulfillmentStatusRequest Fulfillment Status (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateFulfillmentStatusAsync(Integer orderId, OrderFulfillmentStatusBase fulfillmentStatusRequest, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateFulfillmentStatusValidateBeforeCall(orderId, fulfillmentStatusRequest, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
