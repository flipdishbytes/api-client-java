/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.flipdish.apiclient.api;

import com.flipdish.apiclient.ApiCallback;
import com.flipdish.apiclient.ApiClient;
import com.flipdish.apiclient.ApiException;
import com.flipdish.apiclient.ApiResponse;
import com.flipdish.apiclient.Configuration;
import com.flipdish.apiclient.Pair;
import com.flipdish.apiclient.ProgressRequestBody;
import com.flipdish.apiclient.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.flipdish.apiclient.model.RestApiErrorResult;
import com.flipdish.apiclient.model.RestApiForbiddenResult;
import com.flipdish.apiclient.model.RestApiPaginationResultStoreGroup;
import com.flipdish.apiclient.model.RestApiPaginationResultStoreGroupExtended;
import com.flipdish.apiclient.model.RestApiResultStoreGroup;
import com.flipdish.apiclient.model.RestApiResultStoreGroupBase;
import com.flipdish.apiclient.model.RestApiUnauthorizedResult;
import com.flipdish.apiclient.model.StoreGroupBase;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StoreGroupsApi {
    private ApiClient apiClient;
    private Map<String, String> headers;

    public StoreGroupsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StoreGroupsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public void setHeadersOverrides(Map<String, String> headers) {
        this.headers = headers;
    }

    /**
     * Build call for assignStoresToStoreGroup
     * @param appId  (required)
     * @param storeGroupId  (required)
     * @param storeIds  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call assignStoresToStoreGroupCall(String appId, Integer storeGroupId, List<Integer> storeIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = storeIds;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/storegroups/{storeGroupId}/assignStores"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "storeGroupId" + "\\}", apiClient.escapeString(storeGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call assignStoresToStoreGroupValidateBeforeCall(String appId, Integer storeGroupId, List<Integer> storeIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling assignStoresToStoreGroup(Async)");
        }
        
        // verify the required parameter 'storeGroupId' is set
        if (storeGroupId == null) {
            throw new ApiException("Missing the required parameter 'storeGroupId' when calling assignStoresToStoreGroup(Async)");
        }
        
        // verify the required parameter 'storeIds' is set
        if (storeIds == null) {
            throw new ApiException("Missing the required parameter 'storeIds' when calling assignStoresToStoreGroup(Async)");
        }
        

        com.squareup.okhttp.Call call = assignStoresToStoreGroupCall(appId, storeGroupId, storeIds, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param storeGroupId  (required)
     * @param storeIds  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void assignStoresToStoreGroup(String appId, Integer storeGroupId, List<Integer> storeIds) throws ApiException {
        assignStoresToStoreGroupWithHttpInfo(appId, storeGroupId, storeIds);
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param storeGroupId  (required)
     * @param storeIds  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> assignStoresToStoreGroupWithHttpInfo(String appId, Integer storeGroupId, List<Integer> storeIds) throws ApiException {
        com.squareup.okhttp.Call call = assignStoresToStoreGroupValidateBeforeCall(appId, storeGroupId, storeIds, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param storeGroupId  (required)
     * @param storeIds  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call assignStoresToStoreGroupAsync(String appId, Integer storeGroupId, List<Integer> storeIds, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = assignStoresToStoreGroupValidateBeforeCall(appId, storeGroupId, storeIds, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createStoreGroup
     * @param appNameId  (required)
     * @param storeGroup  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createStoreGroupCall(String appNameId, StoreGroupBase storeGroup, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = storeGroup;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appNameId}/storegroups"
            .replaceAll("\\{" + "appNameId" + "\\}", apiClient.escapeString(appNameId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createStoreGroupValidateBeforeCall(String appNameId, StoreGroupBase storeGroup, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appNameId' is set
        if (appNameId == null) {
            throw new ApiException("Missing the required parameter 'appNameId' when calling createStoreGroup(Async)");
        }
        
        // verify the required parameter 'storeGroup' is set
        if (storeGroup == null) {
            throw new ApiException("Missing the required parameter 'storeGroup' when calling createStoreGroup(Async)");
        }
        

        com.squareup.okhttp.Call call = createStoreGroupCall(appNameId, storeGroup, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param appNameId  (required)
     * @param storeGroup  (required)
     * @return RestApiResultStoreGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultStoreGroup createStoreGroup(String appNameId, StoreGroupBase storeGroup) throws ApiException {
        ApiResponse<RestApiResultStoreGroup> resp = createStoreGroupWithHttpInfo(appNameId, storeGroup);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param appNameId  (required)
     * @param storeGroup  (required)
     * @return ApiResponse&lt;RestApiResultStoreGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultStoreGroup> createStoreGroupWithHttpInfo(String appNameId, StoreGroupBase storeGroup) throws ApiException {
        com.squareup.okhttp.Call call = createStoreGroupValidateBeforeCall(appNameId, storeGroup, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultStoreGroup>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appNameId  (required)
     * @param storeGroup  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createStoreGroupAsync(String appNameId, StoreGroupBase storeGroup, final ApiCallback<RestApiResultStoreGroup> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createStoreGroupValidateBeforeCall(appNameId, storeGroup, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultStoreGroup>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getStoreGroup
     * @param storeGroupId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getStoreGroupCall(Integer storeGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/storegroups/{storeGroupId}"
            .replaceAll("\\{" + "storeGroupId" + "\\}", apiClient.escapeString(storeGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStoreGroupValidateBeforeCall(Integer storeGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeGroupId' is set
        if (storeGroupId == null) {
            throw new ApiException("Missing the required parameter 'storeGroupId' when calling getStoreGroup(Async)");
        }
        

        com.squareup.okhttp.Call call = getStoreGroupCall(storeGroupId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param storeGroupId  (required)
     * @return RestApiResultStoreGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultStoreGroup getStoreGroup(Integer storeGroupId) throws ApiException {
        ApiResponse<RestApiResultStoreGroup> resp = getStoreGroupWithHttpInfo(storeGroupId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param storeGroupId  (required)
     * @return ApiResponse&lt;RestApiResultStoreGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultStoreGroup> getStoreGroupWithHttpInfo(Integer storeGroupId) throws ApiException {
        com.squareup.okhttp.Call call = getStoreGroupValidateBeforeCall(storeGroupId, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultStoreGroup>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param storeGroupId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStoreGroupAsync(Integer storeGroupId, final ApiCallback<RestApiResultStoreGroup> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStoreGroupValidateBeforeCall(storeGroupId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultStoreGroup>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getStoreGroups
     * @param appNameId  (required)
     * @param searchQuery  (optional)
     * @param page  (optional)
     * @param limit  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getStoreGroupsCall(String appNameId, String searchQuery, Integer page, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appNameId}/storegroups"
            .replaceAll("\\{" + "appNameId" + "\\}", apiClient.escapeString(appNameId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (searchQuery != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("searchQuery", searchQuery));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStoreGroupsValidateBeforeCall(String appNameId, String searchQuery, Integer page, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appNameId' is set
        if (appNameId == null) {
            throw new ApiException("Missing the required parameter 'appNameId' when calling getStoreGroups(Async)");
        }
        

        com.squareup.okhttp.Call call = getStoreGroupsCall(appNameId, searchQuery, page, limit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param appNameId  (required)
     * @param searchQuery  (optional)
     * @param page  (optional)
     * @param limit  (optional)
     * @return RestApiPaginationResultStoreGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiPaginationResultStoreGroup getStoreGroups(String appNameId, String searchQuery, Integer page, Integer limit) throws ApiException {
        ApiResponse<RestApiPaginationResultStoreGroup> resp = getStoreGroupsWithHttpInfo(appNameId, searchQuery, page, limit);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param appNameId  (required)
     * @param searchQuery  (optional)
     * @param page  (optional)
     * @param limit  (optional)
     * @return ApiResponse&lt;RestApiPaginationResultStoreGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiPaginationResultStoreGroup> getStoreGroupsWithHttpInfo(String appNameId, String searchQuery, Integer page, Integer limit) throws ApiException {
        com.squareup.okhttp.Call call = getStoreGroupsValidateBeforeCall(appNameId, searchQuery, page, limit, null, null);
        Type localVarReturnType = new TypeToken<RestApiPaginationResultStoreGroup>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appNameId  (required)
     * @param searchQuery  (optional)
     * @param page  (optional)
     * @param limit  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStoreGroupsAsync(String appNameId, String searchQuery, Integer page, Integer limit, final ApiCallback<RestApiPaginationResultStoreGroup> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStoreGroupsValidateBeforeCall(appNameId, searchQuery, page, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiPaginationResultStoreGroup>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getStoreGroupsExtended
     * @param appNameId  (required)
     * @param searchQuery  (optional)
     * @param page  (optional)
     * @param limit  (optional)
     * @param groupingRadius  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getStoreGroupsExtendedCall(String appNameId, String searchQuery, Integer page, Integer limit, Integer groupingRadius, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appNameId}/storegroups/extended"
            .replaceAll("\\{" + "appNameId" + "\\}", apiClient.escapeString(appNameId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (searchQuery != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("searchQuery", searchQuery));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (groupingRadius != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("groupingRadius", groupingRadius));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStoreGroupsExtendedValidateBeforeCall(String appNameId, String searchQuery, Integer page, Integer limit, Integer groupingRadius, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appNameId' is set
        if (appNameId == null) {
            throw new ApiException("Missing the required parameter 'appNameId' when calling getStoreGroupsExtended(Async)");
        }
        

        com.squareup.okhttp.Call call = getStoreGroupsExtendedCall(appNameId, searchQuery, page, limit, groupingRadius, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param appNameId  (required)
     * @param searchQuery  (optional)
     * @param page  (optional)
     * @param limit  (optional)
     * @param groupingRadius  (optional)
     * @return RestApiPaginationResultStoreGroupExtended
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiPaginationResultStoreGroupExtended getStoreGroupsExtended(String appNameId, String searchQuery, Integer page, Integer limit, Integer groupingRadius) throws ApiException {
        ApiResponse<RestApiPaginationResultStoreGroupExtended> resp = getStoreGroupsExtendedWithHttpInfo(appNameId, searchQuery, page, limit, groupingRadius);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param appNameId  (required)
     * @param searchQuery  (optional)
     * @param page  (optional)
     * @param limit  (optional)
     * @param groupingRadius  (optional)
     * @return ApiResponse&lt;RestApiPaginationResultStoreGroupExtended&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiPaginationResultStoreGroupExtended> getStoreGroupsExtendedWithHttpInfo(String appNameId, String searchQuery, Integer page, Integer limit, Integer groupingRadius) throws ApiException {
        com.squareup.okhttp.Call call = getStoreGroupsExtendedValidateBeforeCall(appNameId, searchQuery, page, limit, groupingRadius, null, null);
        Type localVarReturnType = new TypeToken<RestApiPaginationResultStoreGroupExtended>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appNameId  (required)
     * @param searchQuery  (optional)
     * @param page  (optional)
     * @param limit  (optional)
     * @param groupingRadius  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStoreGroupsExtendedAsync(String appNameId, String searchQuery, Integer page, Integer limit, Integer groupingRadius, final ApiCallback<RestApiPaginationResultStoreGroupExtended> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStoreGroupsExtendedValidateBeforeCall(appNameId, searchQuery, page, limit, groupingRadius, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiPaginationResultStoreGroupExtended>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for removeStoreGroup
     * @param storeGroupId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call removeStoreGroupCall(Integer storeGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/storegroups/{storeGroupId}"
            .replaceAll("\\{" + "storeGroupId" + "\\}", apiClient.escapeString(storeGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call removeStoreGroupValidateBeforeCall(Integer storeGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeGroupId' is set
        if (storeGroupId == null) {
            throw new ApiException("Missing the required parameter 'storeGroupId' when calling removeStoreGroup(Async)");
        }
        

        com.squareup.okhttp.Call call = removeStoreGroupCall(storeGroupId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param storeGroupId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void removeStoreGroup(Integer storeGroupId) throws ApiException {
        removeStoreGroupWithHttpInfo(storeGroupId);
    }

    /**
     * 
     * 
     * @param storeGroupId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> removeStoreGroupWithHttpInfo(Integer storeGroupId) throws ApiException {
        com.squareup.okhttp.Call call = removeStoreGroupValidateBeforeCall(storeGroupId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param storeGroupId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeStoreGroupAsync(Integer storeGroupId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeStoreGroupValidateBeforeCall(storeGroupId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for setMenuMessagePerDeliveryType
     * @param storeGroupId  (required)
     * @param deliveryType  (required)
     * @param menuMessage  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setMenuMessagePerDeliveryTypeCall(Integer storeGroupId, String deliveryType, String menuMessage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = menuMessage;

        // create path and map variables
        String localVarPath = "/api/v1.0/storegroups/{storeGroupId}/{deliveryType}/MenuMessagePerDeliveryType"
            .replaceAll("\\{" + "storeGroupId" + "\\}", apiClient.escapeString(storeGroupId.toString()))
            .replaceAll("\\{" + "deliveryType" + "\\}", apiClient.escapeString(deliveryType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setMenuMessagePerDeliveryTypeValidateBeforeCall(Integer storeGroupId, String deliveryType, String menuMessage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeGroupId' is set
        if (storeGroupId == null) {
            throw new ApiException("Missing the required parameter 'storeGroupId' when calling setMenuMessagePerDeliveryType(Async)");
        }
        
        // verify the required parameter 'deliveryType' is set
        if (deliveryType == null) {
            throw new ApiException("Missing the required parameter 'deliveryType' when calling setMenuMessagePerDeliveryType(Async)");
        }
        
        // verify the required parameter 'menuMessage' is set
        if (menuMessage == null) {
            throw new ApiException("Missing the required parameter 'menuMessage' when calling setMenuMessagePerDeliveryType(Async)");
        }
        

        com.squareup.okhttp.Call call = setMenuMessagePerDeliveryTypeCall(storeGroupId, deliveryType, menuMessage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param storeGroupId  (required)
     * @param deliveryType  (required)
     * @param menuMessage  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void setMenuMessagePerDeliveryType(Integer storeGroupId, String deliveryType, String menuMessage) throws ApiException {
        setMenuMessagePerDeliveryTypeWithHttpInfo(storeGroupId, deliveryType, menuMessage);
    }

    /**
     * 
     * 
     * @param storeGroupId  (required)
     * @param deliveryType  (required)
     * @param menuMessage  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> setMenuMessagePerDeliveryTypeWithHttpInfo(Integer storeGroupId, String deliveryType, String menuMessage) throws ApiException {
        com.squareup.okhttp.Call call = setMenuMessagePerDeliveryTypeValidateBeforeCall(storeGroupId, deliveryType, menuMessage, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param storeGroupId  (required)
     * @param deliveryType  (required)
     * @param menuMessage  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setMenuMessagePerDeliveryTypeAsync(Integer storeGroupId, String deliveryType, String menuMessage, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setMenuMessagePerDeliveryTypeValidateBeforeCall(storeGroupId, deliveryType, menuMessage, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateStoreGroup
     * @param storeGroupId  (required)
     * @param storeGroup  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateStoreGroupCall(Integer storeGroupId, StoreGroupBase storeGroup, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = storeGroup;

        // create path and map variables
        String localVarPath = "/api/v1.0/storegroups/{storeGroupId}"
            .replaceAll("\\{" + "storeGroupId" + "\\}", apiClient.escapeString(storeGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateStoreGroupValidateBeforeCall(Integer storeGroupId, StoreGroupBase storeGroup, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeGroupId' is set
        if (storeGroupId == null) {
            throw new ApiException("Missing the required parameter 'storeGroupId' when calling updateStoreGroup(Async)");
        }
        
        // verify the required parameter 'storeGroup' is set
        if (storeGroup == null) {
            throw new ApiException("Missing the required parameter 'storeGroup' when calling updateStoreGroup(Async)");
        }
        

        com.squareup.okhttp.Call call = updateStoreGroupCall(storeGroupId, storeGroup, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param storeGroupId  (required)
     * @param storeGroup  (required)
     * @return RestApiResultStoreGroupBase
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultStoreGroupBase updateStoreGroup(Integer storeGroupId, StoreGroupBase storeGroup) throws ApiException {
        ApiResponse<RestApiResultStoreGroupBase> resp = updateStoreGroupWithHttpInfo(storeGroupId, storeGroup);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param storeGroupId  (required)
     * @param storeGroup  (required)
     * @return ApiResponse&lt;RestApiResultStoreGroupBase&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultStoreGroupBase> updateStoreGroupWithHttpInfo(Integer storeGroupId, StoreGroupBase storeGroup) throws ApiException {
        com.squareup.okhttp.Call call = updateStoreGroupValidateBeforeCall(storeGroupId, storeGroup, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultStoreGroupBase>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param storeGroupId  (required)
     * @param storeGroup  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateStoreGroupAsync(Integer storeGroupId, StoreGroupBase storeGroup, final ApiCallback<RestApiResultStoreGroupBase> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateStoreGroupValidateBeforeCall(storeGroupId, storeGroup, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultStoreGroupBase>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
