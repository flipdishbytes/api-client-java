/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.flipdish.apiclient.api;

import com.flipdish.apiclient.ApiCallback;
import com.flipdish.apiclient.ApiClient;
import com.flipdish.apiclient.ApiException;
import com.flipdish.apiclient.ApiResponse;
import com.flipdish.apiclient.Configuration;
import com.flipdish.apiclient.Pair;
import com.flipdish.apiclient.ProgressRequestBody;
import com.flipdish.apiclient.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.flipdish.apiclient.model.RestApiErrorResult;
import com.flipdish.apiclient.model.RestApiForbiddenResult;
import com.flipdish.apiclient.model.RestApiPaginationResultAppStoreAppSummary;
import com.flipdish.apiclient.model.RestApiResultAppStoreApp;
import com.flipdish.apiclient.model.RestApiUnauthorizedResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AppStoreApi {
    private ApiClient apiClient;

    public AppStoreApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AppStoreApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getAppStoreApp
     * @param appStoreAppId  (required)
     * @param appId  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAppStoreAppCall(String appStoreAppId, String appId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/appstore/apps/{appStoreAppId}"
            .replaceAll("\\{" + "appStoreAppId" + "\\}", apiClient.escapeString(appStoreAppId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (appId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("appId", appId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAppStoreAppValidateBeforeCall(String appStoreAppId, String appId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appStoreAppId' is set
        if (appStoreAppId == null) {
            throw new ApiException("Missing the required parameter 'appStoreAppId' when calling getAppStoreApp(Async)");
        }
        

        com.squareup.okhttp.Call call = getAppStoreAppCall(appStoreAppId, appId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param appStoreAppId  (required)
     * @param appId  (optional)
     * @return RestApiResultAppStoreApp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultAppStoreApp getAppStoreApp(String appStoreAppId, String appId) throws ApiException {
        ApiResponse<RestApiResultAppStoreApp> resp = getAppStoreAppWithHttpInfo(appStoreAppId, appId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param appStoreAppId  (required)
     * @param appId  (optional)
     * @return ApiResponse&lt;RestApiResultAppStoreApp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultAppStoreApp> getAppStoreAppWithHttpInfo(String appStoreAppId, String appId) throws ApiException {
        com.squareup.okhttp.Call call = getAppStoreAppValidateBeforeCall(appStoreAppId, appId, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultAppStoreApp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appStoreAppId  (required)
     * @param appId  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAppStoreAppAsync(String appStoreAppId, String appId, final ApiCallback<RestApiResultAppStoreApp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAppStoreAppValidateBeforeCall(appStoreAppId, appId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultAppStoreApp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAppStoreApps
     * @param search  (required)
     * @param page  (optional)
     * @param limit  (optional)
     * @param excludeNotOwned  (optional)
     * @param showOnlyVerified  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAppStoreAppsCall(String search, Integer page, Integer limit, Boolean excludeNotOwned, Boolean showOnlyVerified, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/appstore/apps";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (search != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("search", search));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (excludeNotOwned != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("excludeNotOwned", excludeNotOwned));
        if (showOnlyVerified != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("showOnlyVerified", showOnlyVerified));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAppStoreAppsValidateBeforeCall(String search, Integer page, Integer limit, Boolean excludeNotOwned, Boolean showOnlyVerified, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'search' is set
        if (search == null) {
            throw new ApiException("Missing the required parameter 'search' when calling getAppStoreApps(Async)");
        }
        

        com.squareup.okhttp.Call call = getAppStoreAppsCall(search, page, limit, excludeNotOwned, showOnlyVerified, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param search  (required)
     * @param page  (optional)
     * @param limit  (optional)
     * @param excludeNotOwned  (optional)
     * @param showOnlyVerified  (optional)
     * @return RestApiPaginationResultAppStoreAppSummary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiPaginationResultAppStoreAppSummary getAppStoreApps(String search, Integer page, Integer limit, Boolean excludeNotOwned, Boolean showOnlyVerified) throws ApiException {
        ApiResponse<RestApiPaginationResultAppStoreAppSummary> resp = getAppStoreAppsWithHttpInfo(search, page, limit, excludeNotOwned, showOnlyVerified);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param search  (required)
     * @param page  (optional)
     * @param limit  (optional)
     * @param excludeNotOwned  (optional)
     * @param showOnlyVerified  (optional)
     * @return ApiResponse&lt;RestApiPaginationResultAppStoreAppSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiPaginationResultAppStoreAppSummary> getAppStoreAppsWithHttpInfo(String search, Integer page, Integer limit, Boolean excludeNotOwned, Boolean showOnlyVerified) throws ApiException {
        com.squareup.okhttp.Call call = getAppStoreAppsValidateBeforeCall(search, page, limit, excludeNotOwned, showOnlyVerified, null, null);
        Type localVarReturnType = new TypeToken<RestApiPaginationResultAppStoreAppSummary>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param search  (required)
     * @param page  (optional)
     * @param limit  (optional)
     * @param excludeNotOwned  (optional)
     * @param showOnlyVerified  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAppStoreAppsAsync(String search, Integer page, Integer limit, Boolean excludeNotOwned, Boolean showOnlyVerified, final ApiCallback<RestApiPaginationResultAppStoreAppSummary> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAppStoreAppsValidateBeforeCall(search, page, limit, excludeNotOwned, showOnlyVerified, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiPaginationResultAppStoreAppSummary>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
