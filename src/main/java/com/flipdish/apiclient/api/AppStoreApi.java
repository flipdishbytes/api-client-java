/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.flipdish.apiclient.api;

import com.flipdish.apiclient.ApiCallback;
import com.flipdish.apiclient.ApiClient;
import com.flipdish.apiclient.ApiException;
import com.flipdish.apiclient.ApiResponse;
import com.flipdish.apiclient.Configuration;
import com.flipdish.apiclient.Pair;
import com.flipdish.apiclient.ProgressRequestBody;
import com.flipdish.apiclient.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.flipdish.apiclient.model.AppStoreApp;
import com.flipdish.apiclient.model.CreateAppStoreApp;
import java.io.File;
import com.flipdish.apiclient.model.RestApiErrorResult;
import com.flipdish.apiclient.model.RestApiForbiddenResult;
import com.flipdish.apiclient.model.RestApiPaginationResultAppStoreAppSummary;
import com.flipdish.apiclient.model.RestApiResultAppStoreApp;
import com.flipdish.apiclient.model.RestApiStringResult;
import com.flipdish.apiclient.model.RestApiUnauthorizedResult;
import com.flipdish.apiclient.model.UpdateAppStoreApp;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AppStoreApi {
    private ApiClient apiClient;

    public AppStoreApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AppStoreApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for appVerificationUpdate
     * @param appStoreAppId App store app id (required)
     * @param verificationStatus New verification status (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call appVerificationUpdateCall(String appStoreAppId, String verificationStatus, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = verificationStatus;

        // create path and map variables
        String localVarPath = "/api/v1.0/appstore/apps/{appStoreAppId}/verification"
            .replaceAll("\\{" + "appStoreAppId" + "\\}", apiClient.escapeString(appStoreAppId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call appVerificationUpdateValidateBeforeCall(String appStoreAppId, String verificationStatus, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appStoreAppId' is set
        if (appStoreAppId == null) {
            throw new ApiException("Missing the required parameter 'appStoreAppId' when calling appVerificationUpdate(Async)");
        }
        
        // verify the required parameter 'verificationStatus' is set
        if (verificationStatus == null) {
            throw new ApiException("Missing the required parameter 'verificationStatus' when calling appVerificationUpdate(Async)");
        }
        

        com.squareup.okhttp.Call call = appVerificationUpdateCall(appStoreAppId, verificationStatus, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update App store app verification
     * [BETA - this endpoint is under development, do not use it in your production system][Note: Only Flipdish staff can verify apps]
     * @param appStoreAppId App store app id (required)
     * @param verificationStatus New verification status (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void appVerificationUpdate(String appStoreAppId, String verificationStatus) throws ApiException {
        appVerificationUpdateWithHttpInfo(appStoreAppId, verificationStatus);
    }

    /**
     * Update App store app verification
     * [BETA - this endpoint is under development, do not use it in your production system][Note: Only Flipdish staff can verify apps]
     * @param appStoreAppId App store app id (required)
     * @param verificationStatus New verification status (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> appVerificationUpdateWithHttpInfo(String appStoreAppId, String verificationStatus) throws ApiException {
        com.squareup.okhttp.Call call = appVerificationUpdateValidateBeforeCall(appStoreAppId, verificationStatus, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update App store app verification (asynchronously)
     * [BETA - this endpoint is under development, do not use it in your production system][Note: Only Flipdish staff can verify apps]
     * @param appStoreAppId App store app id (required)
     * @param verificationStatus New verification status (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call appVerificationUpdateAsync(String appStoreAppId, String verificationStatus, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = appVerificationUpdateValidateBeforeCall(appStoreAppId, verificationStatus, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createAppStoreApp
     * @param createAppStoreApp App store app (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createAppStoreAppCall(CreateAppStoreApp createAppStoreApp, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = createAppStoreApp;

        // create path and map variables
        String localVarPath = "/api/v1.0/appstore/apps";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createAppStoreAppValidateBeforeCall(CreateAppStoreApp createAppStoreApp, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'createAppStoreApp' is set
        if (createAppStoreApp == null) {
            throw new ApiException("Missing the required parameter 'createAppStoreApp' when calling createAppStoreApp(Async)");
        }
        

        com.squareup.okhttp.Call call = createAppStoreAppCall(createAppStoreApp, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create App store app
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param createAppStoreApp App store app (required)
     * @return RestApiResultAppStoreApp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultAppStoreApp createAppStoreApp(CreateAppStoreApp createAppStoreApp) throws ApiException {
        ApiResponse<RestApiResultAppStoreApp> resp = createAppStoreAppWithHttpInfo(createAppStoreApp);
        return resp.getData();
    }

    /**
     * Create App store app
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param createAppStoreApp App store app (required)
     * @return ApiResponse&lt;RestApiResultAppStoreApp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultAppStoreApp> createAppStoreAppWithHttpInfo(CreateAppStoreApp createAppStoreApp) throws ApiException {
        com.squareup.okhttp.Call call = createAppStoreAppValidateBeforeCall(createAppStoreApp, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultAppStoreApp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create App store app (asynchronously)
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param createAppStoreApp App store app (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createAppStoreAppAsync(CreateAppStoreApp createAppStoreApp, final ApiCallback<RestApiResultAppStoreApp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createAppStoreAppValidateBeforeCall(createAppStoreApp, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultAppStoreApp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteAppStoreApp
     * @param appStoreAppId App store app id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAppStoreAppCall(String appStoreAppId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/appstore/apps/{appStoreAppId}"
            .replaceAll("\\{" + "appStoreAppId" + "\\}", apiClient.escapeString(appStoreAppId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAppStoreAppValidateBeforeCall(String appStoreAppId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appStoreAppId' is set
        if (appStoreAppId == null) {
            throw new ApiException("Missing the required parameter 'appStoreAppId' when calling deleteAppStoreApp(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteAppStoreAppCall(appStoreAppId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete App store app
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param appStoreAppId App store app id (required)
     * @return RestApiStringResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiStringResult deleteAppStoreApp(String appStoreAppId) throws ApiException {
        ApiResponse<RestApiStringResult> resp = deleteAppStoreAppWithHttpInfo(appStoreAppId);
        return resp.getData();
    }

    /**
     * Delete App store app
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param appStoreAppId App store app id (required)
     * @return ApiResponse&lt;RestApiStringResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiStringResult> deleteAppStoreAppWithHttpInfo(String appStoreAppId) throws ApiException {
        com.squareup.okhttp.Call call = deleteAppStoreAppValidateBeforeCall(appStoreAppId, null, null);
        Type localVarReturnType = new TypeToken<RestApiStringResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete App store app (asynchronously)
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param appStoreAppId App store app id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAppStoreAppAsync(String appStoreAppId, final ApiCallback<RestApiStringResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAppStoreAppValidateBeforeCall(appStoreAppId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiStringResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAppStoreApp
     * @param appStoreAppId App store app id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAppStoreAppCall(String appStoreAppId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/appstore/apps/{appStoreAppId}"
            .replaceAll("\\{" + "appStoreAppId" + "\\}", apiClient.escapeString(appStoreAppId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAppStoreAppValidateBeforeCall(String appStoreAppId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appStoreAppId' is set
        if (appStoreAppId == null) {
            throw new ApiException("Missing the required parameter 'appStoreAppId' when calling getAppStoreApp(Async)");
        }
        

        com.squareup.okhttp.Call call = getAppStoreAppCall(appStoreAppId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get App store app
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param appStoreAppId App store app id (required)
     * @return AppStoreApp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AppStoreApp getAppStoreApp(String appStoreAppId) throws ApiException {
        ApiResponse<AppStoreApp> resp = getAppStoreAppWithHttpInfo(appStoreAppId);
        return resp.getData();
    }

    /**
     * Get App store app
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param appStoreAppId App store app id (required)
     * @return ApiResponse&lt;AppStoreApp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AppStoreApp> getAppStoreAppWithHttpInfo(String appStoreAppId) throws ApiException {
        com.squareup.okhttp.Call call = getAppStoreAppValidateBeforeCall(appStoreAppId, null, null);
        Type localVarReturnType = new TypeToken<AppStoreApp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get App store app (asynchronously)
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param appStoreAppId App store app id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAppStoreAppAsync(String appStoreAppId, final ApiCallback<AppStoreApp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAppStoreAppValidateBeforeCall(appStoreAppId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AppStoreApp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAppStoreApps
     * @param search Query App store app name (required)
     * @param page Requested page index (optional)
     * @param limit Requested page limit (optional)
     * @param excludeNotOwned Exclude App store apps that user is not the owner off (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAppStoreAppsCall(String search, Integer page, Integer limit, Boolean excludeNotOwned, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/appstore/apps";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (search != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("search", search));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (excludeNotOwned != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("excludeNotOwned", excludeNotOwned));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAppStoreAppsValidateBeforeCall(String search, Integer page, Integer limit, Boolean excludeNotOwned, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'search' is set
        if (search == null) {
            throw new ApiException("Missing the required parameter 'search' when calling getAppStoreApps(Async)");
        }
        

        com.squareup.okhttp.Call call = getAppStoreAppsCall(search, page, limit, excludeNotOwned, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get list of App store app summaries
     * Only returns verified applications [BETA - this endpoint is under development, do not use it in your production system]
     * @param search Query App store app name (required)
     * @param page Requested page index (optional)
     * @param limit Requested page limit (optional)
     * @param excludeNotOwned Exclude App store apps that user is not the owner off (optional)
     * @return RestApiPaginationResultAppStoreAppSummary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiPaginationResultAppStoreAppSummary getAppStoreApps(String search, Integer page, Integer limit, Boolean excludeNotOwned) throws ApiException {
        ApiResponse<RestApiPaginationResultAppStoreAppSummary> resp = getAppStoreAppsWithHttpInfo(search, page, limit, excludeNotOwned);
        return resp.getData();
    }

    /**
     * Get list of App store app summaries
     * Only returns verified applications [BETA - this endpoint is under development, do not use it in your production system]
     * @param search Query App store app name (required)
     * @param page Requested page index (optional)
     * @param limit Requested page limit (optional)
     * @param excludeNotOwned Exclude App store apps that user is not the owner off (optional)
     * @return ApiResponse&lt;RestApiPaginationResultAppStoreAppSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiPaginationResultAppStoreAppSummary> getAppStoreAppsWithHttpInfo(String search, Integer page, Integer limit, Boolean excludeNotOwned) throws ApiException {
        com.squareup.okhttp.Call call = getAppStoreAppsValidateBeforeCall(search, page, limit, excludeNotOwned, null, null);
        Type localVarReturnType = new TypeToken<RestApiPaginationResultAppStoreAppSummary>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of App store app summaries (asynchronously)
     * Only returns verified applications [BETA - this endpoint is under development, do not use it in your production system]
     * @param search Query App store app name (required)
     * @param page Requested page index (optional)
     * @param limit Requested page limit (optional)
     * @param excludeNotOwned Exclude App store apps that user is not the owner off (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAppStoreAppsAsync(String search, Integer page, Integer limit, Boolean excludeNotOwned, final ApiCallback<RestApiPaginationResultAppStoreAppSummary> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAppStoreAppsValidateBeforeCall(search, page, limit, excludeNotOwned, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiPaginationResultAppStoreAppSummary>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateAppStoreApp
     * @param appStoreAppId App store app id (required)
     * @param appStoreApp Update App store app (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateAppStoreAppCall(String appStoreAppId, UpdateAppStoreApp appStoreApp, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = appStoreApp;

        // create path and map variables
        String localVarPath = "/api/v1.0/appstore/apps/{appStoreAppId}"
            .replaceAll("\\{" + "appStoreAppId" + "\\}", apiClient.escapeString(appStoreAppId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateAppStoreAppValidateBeforeCall(String appStoreAppId, UpdateAppStoreApp appStoreApp, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appStoreAppId' is set
        if (appStoreAppId == null) {
            throw new ApiException("Missing the required parameter 'appStoreAppId' when calling updateAppStoreApp(Async)");
        }
        
        // verify the required parameter 'appStoreApp' is set
        if (appStoreApp == null) {
            throw new ApiException("Missing the required parameter 'appStoreApp' when calling updateAppStoreApp(Async)");
        }
        

        com.squareup.okhttp.Call call = updateAppStoreAppCall(appStoreAppId, appStoreApp, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update App store app
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param appStoreAppId App store app id (required)
     * @param appStoreApp Update App store app (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateAppStoreApp(String appStoreAppId, UpdateAppStoreApp appStoreApp) throws ApiException {
        updateAppStoreAppWithHttpInfo(appStoreAppId, appStoreApp);
    }

    /**
     * Update App store app
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param appStoreAppId App store app id (required)
     * @param appStoreApp Update App store app (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateAppStoreAppWithHttpInfo(String appStoreAppId, UpdateAppStoreApp appStoreApp) throws ApiException {
        com.squareup.okhttp.Call call = updateAppStoreAppValidateBeforeCall(appStoreAppId, appStoreApp, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update App store app (asynchronously)
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param appStoreAppId App store app id (required)
     * @param appStoreApp Update App store app (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateAppStoreAppAsync(String appStoreAppId, UpdateAppStoreApp appStoreApp, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateAppStoreAppValidateBeforeCall(appStoreAppId, appStoreApp, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for uploadAppStoreAppLogo
     * @param appStoreAppId App store app id (required)
     * @param image App Store App Logo (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call uploadAppStoreAppLogoCall(String appStoreAppId, File image, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/appstore/apps/{appStoreAppId}/logo"
            .replaceAll("\\{" + "appStoreAppId" + "\\}", apiClient.escapeString(appStoreAppId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (image != null)
        localVarFormParams.put("Image", image);

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call uploadAppStoreAppLogoValidateBeforeCall(String appStoreAppId, File image, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appStoreAppId' is set
        if (appStoreAppId == null) {
            throw new ApiException("Missing the required parameter 'appStoreAppId' when calling uploadAppStoreAppLogo(Async)");
        }
        
        // verify the required parameter 'image' is set
        if (image == null) {
            throw new ApiException("Missing the required parameter 'image' when calling uploadAppStoreAppLogo(Async)");
        }
        

        com.squareup.okhttp.Call call = uploadAppStoreAppLogoCall(appStoreAppId, image, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Upload the App store app logo \\ icon
     * 
     * @param appStoreAppId App store app id (required)
     * @param image App Store App Logo (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void uploadAppStoreAppLogo(String appStoreAppId, File image) throws ApiException {
        uploadAppStoreAppLogoWithHttpInfo(appStoreAppId, image);
    }

    /**
     * Upload the App store app logo \\ icon
     * 
     * @param appStoreAppId App store app id (required)
     * @param image App Store App Logo (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> uploadAppStoreAppLogoWithHttpInfo(String appStoreAppId, File image) throws ApiException {
        com.squareup.okhttp.Call call = uploadAppStoreAppLogoValidateBeforeCall(appStoreAppId, image, null, null);
        return apiClient.execute(call);
    }

    /**
     * Upload the App store app logo \\ icon (asynchronously)
     * 
     * @param appStoreAppId App store app id (required)
     * @param image App Store App Logo (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call uploadAppStoreAppLogoAsync(String appStoreAppId, File image, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = uploadAppStoreAppLogoValidateBeforeCall(appStoreAppId, image, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
