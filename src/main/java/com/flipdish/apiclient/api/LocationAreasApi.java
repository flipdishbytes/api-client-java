/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.flipdish.apiclient.api;

import com.flipdish.apiclient.ApiCallback;
import com.flipdish.apiclient.ApiClient;
import com.flipdish.apiclient.ApiException;
import com.flipdish.apiclient.ApiResponse;
import com.flipdish.apiclient.Configuration;
import com.flipdish.apiclient.Pair;
import com.flipdish.apiclient.ProgressRequestBody;
import com.flipdish.apiclient.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.flipdish.apiclient.model.CreateLocationArea;
import com.flipdish.apiclient.model.LocationArea;
import com.flipdish.apiclient.model.RestApiArrayResultLocationAreaWithLocations;
import com.flipdish.apiclient.model.RestApiErrorResult;
import com.flipdish.apiclient.model.RestApiForbiddenResult;
import com.flipdish.apiclient.model.RestApiResultLocationAreaWithLocations;
import com.flipdish.apiclient.model.RestApiUnauthorizedResult;
import com.flipdish.apiclient.model.UpdateLocationArea;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LocationAreasApi {
    private ApiClient apiClient;

    public LocationAreasApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LocationAreasApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createLocationArea
     * @param locationAreaInput Input data for creating the Location Area (required)
     * @param appId AppId i.e: (fd1234) (required)
     * @param storeId Id of the Store (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createLocationAreaCall(CreateLocationArea locationAreaInput, String appId, Integer storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = locationAreaInput;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/stores/{storeId}/location-areas"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createLocationAreaValidateBeforeCall(CreateLocationArea locationAreaInput, String appId, Integer storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'locationAreaInput' is set
        if (locationAreaInput == null) {
            throw new ApiException("Missing the required parameter 'locationAreaInput' when calling createLocationArea(Async)");
        }
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling createLocationArea(Async)");
        }
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling createLocationArea(Async)");
        }
        

        com.squareup.okhttp.Call call = createLocationAreaCall(locationAreaInput, appId, storeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a Location Area, i.e: Room, Floor, Parking lot
     * 
     * @param locationAreaInput Input data for creating the Location Area (required)
     * @param appId AppId i.e: (fd1234) (required)
     * @param storeId Id of the Store (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object createLocationArea(CreateLocationArea locationAreaInput, String appId, Integer storeId) throws ApiException {
        ApiResponse<Object> resp = createLocationAreaWithHttpInfo(locationAreaInput, appId, storeId);
        return resp.getData();
    }

    /**
     * Create a Location Area, i.e: Room, Floor, Parking lot
     * 
     * @param locationAreaInput Input data for creating the Location Area (required)
     * @param appId AppId i.e: (fd1234) (required)
     * @param storeId Id of the Store (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> createLocationAreaWithHttpInfo(CreateLocationArea locationAreaInput, String appId, Integer storeId) throws ApiException {
        com.squareup.okhttp.Call call = createLocationAreaValidateBeforeCall(locationAreaInput, appId, storeId, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a Location Area, i.e: Room, Floor, Parking lot (asynchronously)
     * 
     * @param locationAreaInput Input data for creating the Location Area (required)
     * @param appId AppId i.e: (fd1234) (required)
     * @param storeId Id of the Store (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createLocationAreaAsync(CreateLocationArea locationAreaInput, String appId, Integer storeId, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createLocationAreaValidateBeforeCall(locationAreaInput, appId, storeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLocationArea
     * @param locationAreaId Id of the Location Area (required)
     * @param appId AppId i.e: (fd1234) (required)
     * @param storeId Id of the Store (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLocationAreaCall(Integer locationAreaId, String appId, Integer storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/stores/{storeId}/location-areas/{locationAreaId}"
            .replaceAll("\\{" + "locationAreaId" + "\\}", apiClient.escapeString(locationAreaId.toString()))
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLocationAreaValidateBeforeCall(Integer locationAreaId, String appId, Integer storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'locationAreaId' is set
        if (locationAreaId == null) {
            throw new ApiException("Missing the required parameter 'locationAreaId' when calling getLocationArea(Async)");
        }
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getLocationArea(Async)");
        }
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling getLocationArea(Async)");
        }
        

        com.squareup.okhttp.Call call = getLocationAreaCall(locationAreaId, appId, storeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a Location Area
     * 
     * @param locationAreaId Id of the Location Area (required)
     * @param appId AppId i.e: (fd1234) (required)
     * @param storeId Id of the Store (required)
     * @return RestApiResultLocationAreaWithLocations
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultLocationAreaWithLocations getLocationArea(Integer locationAreaId, String appId, Integer storeId) throws ApiException {
        ApiResponse<RestApiResultLocationAreaWithLocations> resp = getLocationAreaWithHttpInfo(locationAreaId, appId, storeId);
        return resp.getData();
    }

    /**
     * Retrieve a Location Area
     * 
     * @param locationAreaId Id of the Location Area (required)
     * @param appId AppId i.e: (fd1234) (required)
     * @param storeId Id of the Store (required)
     * @return ApiResponse&lt;RestApiResultLocationAreaWithLocations&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultLocationAreaWithLocations> getLocationAreaWithHttpInfo(Integer locationAreaId, String appId, Integer storeId) throws ApiException {
        com.squareup.okhttp.Call call = getLocationAreaValidateBeforeCall(locationAreaId, appId, storeId, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultLocationAreaWithLocations>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a Location Area (asynchronously)
     * 
     * @param locationAreaId Id of the Location Area (required)
     * @param appId AppId i.e: (fd1234) (required)
     * @param storeId Id of the Store (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLocationAreaAsync(Integer locationAreaId, String appId, Integer storeId, final ApiCallback<RestApiResultLocationAreaWithLocations> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLocationAreaValidateBeforeCall(locationAreaId, appId, storeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultLocationAreaWithLocations>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLocationsForStore
     * @param appId AppId i.e: (fd1234) (required)
     * @param storeId Id of the Store (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLocationsForStoreCall(String appId, Integer storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/stores/{storeId}/location-areas"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLocationsForStoreValidateBeforeCall(String appId, Integer storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getLocationsForStore(Async)");
        }
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling getLocationsForStore(Async)");
        }
        

        com.squareup.okhttp.Call call = getLocationsForStoreCall(appId, storeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve all Location Areas for a Store
     * 
     * @param appId AppId i.e: (fd1234) (required)
     * @param storeId Id of the Store (required)
     * @return RestApiArrayResultLocationAreaWithLocations
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiArrayResultLocationAreaWithLocations getLocationsForStore(String appId, Integer storeId) throws ApiException {
        ApiResponse<RestApiArrayResultLocationAreaWithLocations> resp = getLocationsForStoreWithHttpInfo(appId, storeId);
        return resp.getData();
    }

    /**
     * Retrieve all Location Areas for a Store
     * 
     * @param appId AppId i.e: (fd1234) (required)
     * @param storeId Id of the Store (required)
     * @return ApiResponse&lt;RestApiArrayResultLocationAreaWithLocations&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiArrayResultLocationAreaWithLocations> getLocationsForStoreWithHttpInfo(String appId, Integer storeId) throws ApiException {
        com.squareup.okhttp.Call call = getLocationsForStoreValidateBeforeCall(appId, storeId, null, null);
        Type localVarReturnType = new TypeToken<RestApiArrayResultLocationAreaWithLocations>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve all Location Areas for a Store (asynchronously)
     * 
     * @param appId AppId i.e: (fd1234) (required)
     * @param storeId Id of the Store (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLocationsForStoreAsync(String appId, Integer storeId, final ApiCallback<RestApiArrayResultLocationAreaWithLocations> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLocationsForStoreValidateBeforeCall(appId, storeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiArrayResultLocationAreaWithLocations>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateLocationArea
     * @param locationAreaInput Input data for updating the Location Area (required)
     * @param appId AppId i.e: (fd1234) (required)
     * @param storeId Id of the Store (required)
     * @param locationAreaId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateLocationAreaCall(UpdateLocationArea locationAreaInput, String appId, Integer storeId, String locationAreaId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = locationAreaInput;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/stores/{storeId}/location-areas/{locationAreaId}/update"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()))
            .replaceAll("\\{" + "locationAreaId" + "\\}", apiClient.escapeString(locationAreaId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateLocationAreaValidateBeforeCall(UpdateLocationArea locationAreaInput, String appId, Integer storeId, String locationAreaId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'locationAreaInput' is set
        if (locationAreaInput == null) {
            throw new ApiException("Missing the required parameter 'locationAreaInput' when calling updateLocationArea(Async)");
        }
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling updateLocationArea(Async)");
        }
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling updateLocationArea(Async)");
        }
        
        // verify the required parameter 'locationAreaId' is set
        if (locationAreaId == null) {
            throw new ApiException("Missing the required parameter 'locationAreaId' when calling updateLocationArea(Async)");
        }
        

        com.squareup.okhttp.Call call = updateLocationAreaCall(locationAreaInput, appId, storeId, locationAreaId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a Location Area, i.e: Room, Floor, Car park space
     * 
     * @param locationAreaInput Input data for updating the Location Area (required)
     * @param appId AppId i.e: (fd1234) (required)
     * @param storeId Id of the Store (required)
     * @param locationAreaId  (required)
     * @return LocationArea
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LocationArea updateLocationArea(UpdateLocationArea locationAreaInput, String appId, Integer storeId, String locationAreaId) throws ApiException {
        ApiResponse<LocationArea> resp = updateLocationAreaWithHttpInfo(locationAreaInput, appId, storeId, locationAreaId);
        return resp.getData();
    }

    /**
     * Update a Location Area, i.e: Room, Floor, Car park space
     * 
     * @param locationAreaInput Input data for updating the Location Area (required)
     * @param appId AppId i.e: (fd1234) (required)
     * @param storeId Id of the Store (required)
     * @param locationAreaId  (required)
     * @return ApiResponse&lt;LocationArea&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LocationArea> updateLocationAreaWithHttpInfo(UpdateLocationArea locationAreaInput, String appId, Integer storeId, String locationAreaId) throws ApiException {
        com.squareup.okhttp.Call call = updateLocationAreaValidateBeforeCall(locationAreaInput, appId, storeId, locationAreaId, null, null);
        Type localVarReturnType = new TypeToken<LocationArea>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a Location Area, i.e: Room, Floor, Car park space (asynchronously)
     * 
     * @param locationAreaInput Input data for updating the Location Area (required)
     * @param appId AppId i.e: (fd1234) (required)
     * @param storeId Id of the Store (required)
     * @param locationAreaId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateLocationAreaAsync(UpdateLocationArea locationAreaInput, String appId, Integer storeId, String locationAreaId, final ApiCallback<LocationArea> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateLocationAreaValidateBeforeCall(locationAreaInput, appId, storeId, locationAreaId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LocationArea>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
