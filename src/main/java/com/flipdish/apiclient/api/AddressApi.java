/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.flipdish.apiclient.api;

import com.flipdish.apiclient.ApiCallback;
import com.flipdish.apiclient.ApiClient;
import com.flipdish.apiclient.ApiException;
import com.flipdish.apiclient.ApiResponse;
import com.flipdish.apiclient.Configuration;
import com.flipdish.apiclient.Pair;
import com.flipdish.apiclient.ProgressRequestBody;
import com.flipdish.apiclient.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.flipdish.apiclient.model.GoogleAddress;
import com.flipdish.apiclient.model.RestApiErrorResult;
import com.flipdish.apiclient.model.RestApiForbiddenResult;
import com.flipdish.apiclient.model.RestApiResultAddressFormResponse;
import com.flipdish.apiclient.model.RestApiUnauthorizedResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AddressApi {
    private ApiClient apiClient;

    public AddressApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AddressApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for formByApp
     * @param appId Application (WhiteLabel) Id (WhiteLabelId or AppNameId). (required)
     * @param language (Optional) ISO culture info code, e.g.: en-IE, the default is en-US. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call formByAppCall(String appId, String language, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/app/{appId}/address/form"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (language != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("language", language));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call formByAppValidateBeforeCall(String appId, String language, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling formByApp(Async)");
        }
        

        com.squareup.okhttp.Call call = formByAppCall(appId, language, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Provides a dyamic form definition based for the country of the given appId, with labels localized using the provided language.
     * 
     * @param appId Application (WhiteLabel) Id (WhiteLabelId or AppNameId). (required)
     * @param language (Optional) ISO culture info code, e.g.: en-IE, the default is en-US. (optional)
     * @return RestApiResultAddressFormResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultAddressFormResponse formByApp(String appId, String language) throws ApiException {
        ApiResponse<RestApiResultAddressFormResponse> resp = formByAppWithHttpInfo(appId, language);
        return resp.getData();
    }

    /**
     * Provides a dyamic form definition based for the country of the given appId, with labels localized using the provided language.
     * 
     * @param appId Application (WhiteLabel) Id (WhiteLabelId or AppNameId). (required)
     * @param language (Optional) ISO culture info code, e.g.: en-IE, the default is en-US. (optional)
     * @return ApiResponse&lt;RestApiResultAddressFormResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultAddressFormResponse> formByAppWithHttpInfo(String appId, String language) throws ApiException {
        com.squareup.okhttp.Call call = formByAppValidateBeforeCall(appId, language, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultAddressFormResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Provides a dyamic form definition based for the country of the given appId, with labels localized using the provided language. (asynchronously)
     * 
     * @param appId Application (WhiteLabel) Id (WhiteLabelId or AppNameId). (required)
     * @param language (Optional) ISO culture info code, e.g.: en-IE, the default is en-US. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call formByAppAsync(String appId, String language, final ApiCallback<RestApiResultAddressFormResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = formByAppValidateBeforeCall(appId, language, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultAddressFormResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for formByCountry
     * @param countryCode The 2 letter ISO country code, e.g.: IE. (required)
     * @param language (Optional) ISO culture info code, e.g.: en-IE, the default is en-US. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call formByCountryCall(String countryCode, String language, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/address/country/{countryCode}/form"
            .replaceAll("\\{" + "countryCode" + "\\}", apiClient.escapeString(countryCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (language != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("language", language));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call formByCountryValidateBeforeCall(String countryCode, String language, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'countryCode' is set
        if (countryCode == null) {
            throw new ApiException("Missing the required parameter 'countryCode' when calling formByCountry(Async)");
        }
        

        com.squareup.okhttp.Call call = formByCountryCall(countryCode, language, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Provides a dyamic form definition for the given country code, with labels localized using the provided language.
     * 
     * @param countryCode The 2 letter ISO country code, e.g.: IE. (required)
     * @param language (Optional) ISO culture info code, e.g.: en-IE, the default is en-US. (optional)
     * @return RestApiResultAddressFormResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultAddressFormResponse formByCountry(String countryCode, String language) throws ApiException {
        ApiResponse<RestApiResultAddressFormResponse> resp = formByCountryWithHttpInfo(countryCode, language);
        return resp.getData();
    }

    /**
     * Provides a dyamic form definition for the given country code, with labels localized using the provided language.
     * 
     * @param countryCode The 2 letter ISO country code, e.g.: IE. (required)
     * @param language (Optional) ISO culture info code, e.g.: en-IE, the default is en-US. (optional)
     * @return ApiResponse&lt;RestApiResultAddressFormResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultAddressFormResponse> formByCountryWithHttpInfo(String countryCode, String language) throws ApiException {
        com.squareup.okhttp.Call call = formByCountryValidateBeforeCall(countryCode, language, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultAddressFormResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Provides a dyamic form definition for the given country code, with labels localized using the provided language. (asynchronously)
     * 
     * @param countryCode The 2 letter ISO country code, e.g.: IE. (required)
     * @param language (Optional) ISO culture info code, e.g.: en-IE, the default is en-US. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call formByCountryAsync(String countryCode, String language, final ApiCallback<RestApiResultAddressFormResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = formByCountryValidateBeforeCall(countryCode, language, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultAddressFormResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for formatGoogleAddress
     * @param googleAddress A Google address object, as it is retuned from the maps API. (required)
     * @param language (Optional) ISO culture info code, e.g.: en-IE, the default is en-US. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call formatGoogleAddressCall(GoogleAddress googleAddress, String language, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = googleAddress;

        // create path and map variables
        String localVarPath = "/api/v1.0/address/google";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (language != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("language", language));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call formatGoogleAddressValidateBeforeCall(GoogleAddress googleAddress, String language, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'googleAddress' is set
        if (googleAddress == null) {
            throw new ApiException("Missing the required parameter 'googleAddress' when calling formatGoogleAddress(Async)");
        }
        

        com.squareup.okhttp.Call call = formatGoogleAddressCall(googleAddress, language, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Maps a Google Address Object to the values of the dynamic form associated with the address country and returns the dynamic form.
     * 
     * @param googleAddress A Google address object, as it is retuned from the maps API. (required)
     * @param language (Optional) ISO culture info code, e.g.: en-IE, the default is en-US. (optional)
     * @return RestApiResultAddressFormResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultAddressFormResponse formatGoogleAddress(GoogleAddress googleAddress, String language) throws ApiException {
        ApiResponse<RestApiResultAddressFormResponse> resp = formatGoogleAddressWithHttpInfo(googleAddress, language);
        return resp.getData();
    }

    /**
     * Maps a Google Address Object to the values of the dynamic form associated with the address country and returns the dynamic form.
     * 
     * @param googleAddress A Google address object, as it is retuned from the maps API. (required)
     * @param language (Optional) ISO culture info code, e.g.: en-IE, the default is en-US. (optional)
     * @return ApiResponse&lt;RestApiResultAddressFormResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultAddressFormResponse> formatGoogleAddressWithHttpInfo(GoogleAddress googleAddress, String language) throws ApiException {
        com.squareup.okhttp.Call call = formatGoogleAddressValidateBeforeCall(googleAddress, language, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultAddressFormResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Maps a Google Address Object to the values of the dynamic form associated with the address country and returns the dynamic form. (asynchronously)
     * 
     * @param googleAddress A Google address object, as it is retuned from the maps API. (required)
     * @param language (Optional) ISO culture info code, e.g.: en-IE, the default is en-US. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call formatGoogleAddressAsync(GoogleAddress googleAddress, String language, final ApiCallback<RestApiResultAddressFormResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = formatGoogleAddressValidateBeforeCall(googleAddress, language, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultAddressFormResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
