/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.flipdish.apiclient.api;

import com.flipdish.apiclient.ApiCallback;
import com.flipdish.apiclient.ApiClient;
import com.flipdish.apiclient.ApiException;
import com.flipdish.apiclient.ApiResponse;
import com.flipdish.apiclient.Configuration;
import com.flipdish.apiclient.Pair;
import com.flipdish.apiclient.ProgressRequestBody;
import com.flipdish.apiclient.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.flipdish.apiclient.model.CreateProduct;
import com.flipdish.apiclient.model.Product;
import com.flipdish.apiclient.model.RestApiErrorResult;
import com.flipdish.apiclient.model.RestApiForbiddenResult;
import com.flipdish.apiclient.model.RestApiPaginationResultCatalogItem;
import com.flipdish.apiclient.model.RestApiResultProduct;
import com.flipdish.apiclient.model.RestApiUnauthorizedResult;
import com.flipdish.apiclient.model.UpdateProduct;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CatalogProductsApi {
    private ApiClient apiClient;

    public CatalogProductsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CatalogProductsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for archiveProduct
     * @param appId  (required)
     * @param catalogItemId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call archiveProductCall(String appId, String catalogItemId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/catalog/products/{catalogItemId}/archive"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "catalogItemId" + "\\}", apiClient.escapeString(catalogItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call archiveProductValidateBeforeCall(String appId, String catalogItemId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling archiveProduct(Async)");
        }
        
        // verify the required parameter 'catalogItemId' is set
        if (catalogItemId == null) {
            throw new ApiException("Missing the required parameter 'catalogItemId' when calling archiveProduct(Async)");
        }
        

        com.squareup.okhttp.Call call = archiveProductCall(appId, catalogItemId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Archive Product
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param appId  (required)
     * @param catalogItemId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void archiveProduct(String appId, String catalogItemId) throws ApiException {
        archiveProductWithHttpInfo(appId, catalogItemId);
    }

    /**
     * Archive Product
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param appId  (required)
     * @param catalogItemId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> archiveProductWithHttpInfo(String appId, String catalogItemId) throws ApiException {
        com.squareup.okhttp.Call call = archiveProductValidateBeforeCall(appId, catalogItemId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Archive Product (asynchronously)
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param appId  (required)
     * @param catalogItemId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call archiveProductAsync(String appId, String catalogItemId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = archiveProductValidateBeforeCall(appId, catalogItemId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createProduct
     * @param appId  (required)
     * @param createProduct  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createProductCall(String appId, CreateProduct createProduct, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = createProduct;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/catalog/products"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createProductValidateBeforeCall(String appId, CreateProduct createProduct, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling createProduct(Async)");
        }
        
        // verify the required parameter 'createProduct' is set
        if (createProduct == null) {
            throw new ApiException("Missing the required parameter 'createProduct' when calling createProduct(Async)");
        }
        

        com.squareup.okhttp.Call call = createProductCall(appId, createProduct, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a Product
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param appId  (required)
     * @param createProduct  (required)
     * @return RestApiResultProduct
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultProduct createProduct(String appId, CreateProduct createProduct) throws ApiException {
        ApiResponse<RestApiResultProduct> resp = createProductWithHttpInfo(appId, createProduct);
        return resp.getData();
    }

    /**
     * Create a Product
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param appId  (required)
     * @param createProduct  (required)
     * @return ApiResponse&lt;RestApiResultProduct&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultProduct> createProductWithHttpInfo(String appId, CreateProduct createProduct) throws ApiException {
        com.squareup.okhttp.Call call = createProductValidateBeforeCall(appId, createProduct, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultProduct>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a Product (asynchronously)
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param appId  (required)
     * @param createProduct  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createProductAsync(String appId, CreateProduct createProduct, final ApiCallback<RestApiResultProduct> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createProductValidateBeforeCall(appId, createProduct, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultProduct>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for duplicateProduct
     * @param appId  (required)
     * @param catalogItemId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call duplicateProductCall(String appId, String catalogItemId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/catalog/products/{catalogItemId}/duplicate"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "catalogItemId" + "\\}", apiClient.escapeString(catalogItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call duplicateProductValidateBeforeCall(String appId, String catalogItemId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling duplicateProduct(Async)");
        }
        
        // verify the required parameter 'catalogItemId' is set
        if (catalogItemId == null) {
            throw new ApiException("Missing the required parameter 'catalogItemId' when calling duplicateProduct(Async)");
        }
        

        com.squareup.okhttp.Call call = duplicateProductCall(appId, catalogItemId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Duplicate Product
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param appId  (required)
     * @param catalogItemId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void duplicateProduct(String appId, String catalogItemId) throws ApiException {
        duplicateProductWithHttpInfo(appId, catalogItemId);
    }

    /**
     * Duplicate Product
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param appId  (required)
     * @param catalogItemId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> duplicateProductWithHttpInfo(String appId, String catalogItemId) throws ApiException {
        com.squareup.okhttp.Call call = duplicateProductValidateBeforeCall(appId, catalogItemId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Duplicate Product (asynchronously)
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param appId  (required)
     * @param catalogItemId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call duplicateProductAsync(String appId, String catalogItemId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = duplicateProductValidateBeforeCall(appId, catalogItemId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getProductById
     * @param appId  (required)
     * @param catalogItemId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getProductByIdCall(String appId, String catalogItemId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/catalog/products/{catalogItemId}"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "catalogItemId" + "\\}", apiClient.escapeString(catalogItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getProductByIdValidateBeforeCall(String appId, String catalogItemId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getProductById(Async)");
        }
        
        // verify the required parameter 'catalogItemId' is set
        if (catalogItemId == null) {
            throw new ApiException("Missing the required parameter 'catalogItemId' when calling getProductById(Async)");
        }
        

        com.squareup.okhttp.Call call = getProductByIdCall(appId, catalogItemId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Product by Id
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param appId  (required)
     * @param catalogItemId  (required)
     * @return Product
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Product getProductById(String appId, String catalogItemId) throws ApiException {
        ApiResponse<Product> resp = getProductByIdWithHttpInfo(appId, catalogItemId);
        return resp.getData();
    }

    /**
     * Get Product by Id
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param appId  (required)
     * @param catalogItemId  (required)
     * @return ApiResponse&lt;Product&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Product> getProductByIdWithHttpInfo(String appId, String catalogItemId) throws ApiException {
        com.squareup.okhttp.Call call = getProductByIdValidateBeforeCall(appId, catalogItemId, null, null);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Product by Id (asynchronously)
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param appId  (required)
     * @param catalogItemId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getProductByIdAsync(String appId, String catalogItemId, final ApiCallback<Product> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getProductByIdValidateBeforeCall(appId, catalogItemId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getProducts
     * @param appId  (required)
     * @param itemTypes  (required)
     * @param searchTerm  (optional)
     * @param page  (optional)
     * @param limit  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getProductsCall(String appId, List<String> itemTypes, String searchTerm, Integer page, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/catalog/products"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (itemTypes != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "itemTypes", itemTypes));
        if (searchTerm != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("searchTerm", searchTerm));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getProductsValidateBeforeCall(String appId, List<String> itemTypes, String searchTerm, Integer page, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getProducts(Async)");
        }
        
        // verify the required parameter 'itemTypes' is set
        if (itemTypes == null) {
            throw new ApiException("Missing the required parameter 'itemTypes' when calling getProducts(Async)");
        }
        

        com.squareup.okhttp.Call call = getProductsCall(appId, itemTypes, searchTerm, page, limit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get paginated products by app name id filtered by types
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param appId  (required)
     * @param itemTypes  (required)
     * @param searchTerm  (optional)
     * @param page  (optional)
     * @param limit  (optional)
     * @return RestApiPaginationResultCatalogItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiPaginationResultCatalogItem getProducts(String appId, List<String> itemTypes, String searchTerm, Integer page, Integer limit) throws ApiException {
        ApiResponse<RestApiPaginationResultCatalogItem> resp = getProductsWithHttpInfo(appId, itemTypes, searchTerm, page, limit);
        return resp.getData();
    }

    /**
     * Get paginated products by app name id filtered by types
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param appId  (required)
     * @param itemTypes  (required)
     * @param searchTerm  (optional)
     * @param page  (optional)
     * @param limit  (optional)
     * @return ApiResponse&lt;RestApiPaginationResultCatalogItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiPaginationResultCatalogItem> getProductsWithHttpInfo(String appId, List<String> itemTypes, String searchTerm, Integer page, Integer limit) throws ApiException {
        com.squareup.okhttp.Call call = getProductsValidateBeforeCall(appId, itemTypes, searchTerm, page, limit, null, null);
        Type localVarReturnType = new TypeToken<RestApiPaginationResultCatalogItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get paginated products by app name id filtered by types (asynchronously)
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param appId  (required)
     * @param itemTypes  (required)
     * @param searchTerm  (optional)
     * @param page  (optional)
     * @param limit  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getProductsAsync(String appId, List<String> itemTypes, String searchTerm, Integer page, Integer limit, final ApiCallback<RestApiPaginationResultCatalogItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getProductsValidateBeforeCall(appId, itemTypes, searchTerm, page, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiPaginationResultCatalogItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateProduct
     * @param appId  (required)
     * @param catalogItemId  (required)
     * @param updateProduct  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateProductCall(String appId, String catalogItemId, UpdateProduct updateProduct, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = updateProduct;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/catalog/products/{catalogItemId}"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "catalogItemId" + "\\}", apiClient.escapeString(catalogItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateProductValidateBeforeCall(String appId, String catalogItemId, UpdateProduct updateProduct, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling updateProduct(Async)");
        }
        
        // verify the required parameter 'catalogItemId' is set
        if (catalogItemId == null) {
            throw new ApiException("Missing the required parameter 'catalogItemId' when calling updateProduct(Async)");
        }
        
        // verify the required parameter 'updateProduct' is set
        if (updateProduct == null) {
            throw new ApiException("Missing the required parameter 'updateProduct' when calling updateProduct(Async)");
        }
        

        com.squareup.okhttp.Call call = updateProductCall(appId, catalogItemId, updateProduct, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update Product
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param appId  (required)
     * @param catalogItemId  (required)
     * @param updateProduct  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateProduct(String appId, String catalogItemId, UpdateProduct updateProduct) throws ApiException {
        updateProductWithHttpInfo(appId, catalogItemId, updateProduct);
    }

    /**
     * Update Product
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param appId  (required)
     * @param catalogItemId  (required)
     * @param updateProduct  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateProductWithHttpInfo(String appId, String catalogItemId, UpdateProduct updateProduct) throws ApiException {
        com.squareup.okhttp.Call call = updateProductValidateBeforeCall(appId, catalogItemId, updateProduct, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update Product (asynchronously)
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param appId  (required)
     * @param catalogItemId  (required)
     * @param updateProduct  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateProductAsync(String appId, String catalogItemId, UpdateProduct updateProduct, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateProductValidateBeforeCall(appId, catalogItemId, updateProduct, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
