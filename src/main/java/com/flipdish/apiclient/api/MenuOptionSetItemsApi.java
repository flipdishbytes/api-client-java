/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.flipdish.apiclient.api;

import com.flipdish.apiclient.ApiCallback;
import com.flipdish.apiclient.ApiClient;
import com.flipdish.apiclient.ApiException;
import com.flipdish.apiclient.ApiResponse;
import com.flipdish.apiclient.Configuration;
import com.flipdish.apiclient.Pair;
import com.flipdish.apiclient.ProgressRequestBody;
import com.flipdish.apiclient.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import com.flipdish.apiclient.model.MenuItemOptionSetItemBase;
import com.flipdish.apiclient.model.RestApiArrayResultMenuItemOptionSetItem;
import com.flipdish.apiclient.model.RestApiErrorResult;
import com.flipdish.apiclient.model.RestApiForbiddenResult;
import com.flipdish.apiclient.model.RestApiResultMenuItemOptionSetItem;
import com.flipdish.apiclient.model.RestApiStringResult;
import com.flipdish.apiclient.model.RestApiUnauthorizedResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MenuOptionSetItemsApi {
    private ApiClient apiClient;

    public MenuOptionSetItemsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MenuOptionSetItemsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addMenuItemOptionSetItem
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSectionItemId Menu section item identifier (required)
     * @param optionSetId Option set identifier (required)
     * @param menuItemOptionSetItem Option set item (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addMenuItemOptionSetItemCall(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, Integer optionSetId, MenuItemOptionSetItemBase menuItemOptionSetItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = menuItemOptionSetItem;

        // create path and map variables
        String localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/optionsets/{optionSetId}/optionsetitems"
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()))
            .replaceAll("\\{" + "menuSectionId" + "\\}", apiClient.escapeString(menuSectionId.toString()))
            .replaceAll("\\{" + "menuSectionItemId" + "\\}", apiClient.escapeString(menuSectionItemId.toString()))
            .replaceAll("\\{" + "optionSetId" + "\\}", apiClient.escapeString(optionSetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addMenuItemOptionSetItemValidateBeforeCall(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, Integer optionSetId, MenuItemOptionSetItemBase menuItemOptionSetItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling addMenuItemOptionSetItem(Async)");
        }
        
        // verify the required parameter 'menuSectionId' is set
        if (menuSectionId == null) {
            throw new ApiException("Missing the required parameter 'menuSectionId' when calling addMenuItemOptionSetItem(Async)");
        }
        
        // verify the required parameter 'menuSectionItemId' is set
        if (menuSectionItemId == null) {
            throw new ApiException("Missing the required parameter 'menuSectionItemId' when calling addMenuItemOptionSetItem(Async)");
        }
        
        // verify the required parameter 'optionSetId' is set
        if (optionSetId == null) {
            throw new ApiException("Missing the required parameter 'optionSetId' when calling addMenuItemOptionSetItem(Async)");
        }
        
        // verify the required parameter 'menuItemOptionSetItem' is set
        if (menuItemOptionSetItem == null) {
            throw new ApiException("Missing the required parameter 'menuItemOptionSetItem' when calling addMenuItemOptionSetItem(Async)");
        }
        

        com.squareup.okhttp.Call call = addMenuItemOptionSetItemCall(menuId, menuSectionId, menuSectionItemId, optionSetId, menuItemOptionSetItem, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create menu item option set item
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSectionItemId Menu section item identifier (required)
     * @param optionSetId Option set identifier (required)
     * @param menuItemOptionSetItem Option set item (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object addMenuItemOptionSetItem(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, Integer optionSetId, MenuItemOptionSetItemBase menuItemOptionSetItem) throws ApiException {
        ApiResponse<Object> resp = addMenuItemOptionSetItemWithHttpInfo(menuId, menuSectionId, menuSectionItemId, optionSetId, menuItemOptionSetItem);
        return resp.getData();
    }

    /**
     * Create menu item option set item
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSectionItemId Menu section item identifier (required)
     * @param optionSetId Option set identifier (required)
     * @param menuItemOptionSetItem Option set item (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> addMenuItemOptionSetItemWithHttpInfo(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, Integer optionSetId, MenuItemOptionSetItemBase menuItemOptionSetItem) throws ApiException {
        com.squareup.okhttp.Call call = addMenuItemOptionSetItemValidateBeforeCall(menuId, menuSectionId, menuSectionItemId, optionSetId, menuItemOptionSetItem, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create menu item option set item (asynchronously)
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSectionItemId Menu section item identifier (required)
     * @param optionSetId Option set identifier (required)
     * @param menuItemOptionSetItem Option set item (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addMenuItemOptionSetItemAsync(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, Integer optionSetId, MenuItemOptionSetItemBase menuItemOptionSetItem, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addMenuItemOptionSetItemValidateBeforeCall(menuId, menuSectionId, menuSectionItemId, optionSetId, menuItemOptionSetItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteOptionSetItemImage
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSectionItemId Menu section item identifier (required)
     * @param optionSetId Option set identifier (required)
     * @param menuItemOptionSetItemId Option set item identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteOptionSetItemImageCall(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, Integer optionSetId, Integer menuItemOptionSetItemId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/optionsets/{optionSetId}/optionsetitems/{menuItemOptionSetItemId}/image"
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()))
            .replaceAll("\\{" + "menuSectionId" + "\\}", apiClient.escapeString(menuSectionId.toString()))
            .replaceAll("\\{" + "menuSectionItemId" + "\\}", apiClient.escapeString(menuSectionItemId.toString()))
            .replaceAll("\\{" + "optionSetId" + "\\}", apiClient.escapeString(optionSetId.toString()))
            .replaceAll("\\{" + "menuItemOptionSetItemId" + "\\}", apiClient.escapeString(menuItemOptionSetItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteOptionSetItemImageValidateBeforeCall(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, Integer optionSetId, Integer menuItemOptionSetItemId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling deleteOptionSetItemImage(Async)");
        }
        
        // verify the required parameter 'menuSectionId' is set
        if (menuSectionId == null) {
            throw new ApiException("Missing the required parameter 'menuSectionId' when calling deleteOptionSetItemImage(Async)");
        }
        
        // verify the required parameter 'menuSectionItemId' is set
        if (menuSectionItemId == null) {
            throw new ApiException("Missing the required parameter 'menuSectionItemId' when calling deleteOptionSetItemImage(Async)");
        }
        
        // verify the required parameter 'optionSetId' is set
        if (optionSetId == null) {
            throw new ApiException("Missing the required parameter 'optionSetId' when calling deleteOptionSetItemImage(Async)");
        }
        
        // verify the required parameter 'menuItemOptionSetItemId' is set
        if (menuItemOptionSetItemId == null) {
            throw new ApiException("Missing the required parameter 'menuItemOptionSetItemId' when calling deleteOptionSetItemImage(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteOptionSetItemImageCall(menuId, menuSectionId, menuSectionItemId, optionSetId, menuItemOptionSetItemId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete menu item option set item image
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSectionItemId Menu section item identifier (required)
     * @param optionSetId Option set identifier (required)
     * @param menuItemOptionSetItemId Option set item identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteOptionSetItemImage(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, Integer optionSetId, Integer menuItemOptionSetItemId) throws ApiException {
        deleteOptionSetItemImageWithHttpInfo(menuId, menuSectionId, menuSectionItemId, optionSetId, menuItemOptionSetItemId);
    }

    /**
     * Delete menu item option set item image
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSectionItemId Menu section item identifier (required)
     * @param optionSetId Option set identifier (required)
     * @param menuItemOptionSetItemId Option set item identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteOptionSetItemImageWithHttpInfo(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, Integer optionSetId, Integer menuItemOptionSetItemId) throws ApiException {
        com.squareup.okhttp.Call call = deleteOptionSetItemImageValidateBeforeCall(menuId, menuSectionId, menuSectionItemId, optionSetId, menuItemOptionSetItemId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete menu item option set item image (asynchronously)
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSectionItemId Menu section item identifier (required)
     * @param optionSetId Option set identifier (required)
     * @param menuItemOptionSetItemId Option set item identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteOptionSetItemImageAsync(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, Integer optionSetId, Integer menuItemOptionSetItemId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteOptionSetItemImageValidateBeforeCall(menuId, menuSectionId, menuSectionItemId, optionSetId, menuItemOptionSetItemId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getMenuItemOptionSetItemById
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSectionItemId Menu section item identifier (required)
     * @param optionSetId Option set identifier (required)
     * @param menuItemOptionSetItemId Option set item identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMenuItemOptionSetItemByIdCall(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, Integer optionSetId, Integer menuItemOptionSetItemId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/optionsets/{optionSetId}/optionsetitems/{menuItemOptionSetItemId}"
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()))
            .replaceAll("\\{" + "menuSectionId" + "\\}", apiClient.escapeString(menuSectionId.toString()))
            .replaceAll("\\{" + "menuSectionItemId" + "\\}", apiClient.escapeString(menuSectionItemId.toString()))
            .replaceAll("\\{" + "optionSetId" + "\\}", apiClient.escapeString(optionSetId.toString()))
            .replaceAll("\\{" + "menuItemOptionSetItemId" + "\\}", apiClient.escapeString(menuItemOptionSetItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMenuItemOptionSetItemByIdValidateBeforeCall(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, Integer optionSetId, Integer menuItemOptionSetItemId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling getMenuItemOptionSetItemById(Async)");
        }
        
        // verify the required parameter 'menuSectionId' is set
        if (menuSectionId == null) {
            throw new ApiException("Missing the required parameter 'menuSectionId' when calling getMenuItemOptionSetItemById(Async)");
        }
        
        // verify the required parameter 'menuSectionItemId' is set
        if (menuSectionItemId == null) {
            throw new ApiException("Missing the required parameter 'menuSectionItemId' when calling getMenuItemOptionSetItemById(Async)");
        }
        
        // verify the required parameter 'optionSetId' is set
        if (optionSetId == null) {
            throw new ApiException("Missing the required parameter 'optionSetId' when calling getMenuItemOptionSetItemById(Async)");
        }
        
        // verify the required parameter 'menuItemOptionSetItemId' is set
        if (menuItemOptionSetItemId == null) {
            throw new ApiException("Missing the required parameter 'menuItemOptionSetItemId' when calling getMenuItemOptionSetItemById(Async)");
        }
        

        com.squareup.okhttp.Call call = getMenuItemOptionSetItemByIdCall(menuId, menuSectionId, menuSectionItemId, optionSetId, menuItemOptionSetItemId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get menu item option set item by identifier
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSectionItemId Menu section item identifier (required)
     * @param optionSetId Option set identifier (required)
     * @param menuItemOptionSetItemId Option set item identifier (required)
     * @return RestApiResultMenuItemOptionSetItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultMenuItemOptionSetItem getMenuItemOptionSetItemById(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, Integer optionSetId, Integer menuItemOptionSetItemId) throws ApiException {
        ApiResponse<RestApiResultMenuItemOptionSetItem> resp = getMenuItemOptionSetItemByIdWithHttpInfo(menuId, menuSectionId, menuSectionItemId, optionSetId, menuItemOptionSetItemId);
        return resp.getData();
    }

    /**
     * Get menu item option set item by identifier
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSectionItemId Menu section item identifier (required)
     * @param optionSetId Option set identifier (required)
     * @param menuItemOptionSetItemId Option set item identifier (required)
     * @return ApiResponse&lt;RestApiResultMenuItemOptionSetItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultMenuItemOptionSetItem> getMenuItemOptionSetItemByIdWithHttpInfo(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, Integer optionSetId, Integer menuItemOptionSetItemId) throws ApiException {
        com.squareup.okhttp.Call call = getMenuItemOptionSetItemByIdValidateBeforeCall(menuId, menuSectionId, menuSectionItemId, optionSetId, menuItemOptionSetItemId, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultMenuItemOptionSetItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get menu item option set item by identifier (asynchronously)
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSectionItemId Menu section item identifier (required)
     * @param optionSetId Option set identifier (required)
     * @param menuItemOptionSetItemId Option set item identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMenuItemOptionSetItemByIdAsync(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, Integer optionSetId, Integer menuItemOptionSetItemId, final ApiCallback<RestApiResultMenuItemOptionSetItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMenuItemOptionSetItemByIdValidateBeforeCall(menuId, menuSectionId, menuSectionItemId, optionSetId, menuItemOptionSetItemId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultMenuItemOptionSetItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getMenuItemOptionSetItems
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSectionItemId Menu section item identifier (required)
     * @param optionSetId Option set identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMenuItemOptionSetItemsCall(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, Integer optionSetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/optionsets/{optionSetId}/optionsetitems"
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()))
            .replaceAll("\\{" + "menuSectionId" + "\\}", apiClient.escapeString(menuSectionId.toString()))
            .replaceAll("\\{" + "menuSectionItemId" + "\\}", apiClient.escapeString(menuSectionItemId.toString()))
            .replaceAll("\\{" + "optionSetId" + "\\}", apiClient.escapeString(optionSetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMenuItemOptionSetItemsValidateBeforeCall(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, Integer optionSetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling getMenuItemOptionSetItems(Async)");
        }
        
        // verify the required parameter 'menuSectionId' is set
        if (menuSectionId == null) {
            throw new ApiException("Missing the required parameter 'menuSectionId' when calling getMenuItemOptionSetItems(Async)");
        }
        
        // verify the required parameter 'menuSectionItemId' is set
        if (menuSectionItemId == null) {
            throw new ApiException("Missing the required parameter 'menuSectionItemId' when calling getMenuItemOptionSetItems(Async)");
        }
        
        // verify the required parameter 'optionSetId' is set
        if (optionSetId == null) {
            throw new ApiException("Missing the required parameter 'optionSetId' when calling getMenuItemOptionSetItems(Async)");
        }
        

        com.squareup.okhttp.Call call = getMenuItemOptionSetItemsCall(menuId, menuSectionId, menuSectionItemId, optionSetId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get menu item option set items
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSectionItemId Menu section item identifier (required)
     * @param optionSetId Option set identifier (required)
     * @return RestApiArrayResultMenuItemOptionSetItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiArrayResultMenuItemOptionSetItem getMenuItemOptionSetItems(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, Integer optionSetId) throws ApiException {
        ApiResponse<RestApiArrayResultMenuItemOptionSetItem> resp = getMenuItemOptionSetItemsWithHttpInfo(menuId, menuSectionId, menuSectionItemId, optionSetId);
        return resp.getData();
    }

    /**
     * Get menu item option set items
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSectionItemId Menu section item identifier (required)
     * @param optionSetId Option set identifier (required)
     * @return ApiResponse&lt;RestApiArrayResultMenuItemOptionSetItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiArrayResultMenuItemOptionSetItem> getMenuItemOptionSetItemsWithHttpInfo(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, Integer optionSetId) throws ApiException {
        com.squareup.okhttp.Call call = getMenuItemOptionSetItemsValidateBeforeCall(menuId, menuSectionId, menuSectionItemId, optionSetId, null, null);
        Type localVarReturnType = new TypeToken<RestApiArrayResultMenuItemOptionSetItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get menu item option set items (asynchronously)
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSectionItemId Menu section item identifier (required)
     * @param optionSetId Option set identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMenuItemOptionSetItemsAsync(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, Integer optionSetId, final ApiCallback<RestApiArrayResultMenuItemOptionSetItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMenuItemOptionSetItemsValidateBeforeCall(menuId, menuSectionId, menuSectionItemId, optionSetId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiArrayResultMenuItemOptionSetItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for removeMenuItemOptionSetItem
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSectionItemId Menu section item identifier (required)
     * @param optionSetId Option set identifier (required)
     * @param menuItemOptionSetItemId Option set item identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call removeMenuItemOptionSetItemCall(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, Integer optionSetId, Integer menuItemOptionSetItemId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/optionsets/{optionSetId}/optionsetitems/{menuItemOptionSetItemId}"
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()))
            .replaceAll("\\{" + "menuSectionId" + "\\}", apiClient.escapeString(menuSectionId.toString()))
            .replaceAll("\\{" + "menuSectionItemId" + "\\}", apiClient.escapeString(menuSectionItemId.toString()))
            .replaceAll("\\{" + "optionSetId" + "\\}", apiClient.escapeString(optionSetId.toString()))
            .replaceAll("\\{" + "menuItemOptionSetItemId" + "\\}", apiClient.escapeString(menuItemOptionSetItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call removeMenuItemOptionSetItemValidateBeforeCall(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, Integer optionSetId, Integer menuItemOptionSetItemId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling removeMenuItemOptionSetItem(Async)");
        }
        
        // verify the required parameter 'menuSectionId' is set
        if (menuSectionId == null) {
            throw new ApiException("Missing the required parameter 'menuSectionId' when calling removeMenuItemOptionSetItem(Async)");
        }
        
        // verify the required parameter 'menuSectionItemId' is set
        if (menuSectionItemId == null) {
            throw new ApiException("Missing the required parameter 'menuSectionItemId' when calling removeMenuItemOptionSetItem(Async)");
        }
        
        // verify the required parameter 'optionSetId' is set
        if (optionSetId == null) {
            throw new ApiException("Missing the required parameter 'optionSetId' when calling removeMenuItemOptionSetItem(Async)");
        }
        
        // verify the required parameter 'menuItemOptionSetItemId' is set
        if (menuItemOptionSetItemId == null) {
            throw new ApiException("Missing the required parameter 'menuItemOptionSetItemId' when calling removeMenuItemOptionSetItem(Async)");
        }
        

        com.squareup.okhttp.Call call = removeMenuItemOptionSetItemCall(menuId, menuSectionId, menuSectionItemId, optionSetId, menuItemOptionSetItemId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete menu item option set item
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSectionItemId Menu section item identifier (required)
     * @param optionSetId Option set identifier (required)
     * @param menuItemOptionSetItemId Option set item identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void removeMenuItemOptionSetItem(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, Integer optionSetId, Integer menuItemOptionSetItemId) throws ApiException {
        removeMenuItemOptionSetItemWithHttpInfo(menuId, menuSectionId, menuSectionItemId, optionSetId, menuItemOptionSetItemId);
    }

    /**
     * Delete menu item option set item
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSectionItemId Menu section item identifier (required)
     * @param optionSetId Option set identifier (required)
     * @param menuItemOptionSetItemId Option set item identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> removeMenuItemOptionSetItemWithHttpInfo(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, Integer optionSetId, Integer menuItemOptionSetItemId) throws ApiException {
        com.squareup.okhttp.Call call = removeMenuItemOptionSetItemValidateBeforeCall(menuId, menuSectionId, menuSectionItemId, optionSetId, menuItemOptionSetItemId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete menu item option set item (asynchronously)
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSectionItemId Menu section item identifier (required)
     * @param optionSetId Option set identifier (required)
     * @param menuItemOptionSetItemId Option set item identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeMenuItemOptionSetItemAsync(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, Integer optionSetId, Integer menuItemOptionSetItemId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeMenuItemOptionSetItemValidateBeforeCall(menuId, menuSectionId, menuSectionItemId, optionSetId, menuItemOptionSetItemId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for setOptionSetItemTax
     * @param menuId Menu identifier (required)
     * @param menuSectionId  (required)
     * @param menuSectionItemId  (required)
     * @param optionSetId  (required)
     * @param menuItemOptionSetItemId Option set item identifier (required)
     * @param taxRateId Tax Rate to use (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setOptionSetItemTaxCall(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, Integer optionSetId, Integer menuItemOptionSetItemId, Integer taxRateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/optionsets/{optionSetId}/optionsetitems/{menuItemOptionSetItemId}/taxrate/{taxRateId}"
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()))
            .replaceAll("\\{" + "menuSectionId" + "\\}", apiClient.escapeString(menuSectionId.toString()))
            .replaceAll("\\{" + "menuSectionItemId" + "\\}", apiClient.escapeString(menuSectionItemId.toString()))
            .replaceAll("\\{" + "optionSetId" + "\\}", apiClient.escapeString(optionSetId.toString()))
            .replaceAll("\\{" + "menuItemOptionSetItemId" + "\\}", apiClient.escapeString(menuItemOptionSetItemId.toString()))
            .replaceAll("\\{" + "taxRateId" + "\\}", apiClient.escapeString(taxRateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setOptionSetItemTaxValidateBeforeCall(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, Integer optionSetId, Integer menuItemOptionSetItemId, Integer taxRateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling setOptionSetItemTax(Async)");
        }
        
        // verify the required parameter 'menuSectionId' is set
        if (menuSectionId == null) {
            throw new ApiException("Missing the required parameter 'menuSectionId' when calling setOptionSetItemTax(Async)");
        }
        
        // verify the required parameter 'menuSectionItemId' is set
        if (menuSectionItemId == null) {
            throw new ApiException("Missing the required parameter 'menuSectionItemId' when calling setOptionSetItemTax(Async)");
        }
        
        // verify the required parameter 'optionSetId' is set
        if (optionSetId == null) {
            throw new ApiException("Missing the required parameter 'optionSetId' when calling setOptionSetItemTax(Async)");
        }
        
        // verify the required parameter 'menuItemOptionSetItemId' is set
        if (menuItemOptionSetItemId == null) {
            throw new ApiException("Missing the required parameter 'menuItemOptionSetItemId' when calling setOptionSetItemTax(Async)");
        }
        
        // verify the required parameter 'taxRateId' is set
        if (taxRateId == null) {
            throw new ApiException("Missing the required parameter 'taxRateId' when calling setOptionSetItemTax(Async)");
        }
        

        com.squareup.okhttp.Call call = setOptionSetItemTaxCall(menuId, menuSectionId, menuSectionItemId, optionSetId, menuItemOptionSetItemId, taxRateId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Set Tax Rate on OptionSetItem
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId  (required)
     * @param menuSectionItemId  (required)
     * @param optionSetId  (required)
     * @param menuItemOptionSetItemId Option set item identifier (required)
     * @param taxRateId Tax Rate to use (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void setOptionSetItemTax(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, Integer optionSetId, Integer menuItemOptionSetItemId, Integer taxRateId) throws ApiException {
        setOptionSetItemTaxWithHttpInfo(menuId, menuSectionId, menuSectionItemId, optionSetId, menuItemOptionSetItemId, taxRateId);
    }

    /**
     * Set Tax Rate on OptionSetItem
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId  (required)
     * @param menuSectionItemId  (required)
     * @param optionSetId  (required)
     * @param menuItemOptionSetItemId Option set item identifier (required)
     * @param taxRateId Tax Rate to use (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> setOptionSetItemTaxWithHttpInfo(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, Integer optionSetId, Integer menuItemOptionSetItemId, Integer taxRateId) throws ApiException {
        com.squareup.okhttp.Call call = setOptionSetItemTaxValidateBeforeCall(menuId, menuSectionId, menuSectionItemId, optionSetId, menuItemOptionSetItemId, taxRateId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Set Tax Rate on OptionSetItem (asynchronously)
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId  (required)
     * @param menuSectionItemId  (required)
     * @param optionSetId  (required)
     * @param menuItemOptionSetItemId Option set item identifier (required)
     * @param taxRateId Tax Rate to use (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setOptionSetItemTaxAsync(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, Integer optionSetId, Integer menuItemOptionSetItemId, Integer taxRateId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setOptionSetItemTaxValidateBeforeCall(menuId, menuSectionId, menuSectionItemId, optionSetId, menuItemOptionSetItemId, taxRateId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateMenuItemOptionSetItem
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSectionItemId Menu section item identifier (required)
     * @param optionSetId Option set identifier (required)
     * @param menuItemOptionSetItemId Option set item identifier (required)
     * @param menuItemOptionSetItem Option set item (delta) (required)
     * @param undoAfter An optional time period, in hours, after which the hide-section operation will be undone. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateMenuItemOptionSetItemCall(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, Integer optionSetId, Integer menuItemOptionSetItemId, MenuItemOptionSetItemBase menuItemOptionSetItem, Double undoAfter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = menuItemOptionSetItem;

        // create path and map variables
        String localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/optionsets/{optionSetId}/optionsetitems/{menuItemOptionSetItemId}"
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()))
            .replaceAll("\\{" + "menuSectionId" + "\\}", apiClient.escapeString(menuSectionId.toString()))
            .replaceAll("\\{" + "menuSectionItemId" + "\\}", apiClient.escapeString(menuSectionItemId.toString()))
            .replaceAll("\\{" + "optionSetId" + "\\}", apiClient.escapeString(optionSetId.toString()))
            .replaceAll("\\{" + "menuItemOptionSetItemId" + "\\}", apiClient.escapeString(menuItemOptionSetItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (undoAfter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("undoAfter", undoAfter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateMenuItemOptionSetItemValidateBeforeCall(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, Integer optionSetId, Integer menuItemOptionSetItemId, MenuItemOptionSetItemBase menuItemOptionSetItem, Double undoAfter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling updateMenuItemOptionSetItem(Async)");
        }
        
        // verify the required parameter 'menuSectionId' is set
        if (menuSectionId == null) {
            throw new ApiException("Missing the required parameter 'menuSectionId' when calling updateMenuItemOptionSetItem(Async)");
        }
        
        // verify the required parameter 'menuSectionItemId' is set
        if (menuSectionItemId == null) {
            throw new ApiException("Missing the required parameter 'menuSectionItemId' when calling updateMenuItemOptionSetItem(Async)");
        }
        
        // verify the required parameter 'optionSetId' is set
        if (optionSetId == null) {
            throw new ApiException("Missing the required parameter 'optionSetId' when calling updateMenuItemOptionSetItem(Async)");
        }
        
        // verify the required parameter 'menuItemOptionSetItemId' is set
        if (menuItemOptionSetItemId == null) {
            throw new ApiException("Missing the required parameter 'menuItemOptionSetItemId' when calling updateMenuItemOptionSetItem(Async)");
        }
        
        // verify the required parameter 'menuItemOptionSetItem' is set
        if (menuItemOptionSetItem == null) {
            throw new ApiException("Missing the required parameter 'menuItemOptionSetItem' when calling updateMenuItemOptionSetItem(Async)");
        }
        

        com.squareup.okhttp.Call call = updateMenuItemOptionSetItemCall(menuId, menuSectionId, menuSectionItemId, optionSetId, menuItemOptionSetItemId, menuItemOptionSetItem, undoAfter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update menu item option set item
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSectionItemId Menu section item identifier (required)
     * @param optionSetId Option set identifier (required)
     * @param menuItemOptionSetItemId Option set item identifier (required)
     * @param menuItemOptionSetItem Option set item (delta) (required)
     * @param undoAfter An optional time period, in hours, after which the hide-section operation will be undone. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateMenuItemOptionSetItem(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, Integer optionSetId, Integer menuItemOptionSetItemId, MenuItemOptionSetItemBase menuItemOptionSetItem, Double undoAfter) throws ApiException {
        updateMenuItemOptionSetItemWithHttpInfo(menuId, menuSectionId, menuSectionItemId, optionSetId, menuItemOptionSetItemId, menuItemOptionSetItem, undoAfter);
    }

    /**
     * Update menu item option set item
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSectionItemId Menu section item identifier (required)
     * @param optionSetId Option set identifier (required)
     * @param menuItemOptionSetItemId Option set item identifier (required)
     * @param menuItemOptionSetItem Option set item (delta) (required)
     * @param undoAfter An optional time period, in hours, after which the hide-section operation will be undone. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateMenuItemOptionSetItemWithHttpInfo(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, Integer optionSetId, Integer menuItemOptionSetItemId, MenuItemOptionSetItemBase menuItemOptionSetItem, Double undoAfter) throws ApiException {
        com.squareup.okhttp.Call call = updateMenuItemOptionSetItemValidateBeforeCall(menuId, menuSectionId, menuSectionItemId, optionSetId, menuItemOptionSetItemId, menuItemOptionSetItem, undoAfter, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update menu item option set item (asynchronously)
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSectionItemId Menu section item identifier (required)
     * @param optionSetId Option set identifier (required)
     * @param menuItemOptionSetItemId Option set item identifier (required)
     * @param menuItemOptionSetItem Option set item (delta) (required)
     * @param undoAfter An optional time period, in hours, after which the hide-section operation will be undone. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateMenuItemOptionSetItemAsync(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, Integer optionSetId, Integer menuItemOptionSetItemId, MenuItemOptionSetItemBase menuItemOptionSetItem, Double undoAfter, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateMenuItemOptionSetItemValidateBeforeCall(menuId, menuSectionId, menuSectionItemId, optionSetId, menuItemOptionSetItemId, menuItemOptionSetItem, undoAfter, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for uploadOptionSetItemImage
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSectionItemId Menu section item identifier (required)
     * @param optionSetId Option set identifier (required)
     * @param menuItemOptionSetItemId Option set item identifier (required)
     * @param image Option set item image (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call uploadOptionSetItemImageCall(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, Integer optionSetId, Integer menuItemOptionSetItemId, File image, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/optionsets/{optionSetId}/optionsetitems/{menuItemOptionSetItemId}/image"
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()))
            .replaceAll("\\{" + "menuSectionId" + "\\}", apiClient.escapeString(menuSectionId.toString()))
            .replaceAll("\\{" + "menuSectionItemId" + "\\}", apiClient.escapeString(menuSectionItemId.toString()))
            .replaceAll("\\{" + "optionSetId" + "\\}", apiClient.escapeString(optionSetId.toString()))
            .replaceAll("\\{" + "menuItemOptionSetItemId" + "\\}", apiClient.escapeString(menuItemOptionSetItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (image != null)
        localVarFormParams.put("Image", image);

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call uploadOptionSetItemImageValidateBeforeCall(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, Integer optionSetId, Integer menuItemOptionSetItemId, File image, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling uploadOptionSetItemImage(Async)");
        }
        
        // verify the required parameter 'menuSectionId' is set
        if (menuSectionId == null) {
            throw new ApiException("Missing the required parameter 'menuSectionId' when calling uploadOptionSetItemImage(Async)");
        }
        
        // verify the required parameter 'menuSectionItemId' is set
        if (menuSectionItemId == null) {
            throw new ApiException("Missing the required parameter 'menuSectionItemId' when calling uploadOptionSetItemImage(Async)");
        }
        
        // verify the required parameter 'optionSetId' is set
        if (optionSetId == null) {
            throw new ApiException("Missing the required parameter 'optionSetId' when calling uploadOptionSetItemImage(Async)");
        }
        
        // verify the required parameter 'menuItemOptionSetItemId' is set
        if (menuItemOptionSetItemId == null) {
            throw new ApiException("Missing the required parameter 'menuItemOptionSetItemId' when calling uploadOptionSetItemImage(Async)");
        }
        
        // verify the required parameter 'image' is set
        if (image == null) {
            throw new ApiException("Missing the required parameter 'image' when calling uploadOptionSetItemImage(Async)");
        }
        

        com.squareup.okhttp.Call call = uploadOptionSetItemImageCall(menuId, menuSectionId, menuSectionItemId, optionSetId, menuItemOptionSetItemId, image, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Upload menu item option set item image
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSectionItemId Menu section item identifier (required)
     * @param optionSetId Option set identifier (required)
     * @param menuItemOptionSetItemId Option set item identifier (required)
     * @param image Option set item image (required)
     * @return RestApiStringResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiStringResult uploadOptionSetItemImage(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, Integer optionSetId, Integer menuItemOptionSetItemId, File image) throws ApiException {
        ApiResponse<RestApiStringResult> resp = uploadOptionSetItemImageWithHttpInfo(menuId, menuSectionId, menuSectionItemId, optionSetId, menuItemOptionSetItemId, image);
        return resp.getData();
    }

    /**
     * Upload menu item option set item image
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSectionItemId Menu section item identifier (required)
     * @param optionSetId Option set identifier (required)
     * @param menuItemOptionSetItemId Option set item identifier (required)
     * @param image Option set item image (required)
     * @return ApiResponse&lt;RestApiStringResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiStringResult> uploadOptionSetItemImageWithHttpInfo(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, Integer optionSetId, Integer menuItemOptionSetItemId, File image) throws ApiException {
        com.squareup.okhttp.Call call = uploadOptionSetItemImageValidateBeforeCall(menuId, menuSectionId, menuSectionItemId, optionSetId, menuItemOptionSetItemId, image, null, null);
        Type localVarReturnType = new TypeToken<RestApiStringResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Upload menu item option set item image (asynchronously)
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSectionItemId Menu section item identifier (required)
     * @param optionSetId Option set identifier (required)
     * @param menuItemOptionSetItemId Option set item identifier (required)
     * @param image Option set item image (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call uploadOptionSetItemImageAsync(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, Integer optionSetId, Integer menuItemOptionSetItemId, File image, final ApiCallback<RestApiStringResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = uploadOptionSetItemImageValidateBeforeCall(menuId, menuSectionId, menuSectionItemId, optionSetId, menuItemOptionSetItemId, image, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiStringResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
