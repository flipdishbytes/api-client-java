/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.flipdish.apiclient.api;

import com.flipdish.apiclient.ApiCallback;
import com.flipdish.apiclient.ApiClient;
import com.flipdish.apiclient.ApiException;
import com.flipdish.apiclient.ApiResponse;
import com.flipdish.apiclient.Configuration;
import com.flipdish.apiclient.Pair;
import com.flipdish.apiclient.ProgressRequestBody;
import com.flipdish.apiclient.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.flipdish.apiclient.model.CreateFullMenu;
import java.io.File;
import com.flipdish.apiclient.model.MenuBase;
import com.flipdish.apiclient.model.MenuElementHide;
import com.flipdish.apiclient.model.MenuObjectDisplayOrders;
import com.flipdish.apiclient.model.MenuTaxRate;
import com.flipdish.apiclient.model.Metadata;
import com.flipdish.apiclient.model.RestApiArrayResultAllMetadataResult;
import com.flipdish.apiclient.model.RestApiArrayResultMenuCheckpoint;
import com.flipdish.apiclient.model.RestApiArrayResultMenuElementEditResponse;
import com.flipdish.apiclient.model.RestApiArrayResultMenuElementListResponse;
import com.flipdish.apiclient.model.RestApiArrayResultMenuStoreNames;
import com.flipdish.apiclient.model.RestApiArrayResultMenuSummary;
import com.flipdish.apiclient.model.RestApiArrayResultMenuTaxDetails;
import com.flipdish.apiclient.model.RestApiArrayResultMetadata;
import com.flipdish.apiclient.model.RestApiErrorResult;
import com.flipdish.apiclient.model.RestApiForbiddenResult;
import com.flipdish.apiclient.model.RestApiResultMenu;
import com.flipdish.apiclient.model.RestApiResultMetadata;
import com.flipdish.apiclient.model.RestApiStringResult;
import com.flipdish.apiclient.model.RestApiUnauthorizedResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MenusApi {
    private ApiClient apiClient;

    public MenusApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MenusApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createDraftMenuFromExistingMenu
     * @param menuId Menu identifier (required)
     * @param newName Name of the new Menu (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createDraftMenuFromExistingMenuCall(Integer menuId, String newName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/menus/{menuId}/clone/{newName}"
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()))
            .replaceAll("\\{" + "newName" + "\\}", apiClient.escapeString(newName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createDraftMenuFromExistingMenuValidateBeforeCall(Integer menuId, String newName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling createDraftMenuFromExistingMenu(Async)");
        }
        
        // verify the required parameter 'newName' is set
        if (newName == null) {
            throw new ApiException("Missing the required parameter 'newName' when calling createDraftMenuFromExistingMenu(Async)");
        }
        

        com.squareup.okhttp.Call call = createDraftMenuFromExistingMenuCall(menuId, newName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * [PRIVATE API]Clone a menu, (without attaching stores)
     * 
     * @param menuId Menu identifier (required)
     * @param newName Name of the new Menu (required)
     * @return RestApiResultMenu
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultMenu createDraftMenuFromExistingMenu(Integer menuId, String newName) throws ApiException {
        ApiResponse<RestApiResultMenu> resp = createDraftMenuFromExistingMenuWithHttpInfo(menuId, newName);
        return resp.getData();
    }

    /**
     * [PRIVATE API]Clone a menu, (without attaching stores)
     * 
     * @param menuId Menu identifier (required)
     * @param newName Name of the new Menu (required)
     * @return ApiResponse&lt;RestApiResultMenu&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultMenu> createDraftMenuFromExistingMenuWithHttpInfo(Integer menuId, String newName) throws ApiException {
        com.squareup.okhttp.Call call = createDraftMenuFromExistingMenuValidateBeforeCall(menuId, newName, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultMenu>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * [PRIVATE API]Clone a menu, (without attaching stores) (asynchronously)
     * 
     * @param menuId Menu identifier (required)
     * @param newName Name of the new Menu (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createDraftMenuFromExistingMenuAsync(Integer menuId, String newName, final ApiCallback<RestApiResultMenu> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createDraftMenuFromExistingMenuValidateBeforeCall(menuId, newName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultMenu>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createNewMenuAsync
     * @param appId App id (required)
     * @param menu Menu (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createNewMenuAsyncCall(String appId, CreateFullMenu menu, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = menu;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/menus/async"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createNewMenuAsyncValidateBeforeCall(String appId, CreateFullMenu menu, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling createNewMenuAsync(Async)");
        }
        
        // verify the required parameter 'menu' is set
        if (menu == null) {
            throw new ApiException("Missing the required parameter 'menu' when calling createNewMenuAsync(Async)");
        }
        

        com.squareup.okhttp.Call call = createNewMenuAsyncCall(appId, menu, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a new menu asynchronously. You must listen to the webhook menu.async_creation.completed to know when the menu is ready.
     * 
     * @param appId App id (required)
     * @param menu Menu (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object createNewMenuAsync(String appId, CreateFullMenu menu) throws ApiException {
        ApiResponse<Object> resp = createNewMenuAsyncWithHttpInfo(appId, menu);
        return resp.getData();
    }

    /**
     * Create a new menu asynchronously. You must listen to the webhook menu.async_creation.completed to know when the menu is ready.
     * 
     * @param appId App id (required)
     * @param menu Menu (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> createNewMenuAsyncWithHttpInfo(String appId, CreateFullMenu menu) throws ApiException {
        com.squareup.okhttp.Call call = createNewMenuAsyncValidateBeforeCall(appId, menu, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new menu asynchronously. You must listen to the webhook menu.async_creation.completed to know when the menu is ready. (asynchronously)
     * 
     * @param appId App id (required)
     * @param menu Menu (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createNewMenuAsyncAsync(String appId, CreateFullMenu menu, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createNewMenuAsyncValidateBeforeCall(appId, menu, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createNewMenuForApp
     * @param appId App identifier (required)
     * @param menu Menu (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createNewMenuForAppCall(String appId, CreateFullMenu menu, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = menu;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/menus"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createNewMenuForAppValidateBeforeCall(String appId, CreateFullMenu menu, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling createNewMenuForApp(Async)");
        }
        
        // verify the required parameter 'menu' is set
        if (menu == null) {
            throw new ApiException("Missing the required parameter 'menu' when calling createNewMenuForApp(Async)");
        }
        

        com.squareup.okhttp.Call call = createNewMenuForAppCall(appId, menu, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a new menu. If request body is empty, the system will create a menu with default items.
     * 
     * @param appId App identifier (required)
     * @param menu Menu (required)
     * @return Integer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Integer createNewMenuForApp(String appId, CreateFullMenu menu) throws ApiException {
        ApiResponse<Integer> resp = createNewMenuForAppWithHttpInfo(appId, menu);
        return resp.getData();
    }

    /**
     * Create a new menu. If request body is empty, the system will create a menu with default items.
     * 
     * @param appId App identifier (required)
     * @param menu Menu (required)
     * @return ApiResponse&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Integer> createNewMenuForAppWithHttpInfo(String appId, CreateFullMenu menu) throws ApiException {
        com.squareup.okhttp.Call call = createNewMenuForAppValidateBeforeCall(appId, menu, null, null);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new menu. If request body is empty, the system will create a menu with default items. (asynchronously)
     * 
     * @param appId App identifier (required)
     * @param menu Menu (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createNewMenuForAppAsync(String appId, CreateFullMenu menu, final ApiCallback<Integer> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createNewMenuForAppValidateBeforeCall(appId, menu, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteMenu
     * @param menuId Menu Identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteMenuCall(Integer menuId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/menus/{menuId}"
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteMenuValidateBeforeCall(Integer menuId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling deleteMenu(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteMenuCall(menuId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * [PRIVATE API]Mark a Menu as Deleted
     * 
     * @param menuId Menu Identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteMenu(Integer menuId) throws ApiException {
        deleteMenuWithHttpInfo(menuId);
    }

    /**
     * [PRIVATE API]Mark a Menu as Deleted
     * 
     * @param menuId Menu Identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteMenuWithHttpInfo(Integer menuId) throws ApiException {
        com.squareup.okhttp.Call call = deleteMenuValidateBeforeCall(menuId, null, null);
        return apiClient.execute(call);
    }

    /**
     * [PRIVATE API]Mark a Menu as Deleted (asynchronously)
     * 
     * @param menuId Menu Identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteMenuAsync(Integer menuId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteMenuValidateBeforeCall(menuId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteMenuImage
     * @param menuId Menu identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteMenuImageCall(Integer menuId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/menus/{menuId}/image"
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteMenuImageValidateBeforeCall(Integer menuId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling deleteMenuImage(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteMenuImageCall(menuId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete menu image
     * 
     * @param menuId Menu identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteMenuImage(Integer menuId) throws ApiException {
        deleteMenuImageWithHttpInfo(menuId);
    }

    /**
     * Delete menu image
     * 
     * @param menuId Menu identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteMenuImageWithHttpInfo(Integer menuId) throws ApiException {
        com.squareup.okhttp.Call call = deleteMenuImageValidateBeforeCall(menuId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete menu image (asynchronously)
     * 
     * @param menuId Menu identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteMenuImageAsync(Integer menuId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteMenuImageValidateBeforeCall(menuId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteMenuItemMetadata
     * @param menuId Menu identifier (required)
     * @param storeId Store identifier (required)
     * @param menuItemId Menu item identifier (required)
     * @param key Metadata key (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteMenuItemMetadataCall(Integer menuId, Integer storeId, Integer menuItemId, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/menus/{menuId}/menuitem/{menuItemId}/metadata/{key}/store/{storeId}"
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()))
            .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()))
            .replaceAll("\\{" + "menuItemId" + "\\}", apiClient.escapeString(menuItemId.toString()))
            .replaceAll("\\{" + "key" + "\\}", apiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteMenuItemMetadataValidateBeforeCall(Integer menuId, Integer storeId, Integer menuItemId, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling deleteMenuItemMetadata(Async)");
        }
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling deleteMenuItemMetadata(Async)");
        }
        
        // verify the required parameter 'menuItemId' is set
        if (menuItemId == null) {
            throw new ApiException("Missing the required parameter 'menuItemId' when calling deleteMenuItemMetadata(Async)");
        }
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling deleteMenuItemMetadata(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteMenuItemMetadataCall(menuId, storeId, menuItemId, key, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete menu item metadata
     * 
     * @param menuId Menu identifier (required)
     * @param storeId Store identifier (required)
     * @param menuItemId Menu item identifier (required)
     * @param key Metadata key (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteMenuItemMetadata(Integer menuId, Integer storeId, Integer menuItemId, String key) throws ApiException {
        deleteMenuItemMetadataWithHttpInfo(menuId, storeId, menuItemId, key);
    }

    /**
     * Delete menu item metadata
     * 
     * @param menuId Menu identifier (required)
     * @param storeId Store identifier (required)
     * @param menuItemId Menu item identifier (required)
     * @param key Metadata key (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteMenuItemMetadataWithHttpInfo(Integer menuId, Integer storeId, Integer menuItemId, String key) throws ApiException {
        com.squareup.okhttp.Call call = deleteMenuItemMetadataValidateBeforeCall(menuId, storeId, menuItemId, key, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete menu item metadata (asynchronously)
     * 
     * @param menuId Menu identifier (required)
     * @param storeId Store identifier (required)
     * @param menuItemId Menu item identifier (required)
     * @param key Metadata key (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteMenuItemMetadataAsync(Integer menuId, Integer storeId, Integer menuItemId, String key, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteMenuItemMetadataValidateBeforeCall(menuId, storeId, menuItemId, key, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getAllMenuMetadataByMenuIdAndStoreId
     * @param menuId Menu identifier (required)
     * @param storeId Store identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllMenuMetadataByMenuIdAndStoreIdCall(Integer menuId, Integer storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/menus/{menuId}/metadata/store/{storeId}"
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()))
            .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllMenuMetadataByMenuIdAndStoreIdValidateBeforeCall(Integer menuId, Integer storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling getAllMenuMetadataByMenuIdAndStoreId(Async)");
        }
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling getAllMenuMetadataByMenuIdAndStoreId(Async)");
        }
        

        com.squareup.okhttp.Call call = getAllMenuMetadataByMenuIdAndStoreIdCall(menuId, storeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all menu metadata by menu ID and store ID
     * 
     * @param menuId Menu identifier (required)
     * @param storeId Store identifier (required)
     * @return RestApiArrayResultAllMetadataResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiArrayResultAllMetadataResult getAllMenuMetadataByMenuIdAndStoreId(Integer menuId, Integer storeId) throws ApiException {
        ApiResponse<RestApiArrayResultAllMetadataResult> resp = getAllMenuMetadataByMenuIdAndStoreIdWithHttpInfo(menuId, storeId);
        return resp.getData();
    }

    /**
     * Get all menu metadata by menu ID and store ID
     * 
     * @param menuId Menu identifier (required)
     * @param storeId Store identifier (required)
     * @return ApiResponse&lt;RestApiArrayResultAllMetadataResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiArrayResultAllMetadataResult> getAllMenuMetadataByMenuIdAndStoreIdWithHttpInfo(Integer menuId, Integer storeId) throws ApiException {
        com.squareup.okhttp.Call call = getAllMenuMetadataByMenuIdAndStoreIdValidateBeforeCall(menuId, storeId, null, null);
        Type localVarReturnType = new TypeToken<RestApiArrayResultAllMetadataResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all menu metadata by menu ID and store ID (asynchronously)
     * 
     * @param menuId Menu identifier (required)
     * @param storeId Store identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllMenuMetadataByMenuIdAndStoreIdAsync(Integer menuId, Integer storeId, final ApiCallback<RestApiArrayResultAllMetadataResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllMenuMetadataByMenuIdAndStoreIdValidateBeforeCall(menuId, storeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiArrayResultAllMetadataResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getMenuById
     * @param menuId Menu identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMenuByIdCall(Integer menuId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/menus/{menuId}"
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMenuByIdValidateBeforeCall(Integer menuId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling getMenuById(Async)");
        }
        

        com.squareup.okhttp.Call call = getMenuByIdCall(menuId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get menu by identifier
     * 
     * @param menuId Menu identifier (required)
     * @return RestApiResultMenu
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultMenu getMenuById(Integer menuId) throws ApiException {
        ApiResponse<RestApiResultMenu> resp = getMenuByIdWithHttpInfo(menuId);
        return resp.getData();
    }

    /**
     * Get menu by identifier
     * 
     * @param menuId Menu identifier (required)
     * @return ApiResponse&lt;RestApiResultMenu&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultMenu> getMenuByIdWithHttpInfo(Integer menuId) throws ApiException {
        com.squareup.okhttp.Call call = getMenuByIdValidateBeforeCall(menuId, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultMenu>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get menu by identifier (asynchronously)
     * 
     * @param menuId Menu identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMenuByIdAsync(Integer menuId, final ApiCallback<RestApiResultMenu> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMenuByIdValidateBeforeCall(menuId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultMenu>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getMenuItemMetadata
     * @param menuId Menu identifier (required)
     * @param storeId Store identifier (required)
     * @param menuItemId Menu item identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMenuItemMetadataCall(Integer menuId, Integer storeId, Integer menuItemId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/menus/{menuId}/menuitem/{menuItemId}/metadata/store/{storeId}"
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()))
            .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()))
            .replaceAll("\\{" + "menuItemId" + "\\}", apiClient.escapeString(menuItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMenuItemMetadataValidateBeforeCall(Integer menuId, Integer storeId, Integer menuItemId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling getMenuItemMetadata(Async)");
        }
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling getMenuItemMetadata(Async)");
        }
        
        // verify the required parameter 'menuItemId' is set
        if (menuItemId == null) {
            throw new ApiException("Missing the required parameter 'menuItemId' when calling getMenuItemMetadata(Async)");
        }
        

        com.squareup.okhttp.Call call = getMenuItemMetadataCall(menuId, storeId, menuItemId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get menu item metadata
     * 
     * @param menuId Menu identifier (required)
     * @param storeId Store identifier (required)
     * @param menuItemId Menu item identifier (required)
     * @return RestApiArrayResultMetadata
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiArrayResultMetadata getMenuItemMetadata(Integer menuId, Integer storeId, Integer menuItemId) throws ApiException {
        ApiResponse<RestApiArrayResultMetadata> resp = getMenuItemMetadataWithHttpInfo(menuId, storeId, menuItemId);
        return resp.getData();
    }

    /**
     * Get menu item metadata
     * 
     * @param menuId Menu identifier (required)
     * @param storeId Store identifier (required)
     * @param menuItemId Menu item identifier (required)
     * @return ApiResponse&lt;RestApiArrayResultMetadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiArrayResultMetadata> getMenuItemMetadataWithHttpInfo(Integer menuId, Integer storeId, Integer menuItemId) throws ApiException {
        com.squareup.okhttp.Call call = getMenuItemMetadataValidateBeforeCall(menuId, storeId, menuItemId, null, null);
        Type localVarReturnType = new TypeToken<RestApiArrayResultMetadata>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get menu item metadata (asynchronously)
     * 
     * @param menuId Menu identifier (required)
     * @param storeId Store identifier (required)
     * @param menuItemId Menu item identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMenuItemMetadataAsync(Integer menuId, Integer storeId, Integer menuItemId, final ApiCallback<RestApiArrayResultMetadata> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMenuItemMetadataValidateBeforeCall(menuId, storeId, menuItemId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiArrayResultMetadata>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getMenuItemMetadataByKey
     * @param menuId Menu identifier (required)
     * @param storeId Store identifier (required)
     * @param menuItemId Menu item identifier (required)
     * @param key Metadata key (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMenuItemMetadataByKeyCall(Integer menuId, Integer storeId, Integer menuItemId, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/menus/{menuId}/menuitem/{menuItemId}/metadata/{key}/store/{storeId}"
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()))
            .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()))
            .replaceAll("\\{" + "menuItemId" + "\\}", apiClient.escapeString(menuItemId.toString()))
            .replaceAll("\\{" + "key" + "\\}", apiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMenuItemMetadataByKeyValidateBeforeCall(Integer menuId, Integer storeId, Integer menuItemId, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling getMenuItemMetadataByKey(Async)");
        }
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling getMenuItemMetadataByKey(Async)");
        }
        
        // verify the required parameter 'menuItemId' is set
        if (menuItemId == null) {
            throw new ApiException("Missing the required parameter 'menuItemId' when calling getMenuItemMetadataByKey(Async)");
        }
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getMenuItemMetadataByKey(Async)");
        }
        

        com.squareup.okhttp.Call call = getMenuItemMetadataByKeyCall(menuId, storeId, menuItemId, key, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get menu item metadata by key
     * 
     * @param menuId Menu identifier (required)
     * @param storeId Store identifier (required)
     * @param menuItemId Menu item identifier (required)
     * @param key Metadata key (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getMenuItemMetadataByKey(Integer menuId, Integer storeId, Integer menuItemId, String key) throws ApiException {
        getMenuItemMetadataByKeyWithHttpInfo(menuId, storeId, menuItemId, key);
    }

    /**
     * Get menu item metadata by key
     * 
     * @param menuId Menu identifier (required)
     * @param storeId Store identifier (required)
     * @param menuItemId Menu item identifier (required)
     * @param key Metadata key (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getMenuItemMetadataByKeyWithHttpInfo(Integer menuId, Integer storeId, Integer menuItemId, String key) throws ApiException {
        com.squareup.okhttp.Call call = getMenuItemMetadataByKeyValidateBeforeCall(menuId, storeId, menuItemId, key, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get menu item metadata by key (asynchronously)
     * 
     * @param menuId Menu identifier (required)
     * @param storeId Store identifier (required)
     * @param menuItemId Menu item identifier (required)
     * @param key Metadata key (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMenuItemMetadataByKeyAsync(Integer menuId, Integer storeId, Integer menuItemId, String key, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMenuItemMetadataByKeyValidateBeforeCall(menuId, storeId, menuItemId, key, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getMenuItemOptionSetItemMetadata
     * @param menuId Menu identifier (required)
     * @param storeId Store identifier (required)
     * @param optionSetItemId Menu item option set item identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMenuItemOptionSetItemMetadataCall(Integer menuId, Integer storeId, Integer optionSetItemId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/menus/{menuId}/optionsetitem/{optionSetItemId}/metadata/store/{storeId}"
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()))
            .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()))
            .replaceAll("\\{" + "optionSetItemId" + "\\}", apiClient.escapeString(optionSetItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMenuItemOptionSetItemMetadataValidateBeforeCall(Integer menuId, Integer storeId, Integer optionSetItemId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling getMenuItemOptionSetItemMetadata(Async)");
        }
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling getMenuItemOptionSetItemMetadata(Async)");
        }
        
        // verify the required parameter 'optionSetItemId' is set
        if (optionSetItemId == null) {
            throw new ApiException("Missing the required parameter 'optionSetItemId' when calling getMenuItemOptionSetItemMetadata(Async)");
        }
        

        com.squareup.okhttp.Call call = getMenuItemOptionSetItemMetadataCall(menuId, storeId, optionSetItemId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get menu item option set item metadata by key
     * 
     * @param menuId Menu identifier (required)
     * @param storeId Store identifier (required)
     * @param optionSetItemId Menu item option set item identifier (required)
     * @return RestApiResultMetadata
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultMetadata getMenuItemOptionSetItemMetadata(Integer menuId, Integer storeId, Integer optionSetItemId) throws ApiException {
        ApiResponse<RestApiResultMetadata> resp = getMenuItemOptionSetItemMetadataWithHttpInfo(menuId, storeId, optionSetItemId);
        return resp.getData();
    }

    /**
     * Get menu item option set item metadata by key
     * 
     * @param menuId Menu identifier (required)
     * @param storeId Store identifier (required)
     * @param optionSetItemId Menu item option set item identifier (required)
     * @return ApiResponse&lt;RestApiResultMetadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultMetadata> getMenuItemOptionSetItemMetadataWithHttpInfo(Integer menuId, Integer storeId, Integer optionSetItemId) throws ApiException {
        com.squareup.okhttp.Call call = getMenuItemOptionSetItemMetadataValidateBeforeCall(menuId, storeId, optionSetItemId, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultMetadata>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get menu item option set item metadata by key (asynchronously)
     * 
     * @param menuId Menu identifier (required)
     * @param storeId Store identifier (required)
     * @param optionSetItemId Menu item option set item identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMenuItemOptionSetItemMetadataAsync(Integer menuId, Integer storeId, Integer optionSetItemId, final ApiCallback<RestApiResultMetadata> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMenuItemOptionSetItemMetadataValidateBeforeCall(menuId, storeId, optionSetItemId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultMetadata>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getMenuName
     * @param menuId Menu identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMenuNameCall(Integer menuId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/menus/{menuId}/name"
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMenuNameValidateBeforeCall(Integer menuId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling getMenuName(Async)");
        }
        

        com.squareup.okhttp.Call call = getMenuNameCall(menuId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * [PRIVATE API]Get Menus Name
     * 
     * @param menuId Menu identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getMenuName(Integer menuId) throws ApiException {
        getMenuNameWithHttpInfo(menuId);
    }

    /**
     * [PRIVATE API]Get Menus Name
     * 
     * @param menuId Menu identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getMenuNameWithHttpInfo(Integer menuId) throws ApiException {
        com.squareup.okhttp.Call call = getMenuNameValidateBeforeCall(menuId, null, null);
        return apiClient.execute(call);
    }

    /**
     * [PRIVATE API]Get Menus Name (asynchronously)
     * 
     * @param menuId Menu identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMenuNameAsync(Integer menuId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMenuNameValidateBeforeCall(menuId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getMenuStoreNames
     * @param menuId Menu identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMenuStoreNamesCall(Integer menuId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/menus/{menuId}/stores"
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMenuStoreNamesValidateBeforeCall(Integer menuId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling getMenuStoreNames(Async)");
        }
        

        com.squareup.okhttp.Call call = getMenuStoreNamesCall(menuId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * [PRIVATE API]Get menus store names
     * 
     * @param menuId Menu identifier (required)
     * @return RestApiArrayResultMenuStoreNames
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiArrayResultMenuStoreNames getMenuStoreNames(Integer menuId) throws ApiException {
        ApiResponse<RestApiArrayResultMenuStoreNames> resp = getMenuStoreNamesWithHttpInfo(menuId);
        return resp.getData();
    }

    /**
     * [PRIVATE API]Get menus store names
     * 
     * @param menuId Menu identifier (required)
     * @return ApiResponse&lt;RestApiArrayResultMenuStoreNames&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiArrayResultMenuStoreNames> getMenuStoreNamesWithHttpInfo(Integer menuId) throws ApiException {
        com.squareup.okhttp.Call call = getMenuStoreNamesValidateBeforeCall(menuId, null, null);
        Type localVarReturnType = new TypeToken<RestApiArrayResultMenuStoreNames>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * [PRIVATE API]Get menus store names (asynchronously)
     * 
     * @param menuId Menu identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMenuStoreNamesAsync(Integer menuId, final ApiCallback<RestApiArrayResultMenuStoreNames> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMenuStoreNamesValidateBeforeCall(menuId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiArrayResultMenuStoreNames>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getMenuTaxDetails
     * @param menuId Menu identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMenuTaxDetailsCall(Integer menuId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/menus/{menuId}/tax"
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMenuTaxDetailsValidateBeforeCall(Integer menuId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling getMenuTaxDetails(Async)");
        }
        

        com.squareup.okhttp.Call call = getMenuTaxDetailsCall(menuId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * [PRIVATE API]Get menus tax details
     * 
     * @param menuId Menu identifier (required)
     * @return RestApiArrayResultMenuTaxDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiArrayResultMenuTaxDetails getMenuTaxDetails(Integer menuId) throws ApiException {
        ApiResponse<RestApiArrayResultMenuTaxDetails> resp = getMenuTaxDetailsWithHttpInfo(menuId);
        return resp.getData();
    }

    /**
     * [PRIVATE API]Get menus tax details
     * 
     * @param menuId Menu identifier (required)
     * @return ApiResponse&lt;RestApiArrayResultMenuTaxDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiArrayResultMenuTaxDetails> getMenuTaxDetailsWithHttpInfo(Integer menuId) throws ApiException {
        com.squareup.okhttp.Call call = getMenuTaxDetailsValidateBeforeCall(menuId, null, null);
        Type localVarReturnType = new TypeToken<RestApiArrayResultMenuTaxDetails>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * [PRIVATE API]Get menus tax details (asynchronously)
     * 
     * @param menuId Menu identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMenuTaxDetailsAsync(Integer menuId, final ApiCallback<RestApiArrayResultMenuTaxDetails> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMenuTaxDetailsValidateBeforeCall(menuId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiArrayResultMenuTaxDetails>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getMenusByAppId
     * @param appId Get Menus for this appId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMenusByAppIdCall(String appId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/menus"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMenusByAppIdValidateBeforeCall(String appId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getMenusByAppId(Async)");
        }
        

        com.squareup.okhttp.Call call = getMenusByAppIdCall(appId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * [PRIVATE API]Get menus by appId
     * 
     * @param appId Get Menus for this appId (required)
     * @return RestApiArrayResultMenuSummary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiArrayResultMenuSummary getMenusByAppId(String appId) throws ApiException {
        ApiResponse<RestApiArrayResultMenuSummary> resp = getMenusByAppIdWithHttpInfo(appId);
        return resp.getData();
    }

    /**
     * [PRIVATE API]Get menus by appId
     * 
     * @param appId Get Menus for this appId (required)
     * @return ApiResponse&lt;RestApiArrayResultMenuSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiArrayResultMenuSummary> getMenusByAppIdWithHttpInfo(String appId) throws ApiException {
        com.squareup.okhttp.Call call = getMenusByAppIdValidateBeforeCall(appId, null, null);
        Type localVarReturnType = new TypeToken<RestApiArrayResultMenuSummary>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * [PRIVATE API]Get menus by appId (asynchronously)
     * 
     * @param appId Get Menus for this appId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMenusByAppIdAsync(String appId, final ApiCallback<RestApiArrayResultMenuSummary> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMenusByAppIdValidateBeforeCall(appId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiArrayResultMenuSummary>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getMenusCheckpoints
     * @param menuId Menu identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMenusCheckpointsCall(Integer menuId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/menus/{menuId}/checkpoints"
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMenusCheckpointsValidateBeforeCall(Integer menuId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling getMenusCheckpoints(Async)");
        }
        

        com.squareup.okhttp.Call call = getMenusCheckpointsCall(menuId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * [PRIVATE API]Get a Menus Checkpoints
     * 
     * @param menuId Menu identifier (required)
     * @return RestApiArrayResultMenuCheckpoint
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiArrayResultMenuCheckpoint getMenusCheckpoints(Integer menuId) throws ApiException {
        ApiResponse<RestApiArrayResultMenuCheckpoint> resp = getMenusCheckpointsWithHttpInfo(menuId);
        return resp.getData();
    }

    /**
     * [PRIVATE API]Get a Menus Checkpoints
     * 
     * @param menuId Menu identifier (required)
     * @return ApiResponse&lt;RestApiArrayResultMenuCheckpoint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiArrayResultMenuCheckpoint> getMenusCheckpointsWithHttpInfo(Integer menuId) throws ApiException {
        com.squareup.okhttp.Call call = getMenusCheckpointsValidateBeforeCall(menuId, null, null);
        Type localVarReturnType = new TypeToken<RestApiArrayResultMenuCheckpoint>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * [PRIVATE API]Get a Menus Checkpoints (asynchronously)
     * 
     * @param menuId Menu identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMenusCheckpointsAsync(Integer menuId, final ApiCallback<RestApiArrayResultMenuCheckpoint> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMenusCheckpointsValidateBeforeCall(menuId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiArrayResultMenuCheckpoint>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for menusDeleteTaxRate
     * @param menuId Menu identifier (required)
     * @param taxId Id of Menu Tax to be removed (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call menusDeleteTaxRateCall(Integer menuId, Integer taxId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/menus/{menuId}/tax/{taxId}"
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()))
            .replaceAll("\\{" + "taxId" + "\\}", apiClient.escapeString(taxId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call menusDeleteTaxRateValidateBeforeCall(Integer menuId, Integer taxId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling menusDeleteTaxRate(Async)");
        }
        
        // verify the required parameter 'taxId' is set
        if (taxId == null) {
            throw new ApiException("Missing the required parameter 'taxId' when calling menusDeleteTaxRate(Async)");
        }
        

        com.squareup.okhttp.Call call = menusDeleteTaxRateCall(menuId, taxId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * [PRIVATE API]Remove a Menus Tax Rate, can only remove a tax rate that does not have items/optionSetItems attached
     * 
     * @param menuId Menu identifier (required)
     * @param taxId Id of Menu Tax to be removed (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void menusDeleteTaxRate(Integer menuId, Integer taxId) throws ApiException {
        menusDeleteTaxRateWithHttpInfo(menuId, taxId);
    }

    /**
     * [PRIVATE API]Remove a Menus Tax Rate, can only remove a tax rate that does not have items/optionSetItems attached
     * 
     * @param menuId Menu identifier (required)
     * @param taxId Id of Menu Tax to be removed (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> menusDeleteTaxRateWithHttpInfo(Integer menuId, Integer taxId) throws ApiException {
        com.squareup.okhttp.Call call = menusDeleteTaxRateValidateBeforeCall(menuId, taxId, null, null);
        return apiClient.execute(call);
    }

    /**
     * [PRIVATE API]Remove a Menus Tax Rate, can only remove a tax rate that does not have items/optionSetItems attached (asynchronously)
     * 
     * @param menuId Menu identifier (required)
     * @param taxId Id of Menu Tax to be removed (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call menusDeleteTaxRateAsync(Integer menuId, Integer taxId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = menusDeleteTaxRateValidateBeforeCall(menuId, taxId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for menusGetMenuBulkShowHide
     * @param menuId  (required)
     * @param isAvailable  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call menusGetMenuBulkShowHideCall(Integer menuId, Boolean isAvailable, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/menus/{menuId}/bulkshowhide/list"
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (isAvailable != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("isAvailable", isAvailable));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call menusGetMenuBulkShowHideValidateBeforeCall(Integer menuId, Boolean isAvailable, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling menusGetMenuBulkShowHide(Async)");
        }
        
        // verify the required parameter 'isAvailable' is set
        if (isAvailable == null) {
            throw new ApiException("Missing the required parameter 'isAvailable' when calling menusGetMenuBulkShowHide(Async)");
        }
        

        com.squareup.okhttp.Call call = menusGetMenuBulkShowHideCall(menuId, isAvailable, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param menuId  (required)
     * @param isAvailable  (required)
     * @return RestApiArrayResultMenuElementListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiArrayResultMenuElementListResponse menusGetMenuBulkShowHide(Integer menuId, Boolean isAvailable) throws ApiException {
        ApiResponse<RestApiArrayResultMenuElementListResponse> resp = menusGetMenuBulkShowHideWithHttpInfo(menuId, isAvailable);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param menuId  (required)
     * @param isAvailable  (required)
     * @return ApiResponse&lt;RestApiArrayResultMenuElementListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiArrayResultMenuElementListResponse> menusGetMenuBulkShowHideWithHttpInfo(Integer menuId, Boolean isAvailable) throws ApiException {
        com.squareup.okhttp.Call call = menusGetMenuBulkShowHideValidateBeforeCall(menuId, isAvailable, null, null);
        Type localVarReturnType = new TypeToken<RestApiArrayResultMenuElementListResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param menuId  (required)
     * @param isAvailable  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call menusGetMenuBulkShowHideAsync(Integer menuId, Boolean isAvailable, final ApiCallback<RestApiArrayResultMenuElementListResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = menusGetMenuBulkShowHideValidateBeforeCall(menuId, isAvailable, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiArrayResultMenuElementListResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for menusSetDisplayOnMenuTax
     * @param menuId Menu identifier (required)
     * @param show Boolean show or dont show tax (Exclusive tax type can only ever be TRUE) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call menusSetDisplayOnMenuTaxCall(Integer menuId, Boolean show, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/menus/{menuId}/tax/show/{show}"
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()))
            .replaceAll("\\{" + "show" + "\\}", apiClient.escapeString(show.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call menusSetDisplayOnMenuTaxValidateBeforeCall(Integer menuId, Boolean show, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling menusSetDisplayOnMenuTax(Async)");
        }
        
        // verify the required parameter 'show' is set
        if (show == null) {
            throw new ApiException("Missing the required parameter 'show' when calling menusSetDisplayOnMenuTax(Async)");
        }
        

        com.squareup.okhttp.Call call = menusSetDisplayOnMenuTaxCall(menuId, show, progressListener, progressRequestListener);
        return call;

    }

    /**
     * [PRIVATE API]Set if tax shows for a Menu
     * 
     * @param menuId Menu identifier (required)
     * @param show Boolean show or dont show tax (Exclusive tax type can only ever be TRUE) (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void menusSetDisplayOnMenuTax(Integer menuId, Boolean show) throws ApiException {
        menusSetDisplayOnMenuTaxWithHttpInfo(menuId, show);
    }

    /**
     * [PRIVATE API]Set if tax shows for a Menu
     * 
     * @param menuId Menu identifier (required)
     * @param show Boolean show or dont show tax (Exclusive tax type can only ever be TRUE) (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> menusSetDisplayOnMenuTaxWithHttpInfo(Integer menuId, Boolean show) throws ApiException {
        com.squareup.okhttp.Call call = menusSetDisplayOnMenuTaxValidateBeforeCall(menuId, show, null, null);
        return apiClient.execute(call);
    }

    /**
     * [PRIVATE API]Set if tax shows for a Menu (asynchronously)
     * 
     * @param menuId Menu identifier (required)
     * @param show Boolean show or dont show tax (Exclusive tax type can only ever be TRUE) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call menusSetDisplayOnMenuTaxAsync(Integer menuId, Boolean show, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = menusSetDisplayOnMenuTaxValidateBeforeCall(menuId, show, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for menusSetItemDisplayOrders
     * @param menuId Menu identifier (required)
     * @param displayOrders Section Ids and their new display order (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call menusSetItemDisplayOrdersCall(Integer menuId, MenuObjectDisplayOrders displayOrders, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = displayOrders;

        // create path and map variables
        String localVarPath = "/api/v1.0/menus/{menuId}/sectiondisplayorders"
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call menusSetItemDisplayOrdersValidateBeforeCall(Integer menuId, MenuObjectDisplayOrders displayOrders, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling menusSetItemDisplayOrders(Async)");
        }
        
        // verify the required parameter 'displayOrders' is set
        if (displayOrders == null) {
            throw new ApiException("Missing the required parameter 'displayOrders' when calling menusSetItemDisplayOrders(Async)");
        }
        

        com.squareup.okhttp.Call call = menusSetItemDisplayOrdersCall(menuId, displayOrders, progressListener, progressRequestListener);
        return call;

    }

    /**
     * [PRIVATE API]Re-arrange Sections within a Menu
     * 
     * @param menuId Menu identifier (required)
     * @param displayOrders Section Ids and their new display order (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void menusSetItemDisplayOrders(Integer menuId, MenuObjectDisplayOrders displayOrders) throws ApiException {
        menusSetItemDisplayOrdersWithHttpInfo(menuId, displayOrders);
    }

    /**
     * [PRIVATE API]Re-arrange Sections within a Menu
     * 
     * @param menuId Menu identifier (required)
     * @param displayOrders Section Ids and their new display order (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> menusSetItemDisplayOrdersWithHttpInfo(Integer menuId, MenuObjectDisplayOrders displayOrders) throws ApiException {
        com.squareup.okhttp.Call call = menusSetItemDisplayOrdersValidateBeforeCall(menuId, displayOrders, null, null);
        return apiClient.execute(call);
    }

    /**
     * [PRIVATE API]Re-arrange Sections within a Menu (asynchronously)
     * 
     * @param menuId Menu identifier (required)
     * @param displayOrders Section Ids and their new display order (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call menusSetItemDisplayOrdersAsync(Integer menuId, MenuObjectDisplayOrders displayOrders, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = menusSetItemDisplayOrdersValidateBeforeCall(menuId, displayOrders, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for menusShowHideBulkItems
     * @param menuId  (required)
     * @param menuElements  (required)
     * @param isAvailable  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call menusShowHideBulkItemsCall(Integer menuId, List<MenuElementHide> menuElements, Boolean isAvailable, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = menuElements;

        // create path and map variables
        String localVarPath = "/api/v1.0/menus/{menuId}/bulkshowhide"
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (isAvailable != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("isAvailable", isAvailable));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call menusShowHideBulkItemsValidateBeforeCall(Integer menuId, List<MenuElementHide> menuElements, Boolean isAvailable, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling menusShowHideBulkItems(Async)");
        }
        
        // verify the required parameter 'menuElements' is set
        if (menuElements == null) {
            throw new ApiException("Missing the required parameter 'menuElements' when calling menusShowHideBulkItems(Async)");
        }
        
        // verify the required parameter 'isAvailable' is set
        if (isAvailable == null) {
            throw new ApiException("Missing the required parameter 'isAvailable' when calling menusShowHideBulkItems(Async)");
        }
        

        com.squareup.okhttp.Call call = menusShowHideBulkItemsCall(menuId, menuElements, isAvailable, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param menuId  (required)
     * @param menuElements  (required)
     * @param isAvailable  (required)
     * @return RestApiArrayResultMenuElementEditResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiArrayResultMenuElementEditResponse menusShowHideBulkItems(Integer menuId, List<MenuElementHide> menuElements, Boolean isAvailable) throws ApiException {
        ApiResponse<RestApiArrayResultMenuElementEditResponse> resp = menusShowHideBulkItemsWithHttpInfo(menuId, menuElements, isAvailable);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param menuId  (required)
     * @param menuElements  (required)
     * @param isAvailable  (required)
     * @return ApiResponse&lt;RestApiArrayResultMenuElementEditResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiArrayResultMenuElementEditResponse> menusShowHideBulkItemsWithHttpInfo(Integer menuId, List<MenuElementHide> menuElements, Boolean isAvailable) throws ApiException {
        com.squareup.okhttp.Call call = menusShowHideBulkItemsValidateBeforeCall(menuId, menuElements, isAvailable, null, null);
        Type localVarReturnType = new TypeToken<RestApiArrayResultMenuElementEditResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param menuId  (required)
     * @param menuElements  (required)
     * @param isAvailable  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call menusShowHideBulkItemsAsync(Integer menuId, List<MenuElementHide> menuElements, Boolean isAvailable, final ApiCallback<RestApiArrayResultMenuElementEditResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = menusShowHideBulkItemsValidateBeforeCall(menuId, menuElements, isAvailable, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiArrayResultMenuElementEditResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for menusUpdateTaxType
     * @param menuId Menu identifier (required)
     * @param type Type of Tax (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call menusUpdateTaxTypeCall(Integer menuId, String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/menus/{menuId}/tax/type/{type}"
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()))
            .replaceAll("\\{" + "type" + "\\}", apiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call menusUpdateTaxTypeValidateBeforeCall(Integer menuId, String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling menusUpdateTaxType(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling menusUpdateTaxType(Async)");
        }
        

        com.squareup.okhttp.Call call = menusUpdateTaxTypeCall(menuId, type, progressListener, progressRequestListener);
        return call;

    }

    /**
     * [PRIVATE API]Set the type of Tax on a Menu
     * 
     * @param menuId Menu identifier (required)
     * @param type Type of Tax (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void menusUpdateTaxType(Integer menuId, String type) throws ApiException {
        menusUpdateTaxTypeWithHttpInfo(menuId, type);
    }

    /**
     * [PRIVATE API]Set the type of Tax on a Menu
     * 
     * @param menuId Menu identifier (required)
     * @param type Type of Tax (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> menusUpdateTaxTypeWithHttpInfo(Integer menuId, String type) throws ApiException {
        com.squareup.okhttp.Call call = menusUpdateTaxTypeValidateBeforeCall(menuId, type, null, null);
        return apiClient.execute(call);
    }

    /**
     * [PRIVATE API]Set the type of Tax on a Menu (asynchronously)
     * 
     * @param menuId Menu identifier (required)
     * @param type Type of Tax (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call menusUpdateTaxTypeAsync(Integer menuId, String type, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = menusUpdateTaxTypeValidateBeforeCall(menuId, type, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for menusUpsertTaxRate
     * @param menuId Menu identifier (required)
     * @param taxRate Tax Rate to Add/Update (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call menusUpsertTaxRateCall(Integer menuId, MenuTaxRate taxRate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = taxRate;

        // create path and map variables
        String localVarPath = "/api/v1.0/menus/{menuId}/taxrate"
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call menusUpsertTaxRateValidateBeforeCall(Integer menuId, MenuTaxRate taxRate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling menusUpsertTaxRate(Async)");
        }
        
        // verify the required parameter 'taxRate' is set
        if (taxRate == null) {
            throw new ApiException("Missing the required parameter 'taxRate' when calling menusUpsertTaxRate(Async)");
        }
        

        com.squareup.okhttp.Call call = menusUpsertTaxRateCall(menuId, taxRate, progressListener, progressRequestListener);
        return call;

    }

    /**
     * [PRIVATE API]Add/Update a Tax Rate
     * 
     * @param menuId Menu identifier (required)
     * @param taxRate Tax Rate to Add/Update (required)
     * @return MenuTaxRate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MenuTaxRate menusUpsertTaxRate(Integer menuId, MenuTaxRate taxRate) throws ApiException {
        ApiResponse<MenuTaxRate> resp = menusUpsertTaxRateWithHttpInfo(menuId, taxRate);
        return resp.getData();
    }

    /**
     * [PRIVATE API]Add/Update a Tax Rate
     * 
     * @param menuId Menu identifier (required)
     * @param taxRate Tax Rate to Add/Update (required)
     * @return ApiResponse&lt;MenuTaxRate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MenuTaxRate> menusUpsertTaxRateWithHttpInfo(Integer menuId, MenuTaxRate taxRate) throws ApiException {
        com.squareup.okhttp.Call call = menusUpsertTaxRateValidateBeforeCall(menuId, taxRate, null, null);
        Type localVarReturnType = new TypeToken<MenuTaxRate>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * [PRIVATE API]Add/Update a Tax Rate (asynchronously)
     * 
     * @param menuId Menu identifier (required)
     * @param taxRate Tax Rate to Add/Update (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call menusUpsertTaxRateAsync(Integer menuId, MenuTaxRate taxRate, final ApiCallback<MenuTaxRate> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = menusUpsertTaxRateValidateBeforeCall(menuId, taxRate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MenuTaxRate>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for restoreAMenuCheckpoint
     * @param menuId Menu identifier (required)
     * @param checkpointId Checkpoint to restore menu to (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call restoreAMenuCheckpointCall(Integer menuId, Integer checkpointId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/menus/{menuId}/checkpoints/{checkpointId}/restore"
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()))
            .replaceAll("\\{" + "checkpointId" + "\\}", apiClient.escapeString(checkpointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restoreAMenuCheckpointValidateBeforeCall(Integer menuId, Integer checkpointId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling restoreAMenuCheckpoint(Async)");
        }
        
        // verify the required parameter 'checkpointId' is set
        if (checkpointId == null) {
            throw new ApiException("Missing the required parameter 'checkpointId' when calling restoreAMenuCheckpoint(Async)");
        }
        

        com.squareup.okhttp.Call call = restoreAMenuCheckpointCall(menuId, checkpointId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * [PRIVATE API]Restore a Menu to a checkpoint
     * 
     * @param menuId Menu identifier (required)
     * @param checkpointId Checkpoint to restore menu to (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void restoreAMenuCheckpoint(Integer menuId, Integer checkpointId) throws ApiException {
        restoreAMenuCheckpointWithHttpInfo(menuId, checkpointId);
    }

    /**
     * [PRIVATE API]Restore a Menu to a checkpoint
     * 
     * @param menuId Menu identifier (required)
     * @param checkpointId Checkpoint to restore menu to (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> restoreAMenuCheckpointWithHttpInfo(Integer menuId, Integer checkpointId) throws ApiException {
        com.squareup.okhttp.Call call = restoreAMenuCheckpointValidateBeforeCall(menuId, checkpointId, null, null);
        return apiClient.execute(call);
    }

    /**
     * [PRIVATE API]Restore a Menu to a checkpoint (asynchronously)
     * 
     * @param menuId Menu identifier (required)
     * @param checkpointId Checkpoint to restore menu to (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restoreAMenuCheckpointAsync(Integer menuId, Integer checkpointId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restoreAMenuCheckpointValidateBeforeCall(menuId, checkpointId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for setMenuItemMetadata
     * @param menuId Menu identifier (required)
     * @param storeId Store identifier (required)
     * @param menuItemId Menu item identifier (required)
     * @param metadata Metadata object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setMenuItemMetadataCall(Integer menuId, Integer storeId, Integer menuItemId, Metadata metadata, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = metadata;

        // create path and map variables
        String localVarPath = "/api/v1.0/menus/{menuId}/menuitem/{menuItemId}/metadata/store/{storeId}"
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()))
            .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()))
            .replaceAll("\\{" + "menuItemId" + "\\}", apiClient.escapeString(menuItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setMenuItemMetadataValidateBeforeCall(Integer menuId, Integer storeId, Integer menuItemId, Metadata metadata, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling setMenuItemMetadata(Async)");
        }
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling setMenuItemMetadata(Async)");
        }
        
        // verify the required parameter 'menuItemId' is set
        if (menuItemId == null) {
            throw new ApiException("Missing the required parameter 'menuItemId' when calling setMenuItemMetadata(Async)");
        }
        
        // verify the required parameter 'metadata' is set
        if (metadata == null) {
            throw new ApiException("Missing the required parameter 'metadata' when calling setMenuItemMetadata(Async)");
        }
        

        com.squareup.okhttp.Call call = setMenuItemMetadataCall(menuId, storeId, menuItemId, metadata, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update menu item metadata
     * 
     * @param menuId Menu identifier (required)
     * @param storeId Store identifier (required)
     * @param menuItemId Menu item identifier (required)
     * @param metadata Metadata object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void setMenuItemMetadata(Integer menuId, Integer storeId, Integer menuItemId, Metadata metadata) throws ApiException {
        setMenuItemMetadataWithHttpInfo(menuId, storeId, menuItemId, metadata);
    }

    /**
     * Update menu item metadata
     * 
     * @param menuId Menu identifier (required)
     * @param storeId Store identifier (required)
     * @param menuItemId Menu item identifier (required)
     * @param metadata Metadata object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> setMenuItemMetadataWithHttpInfo(Integer menuId, Integer storeId, Integer menuItemId, Metadata metadata) throws ApiException {
        com.squareup.okhttp.Call call = setMenuItemMetadataValidateBeforeCall(menuId, storeId, menuItemId, metadata, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update menu item metadata (asynchronously)
     * 
     * @param menuId Menu identifier (required)
     * @param storeId Store identifier (required)
     * @param menuItemId Menu item identifier (required)
     * @param metadata Metadata object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setMenuItemMetadataAsync(Integer menuId, Integer storeId, Integer menuItemId, Metadata metadata, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setMenuItemMetadataValidateBeforeCall(menuId, storeId, menuItemId, metadata, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for setMenuItemOptionSetItemMetadata
     * @param menuId Menu identifier (required)
     * @param storeId Store identifier (required)
     * @param optionSetItemId Menu item option set item identifier (required)
     * @param metadata Metadata object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setMenuItemOptionSetItemMetadataCall(Integer menuId, Integer storeId, Integer optionSetItemId, Metadata metadata, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = metadata;

        // create path and map variables
        String localVarPath = "/api/v1.0/menus/{menuId}/optionsetitem/{optionSetItemId}/metadata/store/{storeId}"
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()))
            .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()))
            .replaceAll("\\{" + "optionSetItemId" + "\\}", apiClient.escapeString(optionSetItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setMenuItemOptionSetItemMetadataValidateBeforeCall(Integer menuId, Integer storeId, Integer optionSetItemId, Metadata metadata, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling setMenuItemOptionSetItemMetadata(Async)");
        }
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling setMenuItemOptionSetItemMetadata(Async)");
        }
        
        // verify the required parameter 'optionSetItemId' is set
        if (optionSetItemId == null) {
            throw new ApiException("Missing the required parameter 'optionSetItemId' when calling setMenuItemOptionSetItemMetadata(Async)");
        }
        
        // verify the required parameter 'metadata' is set
        if (metadata == null) {
            throw new ApiException("Missing the required parameter 'metadata' when calling setMenuItemOptionSetItemMetadata(Async)");
        }
        

        com.squareup.okhttp.Call call = setMenuItemOptionSetItemMetadataCall(menuId, storeId, optionSetItemId, metadata, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update menu item option set item metadata
     * 
     * @param menuId Menu identifier (required)
     * @param storeId Store identifier (required)
     * @param optionSetItemId Menu item option set item identifier (required)
     * @param metadata Metadata object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void setMenuItemOptionSetItemMetadata(Integer menuId, Integer storeId, Integer optionSetItemId, Metadata metadata) throws ApiException {
        setMenuItemOptionSetItemMetadataWithHttpInfo(menuId, storeId, optionSetItemId, metadata);
    }

    /**
     * Update menu item option set item metadata
     * 
     * @param menuId Menu identifier (required)
     * @param storeId Store identifier (required)
     * @param optionSetItemId Menu item option set item identifier (required)
     * @param metadata Metadata object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> setMenuItemOptionSetItemMetadataWithHttpInfo(Integer menuId, Integer storeId, Integer optionSetItemId, Metadata metadata) throws ApiException {
        com.squareup.okhttp.Call call = setMenuItemOptionSetItemMetadataValidateBeforeCall(menuId, storeId, optionSetItemId, metadata, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update menu item option set item metadata (asynchronously)
     * 
     * @param menuId Menu identifier (required)
     * @param storeId Store identifier (required)
     * @param optionSetItemId Menu item option set item identifier (required)
     * @param metadata Metadata object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setMenuItemOptionSetItemMetadataAsync(Integer menuId, Integer storeId, Integer optionSetItemId, Metadata metadata, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setMenuItemOptionSetItemMetadataValidateBeforeCall(menuId, storeId, optionSetItemId, metadata, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for setMenuLock
     * @param menuId Menu identifier (required)
     * @param locked True: Locks menu for editing, False: Unlocks for editing (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setMenuLockCall(Integer menuId, Boolean locked, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = locked;

        // create path and map variables
        String localVarPath = "/api/v1.0/menus/{menuId}/lock"
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setMenuLockValidateBeforeCall(Integer menuId, Boolean locked, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling setMenuLock(Async)");
        }
        
        // verify the required parameter 'locked' is set
        if (locked == null) {
            throw new ApiException("Missing the required parameter 'locked' when calling setMenuLock(Async)");
        }
        

        com.squareup.okhttp.Call call = setMenuLockCall(menuId, locked, progressListener, progressRequestListener);
        return call;

    }

    /**
     * [PRIVATE API]Lock/Unlock a Menu for Editing
     * 
     * @param menuId Menu identifier (required)
     * @param locked True: Locks menu for editing, False: Unlocks for editing (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void setMenuLock(Integer menuId, Boolean locked) throws ApiException {
        setMenuLockWithHttpInfo(menuId, locked);
    }

    /**
     * [PRIVATE API]Lock/Unlock a Menu for Editing
     * 
     * @param menuId Menu identifier (required)
     * @param locked True: Locks menu for editing, False: Unlocks for editing (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> setMenuLockWithHttpInfo(Integer menuId, Boolean locked) throws ApiException {
        com.squareup.okhttp.Call call = setMenuLockValidateBeforeCall(menuId, locked, null, null);
        return apiClient.execute(call);
    }

    /**
     * [PRIVATE API]Lock/Unlock a Menu for Editing (asynchronously)
     * 
     * @param menuId Menu identifier (required)
     * @param locked True: Locks menu for editing, False: Unlocks for editing (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setMenuLockAsync(Integer menuId, Boolean locked, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setMenuLockValidateBeforeCall(menuId, locked, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for setMenuName
     * @param menuId Menu identifier (required)
     * @param name Name to set for this Menu (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setMenuNameCall(Integer menuId, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = name;

        // create path and map variables
        String localVarPath = "/api/v1.0/menus/{menuId}/name"
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setMenuNameValidateBeforeCall(Integer menuId, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling setMenuName(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling setMenuName(Async)");
        }
        

        com.squareup.okhttp.Call call = setMenuNameCall(menuId, name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * [PRIVATE API]Set Menus Name
     * 
     * @param menuId Menu identifier (required)
     * @param name Name to set for this Menu (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void setMenuName(Integer menuId, String name) throws ApiException {
        setMenuNameWithHttpInfo(menuId, name);
    }

    /**
     * [PRIVATE API]Set Menus Name
     * 
     * @param menuId Menu identifier (required)
     * @param name Name to set for this Menu (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> setMenuNameWithHttpInfo(Integer menuId, String name) throws ApiException {
        com.squareup.okhttp.Call call = setMenuNameValidateBeforeCall(menuId, name, null, null);
        return apiClient.execute(call);
    }

    /**
     * [PRIVATE API]Set Menus Name (asynchronously)
     * 
     * @param menuId Menu identifier (required)
     * @param name Name to set for this Menu (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setMenuNameAsync(Integer menuId, String name, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setMenuNameValidateBeforeCall(menuId, name, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateMenu
     * @param menuId Menu identifier (required)
     * @param menu Menu (delta) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateMenuCall(Integer menuId, MenuBase menu, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = menu;

        // create path and map variables
        String localVarPath = "/api/v1.0/menus/{menuId}"
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateMenuValidateBeforeCall(Integer menuId, MenuBase menu, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling updateMenu(Async)");
        }
        
        // verify the required parameter 'menu' is set
        if (menu == null) {
            throw new ApiException("Missing the required parameter 'menu' when calling updateMenu(Async)");
        }
        

        com.squareup.okhttp.Call call = updateMenuCall(menuId, menu, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update menu
     * 
     * @param menuId Menu identifier (required)
     * @param menu Menu (delta) (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateMenu(Integer menuId, MenuBase menu) throws ApiException {
        updateMenuWithHttpInfo(menuId, menu);
    }

    /**
     * Update menu
     * 
     * @param menuId Menu identifier (required)
     * @param menu Menu (delta) (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateMenuWithHttpInfo(Integer menuId, MenuBase menu) throws ApiException {
        com.squareup.okhttp.Call call = updateMenuValidateBeforeCall(menuId, menu, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update menu (asynchronously)
     * 
     * @param menuId Menu identifier (required)
     * @param menu Menu (delta) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateMenuAsync(Integer menuId, MenuBase menu, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateMenuValidateBeforeCall(menuId, menu, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for uploadMenuImage
     * @param menuId Menu identifier (required)
     * @param image Menu image (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call uploadMenuImageCall(Integer menuId, File image, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/menus/{menuId}/image"
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (image != null)
        localVarFormParams.put("Image", image);

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call uploadMenuImageValidateBeforeCall(Integer menuId, File image, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling uploadMenuImage(Async)");
        }
        
        // verify the required parameter 'image' is set
        if (image == null) {
            throw new ApiException("Missing the required parameter 'image' when calling uploadMenuImage(Async)");
        }
        

        com.squareup.okhttp.Call call = uploadMenuImageCall(menuId, image, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Upload menu image
     * 
     * @param menuId Menu identifier (required)
     * @param image Menu image (required)
     * @return RestApiStringResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiStringResult uploadMenuImage(Integer menuId, File image) throws ApiException {
        ApiResponse<RestApiStringResult> resp = uploadMenuImageWithHttpInfo(menuId, image);
        return resp.getData();
    }

    /**
     * Upload menu image
     * 
     * @param menuId Menu identifier (required)
     * @param image Menu image (required)
     * @return ApiResponse&lt;RestApiStringResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiStringResult> uploadMenuImageWithHttpInfo(Integer menuId, File image) throws ApiException {
        com.squareup.okhttp.Call call = uploadMenuImageValidateBeforeCall(menuId, image, null, null);
        Type localVarReturnType = new TypeToken<RestApiStringResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Upload menu image (asynchronously)
     * 
     * @param menuId Menu identifier (required)
     * @param image Menu image (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call uploadMenuImageAsync(Integer menuId, File image, final ApiCallback<RestApiStringResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = uploadMenuImageValidateBeforeCall(menuId, image, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiStringResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for uploadNewMenuForApp
     * @param appId App identifier (required)
     * @param menu Uploaded xlsx menu (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call uploadNewMenuForAppCall(String appId, File menu, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/menus/xlsx"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (menu != null)
        localVarFormParams.put("Menu", menu);

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call uploadNewMenuForAppValidateBeforeCall(String appId, File menu, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling uploadNewMenuForApp(Async)");
        }
        
        // verify the required parameter 'menu' is set
        if (menu == null) {
            throw new ApiException("Missing the required parameter 'menu' when calling uploadNewMenuForApp(Async)");
        }
        

        com.squareup.okhttp.Call call = uploadNewMenuForAppCall(appId, menu, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a new menu from xlsx file.
     * 
     * @param appId App identifier (required)
     * @param menu Uploaded xlsx menu (required)
     * @return Integer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Integer uploadNewMenuForApp(String appId, File menu) throws ApiException {
        ApiResponse<Integer> resp = uploadNewMenuForAppWithHttpInfo(appId, menu);
        return resp.getData();
    }

    /**
     * Create a new menu from xlsx file.
     * 
     * @param appId App identifier (required)
     * @param menu Uploaded xlsx menu (required)
     * @return ApiResponse&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Integer> uploadNewMenuForAppWithHttpInfo(String appId, File menu) throws ApiException {
        com.squareup.okhttp.Call call = uploadNewMenuForAppValidateBeforeCall(appId, menu, null, null);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new menu from xlsx file. (asynchronously)
     * 
     * @param appId App identifier (required)
     * @param menu Uploaded xlsx menu (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call uploadNewMenuForAppAsync(String appId, File menu, final ApiCallback<Integer> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = uploadNewMenuForAppValidateBeforeCall(appId, menu, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
