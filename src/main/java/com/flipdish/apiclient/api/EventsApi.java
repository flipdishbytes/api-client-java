/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.flipdish.apiclient.api;

import com.flipdish.apiclient.ApiCallback;
import com.flipdish.apiclient.ApiClient;
import com.flipdish.apiclient.ApiException;
import com.flipdish.apiclient.ApiResponse;
import com.flipdish.apiclient.Configuration;
import com.flipdish.apiclient.Pair;
import com.flipdish.apiclient.ProgressRequestBody;
import com.flipdish.apiclient.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.flipdish.apiclient.model.EventSearchResult;
import org.threeten.bp.OffsetDateTime;
import com.flipdish.apiclient.model.RestApiErrorResult;
import com.flipdish.apiclient.model.RestApiEventSearchPaginationResult;
import com.flipdish.apiclient.model.RestApiForbiddenResult;
import com.flipdish.apiclient.model.RestApiUnauthorizedResult;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EventsApi {
    private ApiClient apiClient;

    public EventsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EventsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getCustomerEvents
     * @param appId  (required)
     * @param customerId  (required)
     * @param limit The maximum elements to return (optional)
     * @param page The index of the page to return, starting by 1 (optional)
     * @param start Start date (optional)
     * @param end End date (optional)
     * @param orderId Events that have Order Id (optional)
     * @param storeId Events that have Store Id (optional)
     * @param storeIdList Events that have Store Id List (optional)
     * @param storeGroupId Events that have Store Group Id (optional)
     * @param userId Events that have User Id (optional)
     * @param menuId Events that have Menu Id (optional)
     * @param campaignId Events that have Campaign Id (optional)
     * @param userEmail Events that have User Email (optional)
     * @param userName Events that have User Name (optional)
     * @param voucherCode Events that have voucher code (optional)
     * @param eventType Events that have event type\\s (optional)
     * @param flipdishEventId Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCustomerEventsCall(String appId, Integer customerId, Integer limit, Integer page, OffsetDateTime start, OffsetDateTime end, Integer orderId, Integer storeId, List<Integer> storeIdList, Integer storeGroupId, Integer userId, Integer menuId, Integer campaignId, String userEmail, String userName, String voucherCode, List<String> eventType, String flipdishEventId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/events/customer/{customerId}"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "customerId" + "\\}", apiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start", start));
        if (end != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end", end));
        if (orderId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orderId", orderId));
        if (storeId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storeId", storeId));
        if (storeIdList != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "storeIdList", storeIdList));
        if (storeGroupId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storeGroupId", storeGroupId));
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userId", userId));
        if (menuId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("menuId", menuId));
        if (campaignId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("campaignId", campaignId));
        if (userEmail != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userEmail", userEmail));
        if (userName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userName", userName));
        if (voucherCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("voucherCode", voucherCode));
        if (eventType != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "eventType", eventType));
        if (flipdishEventId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("flipdishEventId", flipdishEventId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCustomerEventsValidateBeforeCall(String appId, Integer customerId, Integer limit, Integer page, OffsetDateTime start, OffsetDateTime end, Integer orderId, Integer storeId, List<Integer> storeIdList, Integer storeGroupId, Integer userId, Integer menuId, Integer campaignId, String userEmail, String userName, String voucherCode, List<String> eventType, String flipdishEventId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getCustomerEvents(Async)");
        }
        
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling getCustomerEvents(Async)");
        }
        

        com.squareup.okhttp.Call call = getCustomerEventsCall(appId, customerId, limit, page, start, end, orderId, storeId, storeIdList, storeGroupId, userId, menuId, campaignId, userEmail, userName, voucherCode, eventType, flipdishEventId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param customerId  (required)
     * @param limit The maximum elements to return (optional)
     * @param page The index of the page to return, starting by 1 (optional)
     * @param start Start date (optional)
     * @param end End date (optional)
     * @param orderId Events that have Order Id (optional)
     * @param storeId Events that have Store Id (optional)
     * @param storeIdList Events that have Store Id List (optional)
     * @param storeGroupId Events that have Store Group Id (optional)
     * @param userId Events that have User Id (optional)
     * @param menuId Events that have Menu Id (optional)
     * @param campaignId Events that have Campaign Id (optional)
     * @param userEmail Events that have User Email (optional)
     * @param userName Events that have User Name (optional)
     * @param voucherCode Events that have voucher code (optional)
     * @param eventType Events that have event type\\s (optional)
     * @param flipdishEventId Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     * @return RestApiEventSearchPaginationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiEventSearchPaginationResult getCustomerEvents(String appId, Integer customerId, Integer limit, Integer page, OffsetDateTime start, OffsetDateTime end, Integer orderId, Integer storeId, List<Integer> storeIdList, Integer storeGroupId, Integer userId, Integer menuId, Integer campaignId, String userEmail, String userName, String voucherCode, List<String> eventType, String flipdishEventId) throws ApiException {
        ApiResponse<RestApiEventSearchPaginationResult> resp = getCustomerEventsWithHttpInfo(appId, customerId, limit, page, start, end, orderId, storeId, storeIdList, storeGroupId, userId, menuId, campaignId, userEmail, userName, voucherCode, eventType, flipdishEventId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param customerId  (required)
     * @param limit The maximum elements to return (optional)
     * @param page The index of the page to return, starting by 1 (optional)
     * @param start Start date (optional)
     * @param end End date (optional)
     * @param orderId Events that have Order Id (optional)
     * @param storeId Events that have Store Id (optional)
     * @param storeIdList Events that have Store Id List (optional)
     * @param storeGroupId Events that have Store Group Id (optional)
     * @param userId Events that have User Id (optional)
     * @param menuId Events that have Menu Id (optional)
     * @param campaignId Events that have Campaign Id (optional)
     * @param userEmail Events that have User Email (optional)
     * @param userName Events that have User Name (optional)
     * @param voucherCode Events that have voucher code (optional)
     * @param eventType Events that have event type\\s (optional)
     * @param flipdishEventId Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     * @return ApiResponse&lt;RestApiEventSearchPaginationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiEventSearchPaginationResult> getCustomerEventsWithHttpInfo(String appId, Integer customerId, Integer limit, Integer page, OffsetDateTime start, OffsetDateTime end, Integer orderId, Integer storeId, List<Integer> storeIdList, Integer storeGroupId, Integer userId, Integer menuId, Integer campaignId, String userEmail, String userName, String voucherCode, List<String> eventType, String flipdishEventId) throws ApiException {
        com.squareup.okhttp.Call call = getCustomerEventsValidateBeforeCall(appId, customerId, limit, page, start, end, orderId, storeId, storeIdList, storeGroupId, userId, menuId, campaignId, userEmail, userName, voucherCode, eventType, flipdishEventId, null, null);
        Type localVarReturnType = new TypeToken<RestApiEventSearchPaginationResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param customerId  (required)
     * @param limit The maximum elements to return (optional)
     * @param page The index of the page to return, starting by 1 (optional)
     * @param start Start date (optional)
     * @param end End date (optional)
     * @param orderId Events that have Order Id (optional)
     * @param storeId Events that have Store Id (optional)
     * @param storeIdList Events that have Store Id List (optional)
     * @param storeGroupId Events that have Store Group Id (optional)
     * @param userId Events that have User Id (optional)
     * @param menuId Events that have Menu Id (optional)
     * @param campaignId Events that have Campaign Id (optional)
     * @param userEmail Events that have User Email (optional)
     * @param userName Events that have User Name (optional)
     * @param voucherCode Events that have voucher code (optional)
     * @param eventType Events that have event type\\s (optional)
     * @param flipdishEventId Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCustomerEventsAsync(String appId, Integer customerId, Integer limit, Integer page, OffsetDateTime start, OffsetDateTime end, Integer orderId, Integer storeId, List<Integer> storeIdList, Integer storeGroupId, Integer userId, Integer menuId, Integer campaignId, String userEmail, String userName, String voucherCode, List<String> eventType, String flipdishEventId, final ApiCallback<RestApiEventSearchPaginationResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCustomerEventsValidateBeforeCall(appId, customerId, limit, page, start, end, orderId, storeId, storeIdList, storeGroupId, userId, menuId, campaignId, userEmail, userName, voucherCode, eventType, flipdishEventId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiEventSearchPaginationResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEvents
     * @param appId  (required)
     * @param whiteLabelId  (optional)
     * @param customerId  (optional)
     * @param limit The maximum elements to return (optional)
     * @param page The index of the page to return, starting by 1 (optional)
     * @param start Start date (optional)
     * @param end End date (optional)
     * @param orderId Events that have Order Id (optional)
     * @param storeId Events that have Store Id (optional)
     * @param storeIdList Events that have Store Id List (optional)
     * @param storeGroupId Events that have Store Group Id (optional)
     * @param userId Events that have User Id (optional)
     * @param menuId Events that have Menu Id (optional)
     * @param campaignId Events that have Campaign Id (optional)
     * @param userEmail Events that have User Email (optional)
     * @param userName Events that have User Name (optional)
     * @param voucherCode Events that have voucher code (optional)
     * @param eventType Events that have event type\\s (optional)
     * @param flipdishEventId Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEventsCall(String appId, Integer whiteLabelId, Integer customerId, Integer limit, Integer page, OffsetDateTime start, OffsetDateTime end, Integer orderId, Integer storeId, List<Integer> storeIdList, Integer storeGroupId, Integer userId, Integer menuId, Integer campaignId, String userEmail, String userName, String voucherCode, List<String> eventType, String flipdishEventId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/events"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (whiteLabelId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("whiteLabelId", whiteLabelId));
        if (customerId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("customerId", customerId));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start", start));
        if (end != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end", end));
        if (orderId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orderId", orderId));
        if (storeId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storeId", storeId));
        if (storeIdList != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "storeIdList", storeIdList));
        if (storeGroupId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storeGroupId", storeGroupId));
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userId", userId));
        if (menuId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("menuId", menuId));
        if (campaignId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("campaignId", campaignId));
        if (userEmail != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userEmail", userEmail));
        if (userName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userName", userName));
        if (voucherCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("voucherCode", voucherCode));
        if (eventType != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "eventType", eventType));
        if (flipdishEventId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("flipdishEventId", flipdishEventId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEventsValidateBeforeCall(String appId, Integer whiteLabelId, Integer customerId, Integer limit, Integer page, OffsetDateTime start, OffsetDateTime end, Integer orderId, Integer storeId, List<Integer> storeIdList, Integer storeGroupId, Integer userId, Integer menuId, Integer campaignId, String userEmail, String userName, String voucherCode, List<String> eventType, String flipdishEventId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getEvents(Async)");
        }
        

        com.squareup.okhttp.Call call = getEventsCall(appId, whiteLabelId, customerId, limit, page, start, end, orderId, storeId, storeIdList, storeGroupId, userId, menuId, campaignId, userEmail, userName, voucherCode, eventType, flipdishEventId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param whiteLabelId  (optional)
     * @param customerId  (optional)
     * @param limit The maximum elements to return (optional)
     * @param page The index of the page to return, starting by 1 (optional)
     * @param start Start date (optional)
     * @param end End date (optional)
     * @param orderId Events that have Order Id (optional)
     * @param storeId Events that have Store Id (optional)
     * @param storeIdList Events that have Store Id List (optional)
     * @param storeGroupId Events that have Store Group Id (optional)
     * @param userId Events that have User Id (optional)
     * @param menuId Events that have Menu Id (optional)
     * @param campaignId Events that have Campaign Id (optional)
     * @param userEmail Events that have User Email (optional)
     * @param userName Events that have User Name (optional)
     * @param voucherCode Events that have voucher code (optional)
     * @param eventType Events that have event type\\s (optional)
     * @param flipdishEventId Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     * @return RestApiEventSearchPaginationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiEventSearchPaginationResult getEvents(String appId, Integer whiteLabelId, Integer customerId, Integer limit, Integer page, OffsetDateTime start, OffsetDateTime end, Integer orderId, Integer storeId, List<Integer> storeIdList, Integer storeGroupId, Integer userId, Integer menuId, Integer campaignId, String userEmail, String userName, String voucherCode, List<String> eventType, String flipdishEventId) throws ApiException {
        ApiResponse<RestApiEventSearchPaginationResult> resp = getEventsWithHttpInfo(appId, whiteLabelId, customerId, limit, page, start, end, orderId, storeId, storeIdList, storeGroupId, userId, menuId, campaignId, userEmail, userName, voucherCode, eventType, flipdishEventId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param whiteLabelId  (optional)
     * @param customerId  (optional)
     * @param limit The maximum elements to return (optional)
     * @param page The index of the page to return, starting by 1 (optional)
     * @param start Start date (optional)
     * @param end End date (optional)
     * @param orderId Events that have Order Id (optional)
     * @param storeId Events that have Store Id (optional)
     * @param storeIdList Events that have Store Id List (optional)
     * @param storeGroupId Events that have Store Group Id (optional)
     * @param userId Events that have User Id (optional)
     * @param menuId Events that have Menu Id (optional)
     * @param campaignId Events that have Campaign Id (optional)
     * @param userEmail Events that have User Email (optional)
     * @param userName Events that have User Name (optional)
     * @param voucherCode Events that have voucher code (optional)
     * @param eventType Events that have event type\\s (optional)
     * @param flipdishEventId Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     * @return ApiResponse&lt;RestApiEventSearchPaginationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiEventSearchPaginationResult> getEventsWithHttpInfo(String appId, Integer whiteLabelId, Integer customerId, Integer limit, Integer page, OffsetDateTime start, OffsetDateTime end, Integer orderId, Integer storeId, List<Integer> storeIdList, Integer storeGroupId, Integer userId, Integer menuId, Integer campaignId, String userEmail, String userName, String voucherCode, List<String> eventType, String flipdishEventId) throws ApiException {
        com.squareup.okhttp.Call call = getEventsValidateBeforeCall(appId, whiteLabelId, customerId, limit, page, start, end, orderId, storeId, storeIdList, storeGroupId, userId, menuId, campaignId, userEmail, userName, voucherCode, eventType, flipdishEventId, null, null);
        Type localVarReturnType = new TypeToken<RestApiEventSearchPaginationResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param whiteLabelId  (optional)
     * @param customerId  (optional)
     * @param limit The maximum elements to return (optional)
     * @param page The index of the page to return, starting by 1 (optional)
     * @param start Start date (optional)
     * @param end End date (optional)
     * @param orderId Events that have Order Id (optional)
     * @param storeId Events that have Store Id (optional)
     * @param storeIdList Events that have Store Id List (optional)
     * @param storeGroupId Events that have Store Group Id (optional)
     * @param userId Events that have User Id (optional)
     * @param menuId Events that have Menu Id (optional)
     * @param campaignId Events that have Campaign Id (optional)
     * @param userEmail Events that have User Email (optional)
     * @param userName Events that have User Name (optional)
     * @param voucherCode Events that have voucher code (optional)
     * @param eventType Events that have event type\\s (optional)
     * @param flipdishEventId Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEventsAsync(String appId, Integer whiteLabelId, Integer customerId, Integer limit, Integer page, OffsetDateTime start, OffsetDateTime end, Integer orderId, Integer storeId, List<Integer> storeIdList, Integer storeGroupId, Integer userId, Integer menuId, Integer campaignId, String userEmail, String userName, String voucherCode, List<String> eventType, String flipdishEventId, final ApiCallback<RestApiEventSearchPaginationResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEventsValidateBeforeCall(appId, whiteLabelId, customerId, limit, page, start, end, orderId, storeId, storeIdList, storeGroupId, userId, menuId, campaignId, userEmail, userName, voucherCode, eventType, flipdishEventId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiEventSearchPaginationResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEventsById
     * @param eventId  (required)
     * @param appId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEventsByIdCall(UUID eventId, String appId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/events/{eventId}"
            .replaceAll("\\{" + "eventId" + "\\}", apiClient.escapeString(eventId.toString()))
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEventsByIdValidateBeforeCall(UUID eventId, String appId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling getEventsById(Async)");
        }
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getEventsById(Async)");
        }
        

        com.squareup.okhttp.Call call = getEventsByIdCall(eventId, appId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param eventId  (required)
     * @param appId  (required)
     * @return EventSearchResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EventSearchResult getEventsById(UUID eventId, String appId) throws ApiException {
        ApiResponse<EventSearchResult> resp = getEventsByIdWithHttpInfo(eventId, appId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param eventId  (required)
     * @param appId  (required)
     * @return ApiResponse&lt;EventSearchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EventSearchResult> getEventsByIdWithHttpInfo(UUID eventId, String appId) throws ApiException {
        com.squareup.okhttp.Call call = getEventsByIdValidateBeforeCall(eventId, appId, null, null);
        Type localVarReturnType = new TypeToken<EventSearchResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param eventId  (required)
     * @param appId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEventsByIdAsync(UUID eventId, String appId, final ApiCallback<EventSearchResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEventsByIdValidateBeforeCall(eventId, appId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EventSearchResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getMenuEvents
     * @param appId  (required)
     * @param menuId  (required)
     * @param limit The maximum elements to return (optional)
     * @param page The index of the page to return, starting by 1 (optional)
     * @param start Start date (optional)
     * @param end End date (optional)
     * @param orderId Events that have Order Id (optional)
     * @param storeId Events that have Store Id (optional)
     * @param storeIdList Events that have Store Id List (optional)
     * @param storeGroupId Events that have Store Group Id (optional)
     * @param userId Events that have User Id (optional)
     * @param menuId2 Events that have Menu Id (optional)
     * @param campaignId Events that have Campaign Id (optional)
     * @param userEmail Events that have User Email (optional)
     * @param userName Events that have User Name (optional)
     * @param voucherCode Events that have voucher code (optional)
     * @param eventType Events that have event type\\s (optional)
     * @param flipdishEventId Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMenuEventsCall(String appId, Integer menuId, Integer limit, Integer page, OffsetDateTime start, OffsetDateTime end, Integer orderId, Integer storeId, List<Integer> storeIdList, Integer storeGroupId, Integer userId, Integer menuId2, Integer campaignId, String userEmail, String userName, String voucherCode, List<String> eventType, String flipdishEventId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/events/menu/{menuId}"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start", start));
        if (end != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end", end));
        if (orderId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orderId", orderId));
        if (storeId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storeId", storeId));
        if (storeIdList != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "storeIdList", storeIdList));
        if (storeGroupId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storeGroupId", storeGroupId));
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userId", userId));
        if (menuId2 != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("menuId", menuId2));
        if (campaignId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("campaignId", campaignId));
        if (userEmail != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userEmail", userEmail));
        if (userName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userName", userName));
        if (voucherCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("voucherCode", voucherCode));
        if (eventType != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "eventType", eventType));
        if (flipdishEventId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("flipdishEventId", flipdishEventId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMenuEventsValidateBeforeCall(String appId, Integer menuId, Integer limit, Integer page, OffsetDateTime start, OffsetDateTime end, Integer orderId, Integer storeId, List<Integer> storeIdList, Integer storeGroupId, Integer userId, Integer menuId2, Integer campaignId, String userEmail, String userName, String voucherCode, List<String> eventType, String flipdishEventId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getMenuEvents(Async)");
        }
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling getMenuEvents(Async)");
        }
        

        com.squareup.okhttp.Call call = getMenuEventsCall(appId, menuId, limit, page, start, end, orderId, storeId, storeIdList, storeGroupId, userId, menuId2, campaignId, userEmail, userName, voucherCode, eventType, flipdishEventId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param menuId  (required)
     * @param limit The maximum elements to return (optional)
     * @param page The index of the page to return, starting by 1 (optional)
     * @param start Start date (optional)
     * @param end End date (optional)
     * @param orderId Events that have Order Id (optional)
     * @param storeId Events that have Store Id (optional)
     * @param storeIdList Events that have Store Id List (optional)
     * @param storeGroupId Events that have Store Group Id (optional)
     * @param userId Events that have User Id (optional)
     * @param menuId2 Events that have Menu Id (optional)
     * @param campaignId Events that have Campaign Id (optional)
     * @param userEmail Events that have User Email (optional)
     * @param userName Events that have User Name (optional)
     * @param voucherCode Events that have voucher code (optional)
     * @param eventType Events that have event type\\s (optional)
     * @param flipdishEventId Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     * @return RestApiEventSearchPaginationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiEventSearchPaginationResult getMenuEvents(String appId, Integer menuId, Integer limit, Integer page, OffsetDateTime start, OffsetDateTime end, Integer orderId, Integer storeId, List<Integer> storeIdList, Integer storeGroupId, Integer userId, Integer menuId2, Integer campaignId, String userEmail, String userName, String voucherCode, List<String> eventType, String flipdishEventId) throws ApiException {
        ApiResponse<RestApiEventSearchPaginationResult> resp = getMenuEventsWithHttpInfo(appId, menuId, limit, page, start, end, orderId, storeId, storeIdList, storeGroupId, userId, menuId2, campaignId, userEmail, userName, voucherCode, eventType, flipdishEventId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param menuId  (required)
     * @param limit The maximum elements to return (optional)
     * @param page The index of the page to return, starting by 1 (optional)
     * @param start Start date (optional)
     * @param end End date (optional)
     * @param orderId Events that have Order Id (optional)
     * @param storeId Events that have Store Id (optional)
     * @param storeIdList Events that have Store Id List (optional)
     * @param storeGroupId Events that have Store Group Id (optional)
     * @param userId Events that have User Id (optional)
     * @param menuId2 Events that have Menu Id (optional)
     * @param campaignId Events that have Campaign Id (optional)
     * @param userEmail Events that have User Email (optional)
     * @param userName Events that have User Name (optional)
     * @param voucherCode Events that have voucher code (optional)
     * @param eventType Events that have event type\\s (optional)
     * @param flipdishEventId Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     * @return ApiResponse&lt;RestApiEventSearchPaginationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiEventSearchPaginationResult> getMenuEventsWithHttpInfo(String appId, Integer menuId, Integer limit, Integer page, OffsetDateTime start, OffsetDateTime end, Integer orderId, Integer storeId, List<Integer> storeIdList, Integer storeGroupId, Integer userId, Integer menuId2, Integer campaignId, String userEmail, String userName, String voucherCode, List<String> eventType, String flipdishEventId) throws ApiException {
        com.squareup.okhttp.Call call = getMenuEventsValidateBeforeCall(appId, menuId, limit, page, start, end, orderId, storeId, storeIdList, storeGroupId, userId, menuId2, campaignId, userEmail, userName, voucherCode, eventType, flipdishEventId, null, null);
        Type localVarReturnType = new TypeToken<RestApiEventSearchPaginationResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param menuId  (required)
     * @param limit The maximum elements to return (optional)
     * @param page The index of the page to return, starting by 1 (optional)
     * @param start Start date (optional)
     * @param end End date (optional)
     * @param orderId Events that have Order Id (optional)
     * @param storeId Events that have Store Id (optional)
     * @param storeIdList Events that have Store Id List (optional)
     * @param storeGroupId Events that have Store Group Id (optional)
     * @param userId Events that have User Id (optional)
     * @param menuId2 Events that have Menu Id (optional)
     * @param campaignId Events that have Campaign Id (optional)
     * @param userEmail Events that have User Email (optional)
     * @param userName Events that have User Name (optional)
     * @param voucherCode Events that have voucher code (optional)
     * @param eventType Events that have event type\\s (optional)
     * @param flipdishEventId Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMenuEventsAsync(String appId, Integer menuId, Integer limit, Integer page, OffsetDateTime start, OffsetDateTime end, Integer orderId, Integer storeId, List<Integer> storeIdList, Integer storeGroupId, Integer userId, Integer menuId2, Integer campaignId, String userEmail, String userName, String voucherCode, List<String> eventType, String flipdishEventId, final ApiCallback<RestApiEventSearchPaginationResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMenuEventsValidateBeforeCall(appId, menuId, limit, page, start, end, orderId, storeId, storeIdList, storeGroupId, userId, menuId2, campaignId, userEmail, userName, voucherCode, eventType, flipdishEventId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiEventSearchPaginationResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOrderEvents
     * @param appId  (required)
     * @param orderId  (required)
     * @param limit The maximum elements to return (optional)
     * @param page The index of the page to return, starting by 1 (optional)
     * @param start Start date (optional)
     * @param end End date (optional)
     * @param orderId2 Events that have Order Id (optional)
     * @param storeId Events that have Store Id (optional)
     * @param storeIdList Events that have Store Id List (optional)
     * @param storeGroupId Events that have Store Group Id (optional)
     * @param userId Events that have User Id (optional)
     * @param menuId Events that have Menu Id (optional)
     * @param campaignId Events that have Campaign Id (optional)
     * @param userEmail Events that have User Email (optional)
     * @param userName Events that have User Name (optional)
     * @param voucherCode Events that have voucher code (optional)
     * @param eventType Events that have event type\\s (optional)
     * @param flipdishEventId Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOrderEventsCall(String appId, Integer orderId, Integer limit, Integer page, OffsetDateTime start, OffsetDateTime end, Integer orderId2, Integer storeId, List<Integer> storeIdList, Integer storeGroupId, Integer userId, Integer menuId, Integer campaignId, String userEmail, String userName, String voucherCode, List<String> eventType, String flipdishEventId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/events/order/{orderId}"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "orderId" + "\\}", apiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start", start));
        if (end != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end", end));
        if (orderId2 != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orderId", orderId2));
        if (storeId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storeId", storeId));
        if (storeIdList != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "storeIdList", storeIdList));
        if (storeGroupId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storeGroupId", storeGroupId));
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userId", userId));
        if (menuId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("menuId", menuId));
        if (campaignId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("campaignId", campaignId));
        if (userEmail != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userEmail", userEmail));
        if (userName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userName", userName));
        if (voucherCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("voucherCode", voucherCode));
        if (eventType != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "eventType", eventType));
        if (flipdishEventId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("flipdishEventId", flipdishEventId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOrderEventsValidateBeforeCall(String appId, Integer orderId, Integer limit, Integer page, OffsetDateTime start, OffsetDateTime end, Integer orderId2, Integer storeId, List<Integer> storeIdList, Integer storeGroupId, Integer userId, Integer menuId, Integer campaignId, String userEmail, String userName, String voucherCode, List<String> eventType, String flipdishEventId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getOrderEvents(Async)");
        }
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling getOrderEvents(Async)");
        }
        

        com.squareup.okhttp.Call call = getOrderEventsCall(appId, orderId, limit, page, start, end, orderId2, storeId, storeIdList, storeGroupId, userId, menuId, campaignId, userEmail, userName, voucherCode, eventType, flipdishEventId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param orderId  (required)
     * @param limit The maximum elements to return (optional)
     * @param page The index of the page to return, starting by 1 (optional)
     * @param start Start date (optional)
     * @param end End date (optional)
     * @param orderId2 Events that have Order Id (optional)
     * @param storeId Events that have Store Id (optional)
     * @param storeIdList Events that have Store Id List (optional)
     * @param storeGroupId Events that have Store Group Id (optional)
     * @param userId Events that have User Id (optional)
     * @param menuId Events that have Menu Id (optional)
     * @param campaignId Events that have Campaign Id (optional)
     * @param userEmail Events that have User Email (optional)
     * @param userName Events that have User Name (optional)
     * @param voucherCode Events that have voucher code (optional)
     * @param eventType Events that have event type\\s (optional)
     * @param flipdishEventId Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     * @return RestApiEventSearchPaginationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiEventSearchPaginationResult getOrderEvents(String appId, Integer orderId, Integer limit, Integer page, OffsetDateTime start, OffsetDateTime end, Integer orderId2, Integer storeId, List<Integer> storeIdList, Integer storeGroupId, Integer userId, Integer menuId, Integer campaignId, String userEmail, String userName, String voucherCode, List<String> eventType, String flipdishEventId) throws ApiException {
        ApiResponse<RestApiEventSearchPaginationResult> resp = getOrderEventsWithHttpInfo(appId, orderId, limit, page, start, end, orderId2, storeId, storeIdList, storeGroupId, userId, menuId, campaignId, userEmail, userName, voucherCode, eventType, flipdishEventId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param orderId  (required)
     * @param limit The maximum elements to return (optional)
     * @param page The index of the page to return, starting by 1 (optional)
     * @param start Start date (optional)
     * @param end End date (optional)
     * @param orderId2 Events that have Order Id (optional)
     * @param storeId Events that have Store Id (optional)
     * @param storeIdList Events that have Store Id List (optional)
     * @param storeGroupId Events that have Store Group Id (optional)
     * @param userId Events that have User Id (optional)
     * @param menuId Events that have Menu Id (optional)
     * @param campaignId Events that have Campaign Id (optional)
     * @param userEmail Events that have User Email (optional)
     * @param userName Events that have User Name (optional)
     * @param voucherCode Events that have voucher code (optional)
     * @param eventType Events that have event type\\s (optional)
     * @param flipdishEventId Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     * @return ApiResponse&lt;RestApiEventSearchPaginationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiEventSearchPaginationResult> getOrderEventsWithHttpInfo(String appId, Integer orderId, Integer limit, Integer page, OffsetDateTime start, OffsetDateTime end, Integer orderId2, Integer storeId, List<Integer> storeIdList, Integer storeGroupId, Integer userId, Integer menuId, Integer campaignId, String userEmail, String userName, String voucherCode, List<String> eventType, String flipdishEventId) throws ApiException {
        com.squareup.okhttp.Call call = getOrderEventsValidateBeforeCall(appId, orderId, limit, page, start, end, orderId2, storeId, storeIdList, storeGroupId, userId, menuId, campaignId, userEmail, userName, voucherCode, eventType, flipdishEventId, null, null);
        Type localVarReturnType = new TypeToken<RestApiEventSearchPaginationResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param orderId  (required)
     * @param limit The maximum elements to return (optional)
     * @param page The index of the page to return, starting by 1 (optional)
     * @param start Start date (optional)
     * @param end End date (optional)
     * @param orderId2 Events that have Order Id (optional)
     * @param storeId Events that have Store Id (optional)
     * @param storeIdList Events that have Store Id List (optional)
     * @param storeGroupId Events that have Store Group Id (optional)
     * @param userId Events that have User Id (optional)
     * @param menuId Events that have Menu Id (optional)
     * @param campaignId Events that have Campaign Id (optional)
     * @param userEmail Events that have User Email (optional)
     * @param userName Events that have User Name (optional)
     * @param voucherCode Events that have voucher code (optional)
     * @param eventType Events that have event type\\s (optional)
     * @param flipdishEventId Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOrderEventsAsync(String appId, Integer orderId, Integer limit, Integer page, OffsetDateTime start, OffsetDateTime end, Integer orderId2, Integer storeId, List<Integer> storeIdList, Integer storeGroupId, Integer userId, Integer menuId, Integer campaignId, String userEmail, String userName, String voucherCode, List<String> eventType, String flipdishEventId, final ApiCallback<RestApiEventSearchPaginationResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOrderEventsValidateBeforeCall(appId, orderId, limit, page, start, end, orderId2, storeId, storeIdList, storeGroupId, userId, menuId, campaignId, userEmail, userName, voucherCode, eventType, flipdishEventId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiEventSearchPaginationResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOrderEventsByCustomer
     * @param appId  (required)
     * @param customerId  (required)
     * @param limit The maximum elements to return (optional)
     * @param page The index of the page to return, starting by 1 (optional)
     * @param start Start date (optional)
     * @param end End date (optional)
     * @param orderId Events that have Order Id (optional)
     * @param storeId Events that have Store Id (optional)
     * @param storeIdList Events that have Store Id List (optional)
     * @param storeGroupId Events that have Store Group Id (optional)
     * @param userId Events that have User Id (optional)
     * @param menuId Events that have Menu Id (optional)
     * @param campaignId Events that have Campaign Id (optional)
     * @param userEmail Events that have User Email (optional)
     * @param userName Events that have User Name (optional)
     * @param voucherCode Events that have voucher code (optional)
     * @param eventType Events that have event type\\s (optional)
     * @param flipdishEventId Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOrderEventsByCustomerCall(String appId, Integer customerId, Integer limit, Integer page, OffsetDateTime start, OffsetDateTime end, Integer orderId, Integer storeId, List<Integer> storeIdList, Integer storeGroupId, Integer userId, Integer menuId, Integer campaignId, String userEmail, String userName, String voucherCode, List<String> eventType, String flipdishEventId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/events/order"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (customerId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("customerId", customerId));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start", start));
        if (end != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end", end));
        if (orderId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orderId", orderId));
        if (storeId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storeId", storeId));
        if (storeIdList != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "storeIdList", storeIdList));
        if (storeGroupId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storeGroupId", storeGroupId));
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userId", userId));
        if (menuId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("menuId", menuId));
        if (campaignId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("campaignId", campaignId));
        if (userEmail != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userEmail", userEmail));
        if (userName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userName", userName));
        if (voucherCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("voucherCode", voucherCode));
        if (eventType != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "eventType", eventType));
        if (flipdishEventId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("flipdishEventId", flipdishEventId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOrderEventsByCustomerValidateBeforeCall(String appId, Integer customerId, Integer limit, Integer page, OffsetDateTime start, OffsetDateTime end, Integer orderId, Integer storeId, List<Integer> storeIdList, Integer storeGroupId, Integer userId, Integer menuId, Integer campaignId, String userEmail, String userName, String voucherCode, List<String> eventType, String flipdishEventId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getOrderEventsByCustomer(Async)");
        }
        
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling getOrderEventsByCustomer(Async)");
        }
        

        com.squareup.okhttp.Call call = getOrderEventsByCustomerCall(appId, customerId, limit, page, start, end, orderId, storeId, storeIdList, storeGroupId, userId, menuId, campaignId, userEmail, userName, voucherCode, eventType, flipdishEventId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param customerId  (required)
     * @param limit The maximum elements to return (optional)
     * @param page The index of the page to return, starting by 1 (optional)
     * @param start Start date (optional)
     * @param end End date (optional)
     * @param orderId Events that have Order Id (optional)
     * @param storeId Events that have Store Id (optional)
     * @param storeIdList Events that have Store Id List (optional)
     * @param storeGroupId Events that have Store Group Id (optional)
     * @param userId Events that have User Id (optional)
     * @param menuId Events that have Menu Id (optional)
     * @param campaignId Events that have Campaign Id (optional)
     * @param userEmail Events that have User Email (optional)
     * @param userName Events that have User Name (optional)
     * @param voucherCode Events that have voucher code (optional)
     * @param eventType Events that have event type\\s (optional)
     * @param flipdishEventId Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     * @return RestApiEventSearchPaginationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiEventSearchPaginationResult getOrderEventsByCustomer(String appId, Integer customerId, Integer limit, Integer page, OffsetDateTime start, OffsetDateTime end, Integer orderId, Integer storeId, List<Integer> storeIdList, Integer storeGroupId, Integer userId, Integer menuId, Integer campaignId, String userEmail, String userName, String voucherCode, List<String> eventType, String flipdishEventId) throws ApiException {
        ApiResponse<RestApiEventSearchPaginationResult> resp = getOrderEventsByCustomerWithHttpInfo(appId, customerId, limit, page, start, end, orderId, storeId, storeIdList, storeGroupId, userId, menuId, campaignId, userEmail, userName, voucherCode, eventType, flipdishEventId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param customerId  (required)
     * @param limit The maximum elements to return (optional)
     * @param page The index of the page to return, starting by 1 (optional)
     * @param start Start date (optional)
     * @param end End date (optional)
     * @param orderId Events that have Order Id (optional)
     * @param storeId Events that have Store Id (optional)
     * @param storeIdList Events that have Store Id List (optional)
     * @param storeGroupId Events that have Store Group Id (optional)
     * @param userId Events that have User Id (optional)
     * @param menuId Events that have Menu Id (optional)
     * @param campaignId Events that have Campaign Id (optional)
     * @param userEmail Events that have User Email (optional)
     * @param userName Events that have User Name (optional)
     * @param voucherCode Events that have voucher code (optional)
     * @param eventType Events that have event type\\s (optional)
     * @param flipdishEventId Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     * @return ApiResponse&lt;RestApiEventSearchPaginationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiEventSearchPaginationResult> getOrderEventsByCustomerWithHttpInfo(String appId, Integer customerId, Integer limit, Integer page, OffsetDateTime start, OffsetDateTime end, Integer orderId, Integer storeId, List<Integer> storeIdList, Integer storeGroupId, Integer userId, Integer menuId, Integer campaignId, String userEmail, String userName, String voucherCode, List<String> eventType, String flipdishEventId) throws ApiException {
        com.squareup.okhttp.Call call = getOrderEventsByCustomerValidateBeforeCall(appId, customerId, limit, page, start, end, orderId, storeId, storeIdList, storeGroupId, userId, menuId, campaignId, userEmail, userName, voucherCode, eventType, flipdishEventId, null, null);
        Type localVarReturnType = new TypeToken<RestApiEventSearchPaginationResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param customerId  (required)
     * @param limit The maximum elements to return (optional)
     * @param page The index of the page to return, starting by 1 (optional)
     * @param start Start date (optional)
     * @param end End date (optional)
     * @param orderId Events that have Order Id (optional)
     * @param storeId Events that have Store Id (optional)
     * @param storeIdList Events that have Store Id List (optional)
     * @param storeGroupId Events that have Store Group Id (optional)
     * @param userId Events that have User Id (optional)
     * @param menuId Events that have Menu Id (optional)
     * @param campaignId Events that have Campaign Id (optional)
     * @param userEmail Events that have User Email (optional)
     * @param userName Events that have User Name (optional)
     * @param voucherCode Events that have voucher code (optional)
     * @param eventType Events that have event type\\s (optional)
     * @param flipdishEventId Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOrderEventsByCustomerAsync(String appId, Integer customerId, Integer limit, Integer page, OffsetDateTime start, OffsetDateTime end, Integer orderId, Integer storeId, List<Integer> storeIdList, Integer storeGroupId, Integer userId, Integer menuId, Integer campaignId, String userEmail, String userName, String voucherCode, List<String> eventType, String flipdishEventId, final ApiCallback<RestApiEventSearchPaginationResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOrderEventsByCustomerValidateBeforeCall(appId, customerId, limit, page, start, end, orderId, storeId, storeIdList, storeGroupId, userId, menuId, campaignId, userEmail, userName, voucherCode, eventType, flipdishEventId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiEventSearchPaginationResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getStoreEvents
     * @param appId  (required)
     * @param storeId  (required)
     * @param limit The maximum elements to return (optional)
     * @param page The index of the page to return, starting by 1 (optional)
     * @param start Start date (optional)
     * @param end End date (optional)
     * @param orderId Events that have Order Id (optional)
     * @param storeId2 Events that have Store Id (optional)
     * @param storeIdList Events that have Store Id List (optional)
     * @param storeGroupId Events that have Store Group Id (optional)
     * @param userId Events that have User Id (optional)
     * @param menuId Events that have Menu Id (optional)
     * @param campaignId Events that have Campaign Id (optional)
     * @param userEmail Events that have User Email (optional)
     * @param userName Events that have User Name (optional)
     * @param voucherCode Events that have voucher code (optional)
     * @param eventType Events that have event type\\s (optional)
     * @param flipdishEventId Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getStoreEventsCall(String appId, Integer storeId, Integer limit, Integer page, OffsetDateTime start, OffsetDateTime end, Integer orderId, Integer storeId2, List<Integer> storeIdList, Integer storeGroupId, Integer userId, Integer menuId, Integer campaignId, String userEmail, String userName, String voucherCode, List<String> eventType, String flipdishEventId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/events/store/{storeId}"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start", start));
        if (end != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end", end));
        if (orderId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orderId", orderId));
        if (storeId2 != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storeId", storeId2));
        if (storeIdList != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "storeIdList", storeIdList));
        if (storeGroupId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storeGroupId", storeGroupId));
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userId", userId));
        if (menuId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("menuId", menuId));
        if (campaignId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("campaignId", campaignId));
        if (userEmail != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userEmail", userEmail));
        if (userName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userName", userName));
        if (voucherCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("voucherCode", voucherCode));
        if (eventType != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "eventType", eventType));
        if (flipdishEventId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("flipdishEventId", flipdishEventId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStoreEventsValidateBeforeCall(String appId, Integer storeId, Integer limit, Integer page, OffsetDateTime start, OffsetDateTime end, Integer orderId, Integer storeId2, List<Integer> storeIdList, Integer storeGroupId, Integer userId, Integer menuId, Integer campaignId, String userEmail, String userName, String voucherCode, List<String> eventType, String flipdishEventId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getStoreEvents(Async)");
        }
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling getStoreEvents(Async)");
        }
        

        com.squareup.okhttp.Call call = getStoreEventsCall(appId, storeId, limit, page, start, end, orderId, storeId2, storeIdList, storeGroupId, userId, menuId, campaignId, userEmail, userName, voucherCode, eventType, flipdishEventId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param storeId  (required)
     * @param limit The maximum elements to return (optional)
     * @param page The index of the page to return, starting by 1 (optional)
     * @param start Start date (optional)
     * @param end End date (optional)
     * @param orderId Events that have Order Id (optional)
     * @param storeId2 Events that have Store Id (optional)
     * @param storeIdList Events that have Store Id List (optional)
     * @param storeGroupId Events that have Store Group Id (optional)
     * @param userId Events that have User Id (optional)
     * @param menuId Events that have Menu Id (optional)
     * @param campaignId Events that have Campaign Id (optional)
     * @param userEmail Events that have User Email (optional)
     * @param userName Events that have User Name (optional)
     * @param voucherCode Events that have voucher code (optional)
     * @param eventType Events that have event type\\s (optional)
     * @param flipdishEventId Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     * @return RestApiEventSearchPaginationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiEventSearchPaginationResult getStoreEvents(String appId, Integer storeId, Integer limit, Integer page, OffsetDateTime start, OffsetDateTime end, Integer orderId, Integer storeId2, List<Integer> storeIdList, Integer storeGroupId, Integer userId, Integer menuId, Integer campaignId, String userEmail, String userName, String voucherCode, List<String> eventType, String flipdishEventId) throws ApiException {
        ApiResponse<RestApiEventSearchPaginationResult> resp = getStoreEventsWithHttpInfo(appId, storeId, limit, page, start, end, orderId, storeId2, storeIdList, storeGroupId, userId, menuId, campaignId, userEmail, userName, voucherCode, eventType, flipdishEventId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param storeId  (required)
     * @param limit The maximum elements to return (optional)
     * @param page The index of the page to return, starting by 1 (optional)
     * @param start Start date (optional)
     * @param end End date (optional)
     * @param orderId Events that have Order Id (optional)
     * @param storeId2 Events that have Store Id (optional)
     * @param storeIdList Events that have Store Id List (optional)
     * @param storeGroupId Events that have Store Group Id (optional)
     * @param userId Events that have User Id (optional)
     * @param menuId Events that have Menu Id (optional)
     * @param campaignId Events that have Campaign Id (optional)
     * @param userEmail Events that have User Email (optional)
     * @param userName Events that have User Name (optional)
     * @param voucherCode Events that have voucher code (optional)
     * @param eventType Events that have event type\\s (optional)
     * @param flipdishEventId Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     * @return ApiResponse&lt;RestApiEventSearchPaginationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiEventSearchPaginationResult> getStoreEventsWithHttpInfo(String appId, Integer storeId, Integer limit, Integer page, OffsetDateTime start, OffsetDateTime end, Integer orderId, Integer storeId2, List<Integer> storeIdList, Integer storeGroupId, Integer userId, Integer menuId, Integer campaignId, String userEmail, String userName, String voucherCode, List<String> eventType, String flipdishEventId) throws ApiException {
        com.squareup.okhttp.Call call = getStoreEventsValidateBeforeCall(appId, storeId, limit, page, start, end, orderId, storeId2, storeIdList, storeGroupId, userId, menuId, campaignId, userEmail, userName, voucherCode, eventType, flipdishEventId, null, null);
        Type localVarReturnType = new TypeToken<RestApiEventSearchPaginationResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param storeId  (required)
     * @param limit The maximum elements to return (optional)
     * @param page The index of the page to return, starting by 1 (optional)
     * @param start Start date (optional)
     * @param end End date (optional)
     * @param orderId Events that have Order Id (optional)
     * @param storeId2 Events that have Store Id (optional)
     * @param storeIdList Events that have Store Id List (optional)
     * @param storeGroupId Events that have Store Group Id (optional)
     * @param userId Events that have User Id (optional)
     * @param menuId Events that have Menu Id (optional)
     * @param campaignId Events that have Campaign Id (optional)
     * @param userEmail Events that have User Email (optional)
     * @param userName Events that have User Name (optional)
     * @param voucherCode Events that have voucher code (optional)
     * @param eventType Events that have event type\\s (optional)
     * @param flipdishEventId Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStoreEventsAsync(String appId, Integer storeId, Integer limit, Integer page, OffsetDateTime start, OffsetDateTime end, Integer orderId, Integer storeId2, List<Integer> storeIdList, Integer storeGroupId, Integer userId, Integer menuId, Integer campaignId, String userEmail, String userName, String voucherCode, List<String> eventType, String flipdishEventId, final ApiCallback<RestApiEventSearchPaginationResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStoreEventsValidateBeforeCall(appId, storeId, limit, page, start, end, orderId, storeId2, storeIdList, storeGroupId, userId, menuId, campaignId, userEmail, userName, voucherCode, eventType, flipdishEventId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiEventSearchPaginationResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getUserEvents
     * @param appId  (required)
     * @param userId  (required)
     * @param limit The maximum elements to return (optional)
     * @param page The index of the page to return, starting by 1 (optional)
     * @param start Start date (optional)
     * @param end End date (optional)
     * @param orderId Events that have Order Id (optional)
     * @param storeId Events that have Store Id (optional)
     * @param storeIdList Events that have Store Id List (optional)
     * @param storeGroupId Events that have Store Group Id (optional)
     * @param userId2 Events that have User Id (optional)
     * @param menuId Events that have Menu Id (optional)
     * @param campaignId Events that have Campaign Id (optional)
     * @param userEmail Events that have User Email (optional)
     * @param userName Events that have User Name (optional)
     * @param voucherCode Events that have voucher code (optional)
     * @param eventType Events that have event type\\s (optional)
     * @param flipdishEventId Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getUserEventsCall(String appId, Integer userId, Integer limit, Integer page, OffsetDateTime start, OffsetDateTime end, Integer orderId, Integer storeId, List<Integer> storeIdList, Integer storeGroupId, Integer userId2, Integer menuId, Integer campaignId, String userEmail, String userName, String voucherCode, List<String> eventType, String flipdishEventId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/events/user/{userId}"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "userId" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start", start));
        if (end != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end", end));
        if (orderId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orderId", orderId));
        if (storeId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storeId", storeId));
        if (storeIdList != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "storeIdList", storeIdList));
        if (storeGroupId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storeGroupId", storeGroupId));
        if (userId2 != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userId", userId2));
        if (menuId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("menuId", menuId));
        if (campaignId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("campaignId", campaignId));
        if (userEmail != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userEmail", userEmail));
        if (userName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userName", userName));
        if (voucherCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("voucherCode", voucherCode));
        if (eventType != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "eventType", eventType));
        if (flipdishEventId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("flipdishEventId", flipdishEventId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUserEventsValidateBeforeCall(String appId, Integer userId, Integer limit, Integer page, OffsetDateTime start, OffsetDateTime end, Integer orderId, Integer storeId, List<Integer> storeIdList, Integer storeGroupId, Integer userId2, Integer menuId, Integer campaignId, String userEmail, String userName, String voucherCode, List<String> eventType, String flipdishEventId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getUserEvents(Async)");
        }
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUserEvents(Async)");
        }
        

        com.squareup.okhttp.Call call = getUserEventsCall(appId, userId, limit, page, start, end, orderId, storeId, storeIdList, storeGroupId, userId2, menuId, campaignId, userEmail, userName, voucherCode, eventType, flipdishEventId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param userId  (required)
     * @param limit The maximum elements to return (optional)
     * @param page The index of the page to return, starting by 1 (optional)
     * @param start Start date (optional)
     * @param end End date (optional)
     * @param orderId Events that have Order Id (optional)
     * @param storeId Events that have Store Id (optional)
     * @param storeIdList Events that have Store Id List (optional)
     * @param storeGroupId Events that have Store Group Id (optional)
     * @param userId2 Events that have User Id (optional)
     * @param menuId Events that have Menu Id (optional)
     * @param campaignId Events that have Campaign Id (optional)
     * @param userEmail Events that have User Email (optional)
     * @param userName Events that have User Name (optional)
     * @param voucherCode Events that have voucher code (optional)
     * @param eventType Events that have event type\\s (optional)
     * @param flipdishEventId Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     * @return RestApiEventSearchPaginationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiEventSearchPaginationResult getUserEvents(String appId, Integer userId, Integer limit, Integer page, OffsetDateTime start, OffsetDateTime end, Integer orderId, Integer storeId, List<Integer> storeIdList, Integer storeGroupId, Integer userId2, Integer menuId, Integer campaignId, String userEmail, String userName, String voucherCode, List<String> eventType, String flipdishEventId) throws ApiException {
        ApiResponse<RestApiEventSearchPaginationResult> resp = getUserEventsWithHttpInfo(appId, userId, limit, page, start, end, orderId, storeId, storeIdList, storeGroupId, userId2, menuId, campaignId, userEmail, userName, voucherCode, eventType, flipdishEventId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param userId  (required)
     * @param limit The maximum elements to return (optional)
     * @param page The index of the page to return, starting by 1 (optional)
     * @param start Start date (optional)
     * @param end End date (optional)
     * @param orderId Events that have Order Id (optional)
     * @param storeId Events that have Store Id (optional)
     * @param storeIdList Events that have Store Id List (optional)
     * @param storeGroupId Events that have Store Group Id (optional)
     * @param userId2 Events that have User Id (optional)
     * @param menuId Events that have Menu Id (optional)
     * @param campaignId Events that have Campaign Id (optional)
     * @param userEmail Events that have User Email (optional)
     * @param userName Events that have User Name (optional)
     * @param voucherCode Events that have voucher code (optional)
     * @param eventType Events that have event type\\s (optional)
     * @param flipdishEventId Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     * @return ApiResponse&lt;RestApiEventSearchPaginationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiEventSearchPaginationResult> getUserEventsWithHttpInfo(String appId, Integer userId, Integer limit, Integer page, OffsetDateTime start, OffsetDateTime end, Integer orderId, Integer storeId, List<Integer> storeIdList, Integer storeGroupId, Integer userId2, Integer menuId, Integer campaignId, String userEmail, String userName, String voucherCode, List<String> eventType, String flipdishEventId) throws ApiException {
        com.squareup.okhttp.Call call = getUserEventsValidateBeforeCall(appId, userId, limit, page, start, end, orderId, storeId, storeIdList, storeGroupId, userId2, menuId, campaignId, userEmail, userName, voucherCode, eventType, flipdishEventId, null, null);
        Type localVarReturnType = new TypeToken<RestApiEventSearchPaginationResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param userId  (required)
     * @param limit The maximum elements to return (optional)
     * @param page The index of the page to return, starting by 1 (optional)
     * @param start Start date (optional)
     * @param end End date (optional)
     * @param orderId Events that have Order Id (optional)
     * @param storeId Events that have Store Id (optional)
     * @param storeIdList Events that have Store Id List (optional)
     * @param storeGroupId Events that have Store Group Id (optional)
     * @param userId2 Events that have User Id (optional)
     * @param menuId Events that have Menu Id (optional)
     * @param campaignId Events that have Campaign Id (optional)
     * @param userEmail Events that have User Email (optional)
     * @param userName Events that have User Name (optional)
     * @param voucherCode Events that have voucher code (optional)
     * @param eventType Events that have event type\\s (optional)
     * @param flipdishEventId Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUserEventsAsync(String appId, Integer userId, Integer limit, Integer page, OffsetDateTime start, OffsetDateTime end, Integer orderId, Integer storeId, List<Integer> storeIdList, Integer storeGroupId, Integer userId2, Integer menuId, Integer campaignId, String userEmail, String userName, String voucherCode, List<String> eventType, String flipdishEventId, final ApiCallback<RestApiEventSearchPaginationResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUserEventsValidateBeforeCall(appId, userId, limit, page, start, end, orderId, storeId, storeIdList, storeGroupId, userId2, menuId, campaignId, userEmail, userName, voucherCode, eventType, flipdishEventId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiEventSearchPaginationResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getWhiteLabelEvents
     * @param appId  (required)
     * @param whitelabelId  (required)
     * @param limit The maximum elements to return (optional)
     * @param page The index of the page to return, starting by 1 (optional)
     * @param start Start date (optional)
     * @param end End date (optional)
     * @param orderId Events that have Order Id (optional)
     * @param storeId Events that have Store Id (optional)
     * @param storeIdList Events that have Store Id List (optional)
     * @param storeGroupId Events that have Store Group Id (optional)
     * @param userId Events that have User Id (optional)
     * @param menuId Events that have Menu Id (optional)
     * @param campaignId Events that have Campaign Id (optional)
     * @param userEmail Events that have User Email (optional)
     * @param userName Events that have User Name (optional)
     * @param voucherCode Events that have voucher code (optional)
     * @param eventType Events that have event type\\s (optional)
     * @param flipdishEventId Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getWhiteLabelEventsCall(String appId, Integer whitelabelId, Integer limit, Integer page, OffsetDateTime start, OffsetDateTime end, Integer orderId, Integer storeId, List<Integer> storeIdList, Integer storeGroupId, Integer userId, Integer menuId, Integer campaignId, String userEmail, String userName, String voucherCode, List<String> eventType, String flipdishEventId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/events/whitelabel/{whitelabelId}"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "whitelabelId" + "\\}", apiClient.escapeString(whitelabelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start", start));
        if (end != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end", end));
        if (orderId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orderId", orderId));
        if (storeId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storeId", storeId));
        if (storeIdList != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "storeIdList", storeIdList));
        if (storeGroupId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storeGroupId", storeGroupId));
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userId", userId));
        if (menuId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("menuId", menuId));
        if (campaignId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("campaignId", campaignId));
        if (userEmail != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userEmail", userEmail));
        if (userName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userName", userName));
        if (voucherCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("voucherCode", voucherCode));
        if (eventType != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "eventType", eventType));
        if (flipdishEventId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("flipdishEventId", flipdishEventId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getWhiteLabelEventsValidateBeforeCall(String appId, Integer whitelabelId, Integer limit, Integer page, OffsetDateTime start, OffsetDateTime end, Integer orderId, Integer storeId, List<Integer> storeIdList, Integer storeGroupId, Integer userId, Integer menuId, Integer campaignId, String userEmail, String userName, String voucherCode, List<String> eventType, String flipdishEventId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getWhiteLabelEvents(Async)");
        }
        
        // verify the required parameter 'whitelabelId' is set
        if (whitelabelId == null) {
            throw new ApiException("Missing the required parameter 'whitelabelId' when calling getWhiteLabelEvents(Async)");
        }
        

        com.squareup.okhttp.Call call = getWhiteLabelEventsCall(appId, whitelabelId, limit, page, start, end, orderId, storeId, storeIdList, storeGroupId, userId, menuId, campaignId, userEmail, userName, voucherCode, eventType, flipdishEventId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param whitelabelId  (required)
     * @param limit The maximum elements to return (optional)
     * @param page The index of the page to return, starting by 1 (optional)
     * @param start Start date (optional)
     * @param end End date (optional)
     * @param orderId Events that have Order Id (optional)
     * @param storeId Events that have Store Id (optional)
     * @param storeIdList Events that have Store Id List (optional)
     * @param storeGroupId Events that have Store Group Id (optional)
     * @param userId Events that have User Id (optional)
     * @param menuId Events that have Menu Id (optional)
     * @param campaignId Events that have Campaign Id (optional)
     * @param userEmail Events that have User Email (optional)
     * @param userName Events that have User Name (optional)
     * @param voucherCode Events that have voucher code (optional)
     * @param eventType Events that have event type\\s (optional)
     * @param flipdishEventId Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     * @return RestApiEventSearchPaginationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiEventSearchPaginationResult getWhiteLabelEvents(String appId, Integer whitelabelId, Integer limit, Integer page, OffsetDateTime start, OffsetDateTime end, Integer orderId, Integer storeId, List<Integer> storeIdList, Integer storeGroupId, Integer userId, Integer menuId, Integer campaignId, String userEmail, String userName, String voucherCode, List<String> eventType, String flipdishEventId) throws ApiException {
        ApiResponse<RestApiEventSearchPaginationResult> resp = getWhiteLabelEventsWithHttpInfo(appId, whitelabelId, limit, page, start, end, orderId, storeId, storeIdList, storeGroupId, userId, menuId, campaignId, userEmail, userName, voucherCode, eventType, flipdishEventId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param whitelabelId  (required)
     * @param limit The maximum elements to return (optional)
     * @param page The index of the page to return, starting by 1 (optional)
     * @param start Start date (optional)
     * @param end End date (optional)
     * @param orderId Events that have Order Id (optional)
     * @param storeId Events that have Store Id (optional)
     * @param storeIdList Events that have Store Id List (optional)
     * @param storeGroupId Events that have Store Group Id (optional)
     * @param userId Events that have User Id (optional)
     * @param menuId Events that have Menu Id (optional)
     * @param campaignId Events that have Campaign Id (optional)
     * @param userEmail Events that have User Email (optional)
     * @param userName Events that have User Name (optional)
     * @param voucherCode Events that have voucher code (optional)
     * @param eventType Events that have event type\\s (optional)
     * @param flipdishEventId Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     * @return ApiResponse&lt;RestApiEventSearchPaginationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiEventSearchPaginationResult> getWhiteLabelEventsWithHttpInfo(String appId, Integer whitelabelId, Integer limit, Integer page, OffsetDateTime start, OffsetDateTime end, Integer orderId, Integer storeId, List<Integer> storeIdList, Integer storeGroupId, Integer userId, Integer menuId, Integer campaignId, String userEmail, String userName, String voucherCode, List<String> eventType, String flipdishEventId) throws ApiException {
        com.squareup.okhttp.Call call = getWhiteLabelEventsValidateBeforeCall(appId, whitelabelId, limit, page, start, end, orderId, storeId, storeIdList, storeGroupId, userId, menuId, campaignId, userEmail, userName, voucherCode, eventType, flipdishEventId, null, null);
        Type localVarReturnType = new TypeToken<RestApiEventSearchPaginationResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param whitelabelId  (required)
     * @param limit The maximum elements to return (optional)
     * @param page The index of the page to return, starting by 1 (optional)
     * @param start Start date (optional)
     * @param end End date (optional)
     * @param orderId Events that have Order Id (optional)
     * @param storeId Events that have Store Id (optional)
     * @param storeIdList Events that have Store Id List (optional)
     * @param storeGroupId Events that have Store Group Id (optional)
     * @param userId Events that have User Id (optional)
     * @param menuId Events that have Menu Id (optional)
     * @param campaignId Events that have Campaign Id (optional)
     * @param userEmail Events that have User Email (optional)
     * @param userName Events that have User Name (optional)
     * @param voucherCode Events that have voucher code (optional)
     * @param eventType Events that have event type\\s (optional)
     * @param flipdishEventId Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getWhiteLabelEventsAsync(String appId, Integer whitelabelId, Integer limit, Integer page, OffsetDateTime start, OffsetDateTime end, Integer orderId, Integer storeId, List<Integer> storeIdList, Integer storeGroupId, Integer userId, Integer menuId, Integer campaignId, String userEmail, String userName, String voucherCode, List<String> eventType, String flipdishEventId, final ApiCallback<RestApiEventSearchPaginationResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getWhiteLabelEventsValidateBeforeCall(appId, whitelabelId, limit, page, start, end, orderId, storeId, storeIdList, storeGroupId, userId, menuId, campaignId, userEmail, userName, voucherCode, eventType, flipdishEventId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiEventSearchPaginationResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
