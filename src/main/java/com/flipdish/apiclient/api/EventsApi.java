/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.flipdish.apiclient.api;

import com.flipdish.apiclient.ApiCallback;
import com.flipdish.apiclient.ApiClient;
import com.flipdish.apiclient.ApiException;
import com.flipdish.apiclient.ApiResponse;
import com.flipdish.apiclient.Configuration;
import com.flipdish.apiclient.Pair;
import com.flipdish.apiclient.ProgressRequestBody;
import com.flipdish.apiclient.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.flipdish.apiclient.model.EventSearchResult;
import org.threeten.bp.OffsetDateTime;
import com.flipdish.apiclient.model.RestApiErrorResult;
import com.flipdish.apiclient.model.RestApiEventSearchPaginationResult;
import com.flipdish.apiclient.model.RestApiForbiddenResult;
import com.flipdish.apiclient.model.RestApiUnauthorizedResult;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EventsApi {
    private ApiClient apiClient;

    public EventsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EventsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getCustomerEvents
     * @param customerId Customer identifier identifier (required)
     * @param limit The maximum elements to return (optional)
     * @param page The index of the page to return, starting by 1 (optional)
     * @param start Start date (optional)
     * @param end End date (optional)
     * @param orderId Events that have Order Id (optional)
     * @param storeId Events that have Store Id (optional)
     * @param storeGroupId Events that have Store Group Id (optional)
     * @param userId Events that have User Id (optional)
     * @param menuId Events that have Menu Id (optional)
     * @param campaignId Events that have Campaign Id (optional)
     * @param userEmail Events that have User Email (optional)
     * @param userName Events that have User Name (optional)
     * @param voucherCode Events that have voucher code (optional)
     * @param eventType Events that have event type\\s (optional)
     * @param flipdishEventId Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCustomerEventsCall(Integer customerId, Integer limit, Integer page, OffsetDateTime start, OffsetDateTime end, Integer orderId, Integer storeId, Integer storeGroupId, Integer userId, Integer menuId, Integer campaignId, String userEmail, String userName, String voucherCode, List<String> eventType, String flipdishEventId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/events/customer/{customerId}"
            .replaceAll("\\{" + "customerId" + "\\}", apiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start", start));
        if (end != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end", end));
        if (orderId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orderId", orderId));
        if (storeId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storeId", storeId));
        if (storeGroupId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storeGroupId", storeGroupId));
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userId", userId));
        if (menuId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("menuId", menuId));
        if (campaignId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("campaignId", campaignId));
        if (userEmail != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userEmail", userEmail));
        if (userName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userName", userName));
        if (voucherCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("voucherCode", voucherCode));
        if (eventType != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "eventType", eventType));
        if (flipdishEventId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("flipdishEventId", flipdishEventId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCustomerEventsValidateBeforeCall(Integer customerId, Integer limit, Integer page, OffsetDateTime start, OffsetDateTime end, Integer orderId, Integer storeId, Integer storeGroupId, Integer userId, Integer menuId, Integer campaignId, String userEmail, String userName, String voucherCode, List<String> eventType, String flipdishEventId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling getCustomerEvents(Async)");
        }
        

        com.squareup.okhttp.Call call = getCustomerEventsCall(customerId, limit, page, start, end, orderId, storeId, storeGroupId, userId, menuId, campaignId, userEmail, userName, voucherCode, eventType, flipdishEventId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get customer events  For technical reasons, the number of records returned is limited to 100.
     * 
     * @param customerId Customer identifier identifier (required)
     * @param limit The maximum elements to return (optional)
     * @param page The index of the page to return, starting by 1 (optional)
     * @param start Start date (optional)
     * @param end End date (optional)
     * @param orderId Events that have Order Id (optional)
     * @param storeId Events that have Store Id (optional)
     * @param storeGroupId Events that have Store Group Id (optional)
     * @param userId Events that have User Id (optional)
     * @param menuId Events that have Menu Id (optional)
     * @param campaignId Events that have Campaign Id (optional)
     * @param userEmail Events that have User Email (optional)
     * @param userName Events that have User Name (optional)
     * @param voucherCode Events that have voucher code (optional)
     * @param eventType Events that have event type\\s (optional)
     * @param flipdishEventId Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     * @return RestApiEventSearchPaginationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiEventSearchPaginationResult getCustomerEvents(Integer customerId, Integer limit, Integer page, OffsetDateTime start, OffsetDateTime end, Integer orderId, Integer storeId, Integer storeGroupId, Integer userId, Integer menuId, Integer campaignId, String userEmail, String userName, String voucherCode, List<String> eventType, String flipdishEventId) throws ApiException {
        ApiResponse<RestApiEventSearchPaginationResult> resp = getCustomerEventsWithHttpInfo(customerId, limit, page, start, end, orderId, storeId, storeGroupId, userId, menuId, campaignId, userEmail, userName, voucherCode, eventType, flipdishEventId);
        return resp.getData();
    }

    /**
     * Get customer events  For technical reasons, the number of records returned is limited to 100.
     * 
     * @param customerId Customer identifier identifier (required)
     * @param limit The maximum elements to return (optional)
     * @param page The index of the page to return, starting by 1 (optional)
     * @param start Start date (optional)
     * @param end End date (optional)
     * @param orderId Events that have Order Id (optional)
     * @param storeId Events that have Store Id (optional)
     * @param storeGroupId Events that have Store Group Id (optional)
     * @param userId Events that have User Id (optional)
     * @param menuId Events that have Menu Id (optional)
     * @param campaignId Events that have Campaign Id (optional)
     * @param userEmail Events that have User Email (optional)
     * @param userName Events that have User Name (optional)
     * @param voucherCode Events that have voucher code (optional)
     * @param eventType Events that have event type\\s (optional)
     * @param flipdishEventId Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     * @return ApiResponse&lt;RestApiEventSearchPaginationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiEventSearchPaginationResult> getCustomerEventsWithHttpInfo(Integer customerId, Integer limit, Integer page, OffsetDateTime start, OffsetDateTime end, Integer orderId, Integer storeId, Integer storeGroupId, Integer userId, Integer menuId, Integer campaignId, String userEmail, String userName, String voucherCode, List<String> eventType, String flipdishEventId) throws ApiException {
        com.squareup.okhttp.Call call = getCustomerEventsValidateBeforeCall(customerId, limit, page, start, end, orderId, storeId, storeGroupId, userId, menuId, campaignId, userEmail, userName, voucherCode, eventType, flipdishEventId, null, null);
        Type localVarReturnType = new TypeToken<RestApiEventSearchPaginationResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get customer events  For technical reasons, the number of records returned is limited to 100. (asynchronously)
     * 
     * @param customerId Customer identifier identifier (required)
     * @param limit The maximum elements to return (optional)
     * @param page The index of the page to return, starting by 1 (optional)
     * @param start Start date (optional)
     * @param end End date (optional)
     * @param orderId Events that have Order Id (optional)
     * @param storeId Events that have Store Id (optional)
     * @param storeGroupId Events that have Store Group Id (optional)
     * @param userId Events that have User Id (optional)
     * @param menuId Events that have Menu Id (optional)
     * @param campaignId Events that have Campaign Id (optional)
     * @param userEmail Events that have User Email (optional)
     * @param userName Events that have User Name (optional)
     * @param voucherCode Events that have voucher code (optional)
     * @param eventType Events that have event type\\s (optional)
     * @param flipdishEventId Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCustomerEventsAsync(Integer customerId, Integer limit, Integer page, OffsetDateTime start, OffsetDateTime end, Integer orderId, Integer storeId, Integer storeGroupId, Integer userId, Integer menuId, Integer campaignId, String userEmail, String userName, String voucherCode, List<String> eventType, String flipdishEventId, final ApiCallback<RestApiEventSearchPaginationResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCustomerEventsValidateBeforeCall(customerId, limit, page, start, end, orderId, storeId, storeGroupId, userId, menuId, campaignId, userEmail, userName, voucherCode, eventType, flipdishEventId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiEventSearchPaginationResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEvents
     * @param whiteLabelId White Label Id (optional)
     * @param customerId Customer Id (optional)
     * @param limit The maximum elements to return (optional)
     * @param page The index of the page to return, starting by 1 (optional)
     * @param start Start date (optional)
     * @param end End date (optional)
     * @param orderId Events that have Order Id (optional)
     * @param storeId Events that have Store Id (optional)
     * @param storeGroupId Events that have Store Group Id (optional)
     * @param userId Events that have User Id (optional)
     * @param menuId Events that have Menu Id (optional)
     * @param campaignId Events that have Campaign Id (optional)
     * @param userEmail Events that have User Email (optional)
     * @param userName Events that have User Name (optional)
     * @param voucherCode Events that have voucher code (optional)
     * @param eventType Events that have event type\\s (optional)
     * @param flipdishEventId Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEventsCall(Integer whiteLabelId, Integer customerId, Integer limit, Integer page, OffsetDateTime start, OffsetDateTime end, Integer orderId, Integer storeId, Integer storeGroupId, Integer userId, Integer menuId, Integer campaignId, String userEmail, String userName, String voucherCode, List<String> eventType, String flipdishEventId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/events";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (whiteLabelId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("whiteLabelId", whiteLabelId));
        if (customerId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("customerId", customerId));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start", start));
        if (end != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end", end));
        if (orderId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orderId", orderId));
        if (storeId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storeId", storeId));
        if (storeGroupId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storeGroupId", storeGroupId));
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userId", userId));
        if (menuId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("menuId", menuId));
        if (campaignId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("campaignId", campaignId));
        if (userEmail != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userEmail", userEmail));
        if (userName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userName", userName));
        if (voucherCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("voucherCode", voucherCode));
        if (eventType != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "eventType", eventType));
        if (flipdishEventId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("flipdishEventId", flipdishEventId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEventsValidateBeforeCall(Integer whiteLabelId, Integer customerId, Integer limit, Integer page, OffsetDateTime start, OffsetDateTime end, Integer orderId, Integer storeId, Integer storeGroupId, Integer userId, Integer menuId, Integer campaignId, String userEmail, String userName, String voucherCode, List<String> eventType, String flipdishEventId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getEventsCall(whiteLabelId, customerId, limit, page, start, end, orderId, storeId, storeGroupId, userId, menuId, campaignId, userEmail, userName, voucherCode, eventType, flipdishEventId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get events  For technical reasons, the number of records returned is limited to 100.
     * 
     * @param whiteLabelId White Label Id (optional)
     * @param customerId Customer Id (optional)
     * @param limit The maximum elements to return (optional)
     * @param page The index of the page to return, starting by 1 (optional)
     * @param start Start date (optional)
     * @param end End date (optional)
     * @param orderId Events that have Order Id (optional)
     * @param storeId Events that have Store Id (optional)
     * @param storeGroupId Events that have Store Group Id (optional)
     * @param userId Events that have User Id (optional)
     * @param menuId Events that have Menu Id (optional)
     * @param campaignId Events that have Campaign Id (optional)
     * @param userEmail Events that have User Email (optional)
     * @param userName Events that have User Name (optional)
     * @param voucherCode Events that have voucher code (optional)
     * @param eventType Events that have event type\\s (optional)
     * @param flipdishEventId Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     * @return RestApiEventSearchPaginationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiEventSearchPaginationResult getEvents(Integer whiteLabelId, Integer customerId, Integer limit, Integer page, OffsetDateTime start, OffsetDateTime end, Integer orderId, Integer storeId, Integer storeGroupId, Integer userId, Integer menuId, Integer campaignId, String userEmail, String userName, String voucherCode, List<String> eventType, String flipdishEventId) throws ApiException {
        ApiResponse<RestApiEventSearchPaginationResult> resp = getEventsWithHttpInfo(whiteLabelId, customerId, limit, page, start, end, orderId, storeId, storeGroupId, userId, menuId, campaignId, userEmail, userName, voucherCode, eventType, flipdishEventId);
        return resp.getData();
    }

    /**
     * Get events  For technical reasons, the number of records returned is limited to 100.
     * 
     * @param whiteLabelId White Label Id (optional)
     * @param customerId Customer Id (optional)
     * @param limit The maximum elements to return (optional)
     * @param page The index of the page to return, starting by 1 (optional)
     * @param start Start date (optional)
     * @param end End date (optional)
     * @param orderId Events that have Order Id (optional)
     * @param storeId Events that have Store Id (optional)
     * @param storeGroupId Events that have Store Group Id (optional)
     * @param userId Events that have User Id (optional)
     * @param menuId Events that have Menu Id (optional)
     * @param campaignId Events that have Campaign Id (optional)
     * @param userEmail Events that have User Email (optional)
     * @param userName Events that have User Name (optional)
     * @param voucherCode Events that have voucher code (optional)
     * @param eventType Events that have event type\\s (optional)
     * @param flipdishEventId Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     * @return ApiResponse&lt;RestApiEventSearchPaginationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiEventSearchPaginationResult> getEventsWithHttpInfo(Integer whiteLabelId, Integer customerId, Integer limit, Integer page, OffsetDateTime start, OffsetDateTime end, Integer orderId, Integer storeId, Integer storeGroupId, Integer userId, Integer menuId, Integer campaignId, String userEmail, String userName, String voucherCode, List<String> eventType, String flipdishEventId) throws ApiException {
        com.squareup.okhttp.Call call = getEventsValidateBeforeCall(whiteLabelId, customerId, limit, page, start, end, orderId, storeId, storeGroupId, userId, menuId, campaignId, userEmail, userName, voucherCode, eventType, flipdishEventId, null, null);
        Type localVarReturnType = new TypeToken<RestApiEventSearchPaginationResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get events  For technical reasons, the number of records returned is limited to 100. (asynchronously)
     * 
     * @param whiteLabelId White Label Id (optional)
     * @param customerId Customer Id (optional)
     * @param limit The maximum elements to return (optional)
     * @param page The index of the page to return, starting by 1 (optional)
     * @param start Start date (optional)
     * @param end End date (optional)
     * @param orderId Events that have Order Id (optional)
     * @param storeId Events that have Store Id (optional)
     * @param storeGroupId Events that have Store Group Id (optional)
     * @param userId Events that have User Id (optional)
     * @param menuId Events that have Menu Id (optional)
     * @param campaignId Events that have Campaign Id (optional)
     * @param userEmail Events that have User Email (optional)
     * @param userName Events that have User Name (optional)
     * @param voucherCode Events that have voucher code (optional)
     * @param eventType Events that have event type\\s (optional)
     * @param flipdishEventId Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEventsAsync(Integer whiteLabelId, Integer customerId, Integer limit, Integer page, OffsetDateTime start, OffsetDateTime end, Integer orderId, Integer storeId, Integer storeGroupId, Integer userId, Integer menuId, Integer campaignId, String userEmail, String userName, String voucherCode, List<String> eventType, String flipdishEventId, final ApiCallback<RestApiEventSearchPaginationResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEventsValidateBeforeCall(whiteLabelId, customerId, limit, page, start, end, orderId, storeId, storeGroupId, userId, menuId, campaignId, userEmail, userName, voucherCode, eventType, flipdishEventId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiEventSearchPaginationResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEventsById
     * @param eventId Event identifier (Guid) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEventsByIdCall(UUID eventId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/events/{eventId}"
            .replaceAll("\\{" + "eventId" + "\\}", apiClient.escapeString(eventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEventsByIdValidateBeforeCall(UUID eventId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling getEventsById(Async)");
        }
        

        com.squareup.okhttp.Call call = getEventsByIdCall(eventId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get event by Id  For technical reasons, the number of records returned is limited to 100.
     * 
     * @param eventId Event identifier (Guid) (required)
     * @return EventSearchResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EventSearchResult getEventsById(UUID eventId) throws ApiException {
        ApiResponse<EventSearchResult> resp = getEventsByIdWithHttpInfo(eventId);
        return resp.getData();
    }

    /**
     * Get event by Id  For technical reasons, the number of records returned is limited to 100.
     * 
     * @param eventId Event identifier (Guid) (required)
     * @return ApiResponse&lt;EventSearchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EventSearchResult> getEventsByIdWithHttpInfo(UUID eventId) throws ApiException {
        com.squareup.okhttp.Call call = getEventsByIdValidateBeforeCall(eventId, null, null);
        Type localVarReturnType = new TypeToken<EventSearchResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get event by Id  For technical reasons, the number of records returned is limited to 100. (asynchronously)
     * 
     * @param eventId Event identifier (Guid) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEventsByIdAsync(UUID eventId, final ApiCallback<EventSearchResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEventsByIdValidateBeforeCall(eventId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EventSearchResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getMenuEvents
     * @param menuId Menu Identifier (required)
     * @param limit The maximum elements to return (optional)
     * @param page The index of the page to return, starting by 1 (optional)
     * @param start Start date (optional)
     * @param end End date (optional)
     * @param orderId Events that have Order Id (optional)
     * @param storeId Events that have Store Id (optional)
     * @param storeGroupId Events that have Store Group Id (optional)
     * @param userId Events that have User Id (optional)
     * @param menuId2 Events that have Menu Id (optional)
     * @param campaignId Events that have Campaign Id (optional)
     * @param userEmail Events that have User Email (optional)
     * @param userName Events that have User Name (optional)
     * @param voucherCode Events that have voucher code (optional)
     * @param eventType Events that have event type\\s (optional)
     * @param flipdishEventId Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMenuEventsCall(Integer menuId, Integer limit, Integer page, OffsetDateTime start, OffsetDateTime end, Integer orderId, Integer storeId, Integer storeGroupId, Integer userId, Integer menuId2, Integer campaignId, String userEmail, String userName, String voucherCode, List<String> eventType, String flipdishEventId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/events/menu/{menuId}"
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start", start));
        if (end != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end", end));
        if (orderId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orderId", orderId));
        if (storeId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storeId", storeId));
        if (storeGroupId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storeGroupId", storeGroupId));
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userId", userId));
        if (menuId2 != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("menuId", menuId2));
        if (campaignId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("campaignId", campaignId));
        if (userEmail != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userEmail", userEmail));
        if (userName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userName", userName));
        if (voucherCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("voucherCode", voucherCode));
        if (eventType != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "eventType", eventType));
        if (flipdishEventId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("flipdishEventId", flipdishEventId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMenuEventsValidateBeforeCall(Integer menuId, Integer limit, Integer page, OffsetDateTime start, OffsetDateTime end, Integer orderId, Integer storeId, Integer storeGroupId, Integer userId, Integer menuId2, Integer campaignId, String userEmail, String userName, String voucherCode, List<String> eventType, String flipdishEventId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling getMenuEvents(Async)");
        }
        

        com.squareup.okhttp.Call call = getMenuEventsCall(menuId, limit, page, start, end, orderId, storeId, storeGroupId, userId, menuId2, campaignId, userEmail, userName, voucherCode, eventType, flipdishEventId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get menu events  For technical reasons, the number of records returned is limited to 100.
     * 
     * @param menuId Menu Identifier (required)
     * @param limit The maximum elements to return (optional)
     * @param page The index of the page to return, starting by 1 (optional)
     * @param start Start date (optional)
     * @param end End date (optional)
     * @param orderId Events that have Order Id (optional)
     * @param storeId Events that have Store Id (optional)
     * @param storeGroupId Events that have Store Group Id (optional)
     * @param userId Events that have User Id (optional)
     * @param menuId2 Events that have Menu Id (optional)
     * @param campaignId Events that have Campaign Id (optional)
     * @param userEmail Events that have User Email (optional)
     * @param userName Events that have User Name (optional)
     * @param voucherCode Events that have voucher code (optional)
     * @param eventType Events that have event type\\s (optional)
     * @param flipdishEventId Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     * @return RestApiEventSearchPaginationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiEventSearchPaginationResult getMenuEvents(Integer menuId, Integer limit, Integer page, OffsetDateTime start, OffsetDateTime end, Integer orderId, Integer storeId, Integer storeGroupId, Integer userId, Integer menuId2, Integer campaignId, String userEmail, String userName, String voucherCode, List<String> eventType, String flipdishEventId) throws ApiException {
        ApiResponse<RestApiEventSearchPaginationResult> resp = getMenuEventsWithHttpInfo(menuId, limit, page, start, end, orderId, storeId, storeGroupId, userId, menuId2, campaignId, userEmail, userName, voucherCode, eventType, flipdishEventId);
        return resp.getData();
    }

    /**
     * Get menu events  For technical reasons, the number of records returned is limited to 100.
     * 
     * @param menuId Menu Identifier (required)
     * @param limit The maximum elements to return (optional)
     * @param page The index of the page to return, starting by 1 (optional)
     * @param start Start date (optional)
     * @param end End date (optional)
     * @param orderId Events that have Order Id (optional)
     * @param storeId Events that have Store Id (optional)
     * @param storeGroupId Events that have Store Group Id (optional)
     * @param userId Events that have User Id (optional)
     * @param menuId2 Events that have Menu Id (optional)
     * @param campaignId Events that have Campaign Id (optional)
     * @param userEmail Events that have User Email (optional)
     * @param userName Events that have User Name (optional)
     * @param voucherCode Events that have voucher code (optional)
     * @param eventType Events that have event type\\s (optional)
     * @param flipdishEventId Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     * @return ApiResponse&lt;RestApiEventSearchPaginationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiEventSearchPaginationResult> getMenuEventsWithHttpInfo(Integer menuId, Integer limit, Integer page, OffsetDateTime start, OffsetDateTime end, Integer orderId, Integer storeId, Integer storeGroupId, Integer userId, Integer menuId2, Integer campaignId, String userEmail, String userName, String voucherCode, List<String> eventType, String flipdishEventId) throws ApiException {
        com.squareup.okhttp.Call call = getMenuEventsValidateBeforeCall(menuId, limit, page, start, end, orderId, storeId, storeGroupId, userId, menuId2, campaignId, userEmail, userName, voucherCode, eventType, flipdishEventId, null, null);
        Type localVarReturnType = new TypeToken<RestApiEventSearchPaginationResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get menu events  For technical reasons, the number of records returned is limited to 100. (asynchronously)
     * 
     * @param menuId Menu Identifier (required)
     * @param limit The maximum elements to return (optional)
     * @param page The index of the page to return, starting by 1 (optional)
     * @param start Start date (optional)
     * @param end End date (optional)
     * @param orderId Events that have Order Id (optional)
     * @param storeId Events that have Store Id (optional)
     * @param storeGroupId Events that have Store Group Id (optional)
     * @param userId Events that have User Id (optional)
     * @param menuId2 Events that have Menu Id (optional)
     * @param campaignId Events that have Campaign Id (optional)
     * @param userEmail Events that have User Email (optional)
     * @param userName Events that have User Name (optional)
     * @param voucherCode Events that have voucher code (optional)
     * @param eventType Events that have event type\\s (optional)
     * @param flipdishEventId Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMenuEventsAsync(Integer menuId, Integer limit, Integer page, OffsetDateTime start, OffsetDateTime end, Integer orderId, Integer storeId, Integer storeGroupId, Integer userId, Integer menuId2, Integer campaignId, String userEmail, String userName, String voucherCode, List<String> eventType, String flipdishEventId, final ApiCallback<RestApiEventSearchPaginationResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMenuEventsValidateBeforeCall(menuId, limit, page, start, end, orderId, storeId, storeGroupId, userId, menuId2, campaignId, userEmail, userName, voucherCode, eventType, flipdishEventId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiEventSearchPaginationResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOrderEvents
     * @param orderId Order identifier (required)
     * @param limit The maximum elements to return (optional)
     * @param page The index of the page to return, starting by 1 (optional)
     * @param start Start date (optional)
     * @param end End date (optional)
     * @param orderId2 Events that have Order Id (optional)
     * @param storeId Events that have Store Id (optional)
     * @param storeGroupId Events that have Store Group Id (optional)
     * @param userId Events that have User Id (optional)
     * @param menuId Events that have Menu Id (optional)
     * @param campaignId Events that have Campaign Id (optional)
     * @param userEmail Events that have User Email (optional)
     * @param userName Events that have User Name (optional)
     * @param voucherCode Events that have voucher code (optional)
     * @param eventType Events that have event type\\s (optional)
     * @param flipdishEventId Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOrderEventsCall(Integer orderId, Integer limit, Integer page, OffsetDateTime start, OffsetDateTime end, Integer orderId2, Integer storeId, Integer storeGroupId, Integer userId, Integer menuId, Integer campaignId, String userEmail, String userName, String voucherCode, List<String> eventType, String flipdishEventId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/events/order/{orderId}"
            .replaceAll("\\{" + "orderId" + "\\}", apiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start", start));
        if (end != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end", end));
        if (orderId2 != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orderId", orderId2));
        if (storeId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storeId", storeId));
        if (storeGroupId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storeGroupId", storeGroupId));
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userId", userId));
        if (menuId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("menuId", menuId));
        if (campaignId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("campaignId", campaignId));
        if (userEmail != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userEmail", userEmail));
        if (userName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userName", userName));
        if (voucherCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("voucherCode", voucherCode));
        if (eventType != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "eventType", eventType));
        if (flipdishEventId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("flipdishEventId", flipdishEventId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOrderEventsValidateBeforeCall(Integer orderId, Integer limit, Integer page, OffsetDateTime start, OffsetDateTime end, Integer orderId2, Integer storeId, Integer storeGroupId, Integer userId, Integer menuId, Integer campaignId, String userEmail, String userName, String voucherCode, List<String> eventType, String flipdishEventId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling getOrderEvents(Async)");
        }
        

        com.squareup.okhttp.Call call = getOrderEventsCall(orderId, limit, page, start, end, orderId2, storeId, storeGroupId, userId, menuId, campaignId, userEmail, userName, voucherCode, eventType, flipdishEventId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get order events  For technical reasons, the number of records returned is limited to 100.
     * 
     * @param orderId Order identifier (required)
     * @param limit The maximum elements to return (optional)
     * @param page The index of the page to return, starting by 1 (optional)
     * @param start Start date (optional)
     * @param end End date (optional)
     * @param orderId2 Events that have Order Id (optional)
     * @param storeId Events that have Store Id (optional)
     * @param storeGroupId Events that have Store Group Id (optional)
     * @param userId Events that have User Id (optional)
     * @param menuId Events that have Menu Id (optional)
     * @param campaignId Events that have Campaign Id (optional)
     * @param userEmail Events that have User Email (optional)
     * @param userName Events that have User Name (optional)
     * @param voucherCode Events that have voucher code (optional)
     * @param eventType Events that have event type\\s (optional)
     * @param flipdishEventId Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     * @return RestApiEventSearchPaginationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiEventSearchPaginationResult getOrderEvents(Integer orderId, Integer limit, Integer page, OffsetDateTime start, OffsetDateTime end, Integer orderId2, Integer storeId, Integer storeGroupId, Integer userId, Integer menuId, Integer campaignId, String userEmail, String userName, String voucherCode, List<String> eventType, String flipdishEventId) throws ApiException {
        ApiResponse<RestApiEventSearchPaginationResult> resp = getOrderEventsWithHttpInfo(orderId, limit, page, start, end, orderId2, storeId, storeGroupId, userId, menuId, campaignId, userEmail, userName, voucherCode, eventType, flipdishEventId);
        return resp.getData();
    }

    /**
     * Get order events  For technical reasons, the number of records returned is limited to 100.
     * 
     * @param orderId Order identifier (required)
     * @param limit The maximum elements to return (optional)
     * @param page The index of the page to return, starting by 1 (optional)
     * @param start Start date (optional)
     * @param end End date (optional)
     * @param orderId2 Events that have Order Id (optional)
     * @param storeId Events that have Store Id (optional)
     * @param storeGroupId Events that have Store Group Id (optional)
     * @param userId Events that have User Id (optional)
     * @param menuId Events that have Menu Id (optional)
     * @param campaignId Events that have Campaign Id (optional)
     * @param userEmail Events that have User Email (optional)
     * @param userName Events that have User Name (optional)
     * @param voucherCode Events that have voucher code (optional)
     * @param eventType Events that have event type\\s (optional)
     * @param flipdishEventId Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     * @return ApiResponse&lt;RestApiEventSearchPaginationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiEventSearchPaginationResult> getOrderEventsWithHttpInfo(Integer orderId, Integer limit, Integer page, OffsetDateTime start, OffsetDateTime end, Integer orderId2, Integer storeId, Integer storeGroupId, Integer userId, Integer menuId, Integer campaignId, String userEmail, String userName, String voucherCode, List<String> eventType, String flipdishEventId) throws ApiException {
        com.squareup.okhttp.Call call = getOrderEventsValidateBeforeCall(orderId, limit, page, start, end, orderId2, storeId, storeGroupId, userId, menuId, campaignId, userEmail, userName, voucherCode, eventType, flipdishEventId, null, null);
        Type localVarReturnType = new TypeToken<RestApiEventSearchPaginationResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get order events  For technical reasons, the number of records returned is limited to 100. (asynchronously)
     * 
     * @param orderId Order identifier (required)
     * @param limit The maximum elements to return (optional)
     * @param page The index of the page to return, starting by 1 (optional)
     * @param start Start date (optional)
     * @param end End date (optional)
     * @param orderId2 Events that have Order Id (optional)
     * @param storeId Events that have Store Id (optional)
     * @param storeGroupId Events that have Store Group Id (optional)
     * @param userId Events that have User Id (optional)
     * @param menuId Events that have Menu Id (optional)
     * @param campaignId Events that have Campaign Id (optional)
     * @param userEmail Events that have User Email (optional)
     * @param userName Events that have User Name (optional)
     * @param voucherCode Events that have voucher code (optional)
     * @param eventType Events that have event type\\s (optional)
     * @param flipdishEventId Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOrderEventsAsync(Integer orderId, Integer limit, Integer page, OffsetDateTime start, OffsetDateTime end, Integer orderId2, Integer storeId, Integer storeGroupId, Integer userId, Integer menuId, Integer campaignId, String userEmail, String userName, String voucherCode, List<String> eventType, String flipdishEventId, final ApiCallback<RestApiEventSearchPaginationResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOrderEventsValidateBeforeCall(orderId, limit, page, start, end, orderId2, storeId, storeGroupId, userId, menuId, campaignId, userEmail, userName, voucherCode, eventType, flipdishEventId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiEventSearchPaginationResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOrderEventsByCustomer
     * @param customerId Customer identifier (required)
     * @param limit The maximum elements to return (optional)
     * @param page The index of the page to return, starting by 1 (optional)
     * @param start Start date (optional)
     * @param end End date (optional)
     * @param orderId Events that have Order Id (optional)
     * @param storeId Events that have Store Id (optional)
     * @param storeGroupId Events that have Store Group Id (optional)
     * @param userId Events that have User Id (optional)
     * @param menuId Events that have Menu Id (optional)
     * @param campaignId Events that have Campaign Id (optional)
     * @param userEmail Events that have User Email (optional)
     * @param userName Events that have User Name (optional)
     * @param voucherCode Events that have voucher code (optional)
     * @param eventType Events that have event type\\s (optional)
     * @param flipdishEventId Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOrderEventsByCustomerCall(Integer customerId, Integer limit, Integer page, OffsetDateTime start, OffsetDateTime end, Integer orderId, Integer storeId, Integer storeGroupId, Integer userId, Integer menuId, Integer campaignId, String userEmail, String userName, String voucherCode, List<String> eventType, String flipdishEventId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/events/order";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (customerId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("customerId", customerId));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start", start));
        if (end != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end", end));
        if (orderId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orderId", orderId));
        if (storeId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storeId", storeId));
        if (storeGroupId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storeGroupId", storeGroupId));
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userId", userId));
        if (menuId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("menuId", menuId));
        if (campaignId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("campaignId", campaignId));
        if (userEmail != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userEmail", userEmail));
        if (userName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userName", userName));
        if (voucherCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("voucherCode", voucherCode));
        if (eventType != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "eventType", eventType));
        if (flipdishEventId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("flipdishEventId", flipdishEventId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOrderEventsByCustomerValidateBeforeCall(Integer customerId, Integer limit, Integer page, OffsetDateTime start, OffsetDateTime end, Integer orderId, Integer storeId, Integer storeGroupId, Integer userId, Integer menuId, Integer campaignId, String userEmail, String userName, String voucherCode, List<String> eventType, String flipdishEventId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling getOrderEventsByCustomer(Async)");
        }
        

        com.squareup.okhttp.Call call = getOrderEventsByCustomerCall(customerId, limit, page, start, end, orderId, storeId, storeGroupId, userId, menuId, campaignId, userEmail, userName, voucherCode, eventType, flipdishEventId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get order events by customer  For technical reasons, the number of records returned is limited to 100.
     * 
     * @param customerId Customer identifier (required)
     * @param limit The maximum elements to return (optional)
     * @param page The index of the page to return, starting by 1 (optional)
     * @param start Start date (optional)
     * @param end End date (optional)
     * @param orderId Events that have Order Id (optional)
     * @param storeId Events that have Store Id (optional)
     * @param storeGroupId Events that have Store Group Id (optional)
     * @param userId Events that have User Id (optional)
     * @param menuId Events that have Menu Id (optional)
     * @param campaignId Events that have Campaign Id (optional)
     * @param userEmail Events that have User Email (optional)
     * @param userName Events that have User Name (optional)
     * @param voucherCode Events that have voucher code (optional)
     * @param eventType Events that have event type\\s (optional)
     * @param flipdishEventId Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     * @return RestApiEventSearchPaginationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiEventSearchPaginationResult getOrderEventsByCustomer(Integer customerId, Integer limit, Integer page, OffsetDateTime start, OffsetDateTime end, Integer orderId, Integer storeId, Integer storeGroupId, Integer userId, Integer menuId, Integer campaignId, String userEmail, String userName, String voucherCode, List<String> eventType, String flipdishEventId) throws ApiException {
        ApiResponse<RestApiEventSearchPaginationResult> resp = getOrderEventsByCustomerWithHttpInfo(customerId, limit, page, start, end, orderId, storeId, storeGroupId, userId, menuId, campaignId, userEmail, userName, voucherCode, eventType, flipdishEventId);
        return resp.getData();
    }

    /**
     * Get order events by customer  For technical reasons, the number of records returned is limited to 100.
     * 
     * @param customerId Customer identifier (required)
     * @param limit The maximum elements to return (optional)
     * @param page The index of the page to return, starting by 1 (optional)
     * @param start Start date (optional)
     * @param end End date (optional)
     * @param orderId Events that have Order Id (optional)
     * @param storeId Events that have Store Id (optional)
     * @param storeGroupId Events that have Store Group Id (optional)
     * @param userId Events that have User Id (optional)
     * @param menuId Events that have Menu Id (optional)
     * @param campaignId Events that have Campaign Id (optional)
     * @param userEmail Events that have User Email (optional)
     * @param userName Events that have User Name (optional)
     * @param voucherCode Events that have voucher code (optional)
     * @param eventType Events that have event type\\s (optional)
     * @param flipdishEventId Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     * @return ApiResponse&lt;RestApiEventSearchPaginationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiEventSearchPaginationResult> getOrderEventsByCustomerWithHttpInfo(Integer customerId, Integer limit, Integer page, OffsetDateTime start, OffsetDateTime end, Integer orderId, Integer storeId, Integer storeGroupId, Integer userId, Integer menuId, Integer campaignId, String userEmail, String userName, String voucherCode, List<String> eventType, String flipdishEventId) throws ApiException {
        com.squareup.okhttp.Call call = getOrderEventsByCustomerValidateBeforeCall(customerId, limit, page, start, end, orderId, storeId, storeGroupId, userId, menuId, campaignId, userEmail, userName, voucherCode, eventType, flipdishEventId, null, null);
        Type localVarReturnType = new TypeToken<RestApiEventSearchPaginationResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get order events by customer  For technical reasons, the number of records returned is limited to 100. (asynchronously)
     * 
     * @param customerId Customer identifier (required)
     * @param limit The maximum elements to return (optional)
     * @param page The index of the page to return, starting by 1 (optional)
     * @param start Start date (optional)
     * @param end End date (optional)
     * @param orderId Events that have Order Id (optional)
     * @param storeId Events that have Store Id (optional)
     * @param storeGroupId Events that have Store Group Id (optional)
     * @param userId Events that have User Id (optional)
     * @param menuId Events that have Menu Id (optional)
     * @param campaignId Events that have Campaign Id (optional)
     * @param userEmail Events that have User Email (optional)
     * @param userName Events that have User Name (optional)
     * @param voucherCode Events that have voucher code (optional)
     * @param eventType Events that have event type\\s (optional)
     * @param flipdishEventId Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOrderEventsByCustomerAsync(Integer customerId, Integer limit, Integer page, OffsetDateTime start, OffsetDateTime end, Integer orderId, Integer storeId, Integer storeGroupId, Integer userId, Integer menuId, Integer campaignId, String userEmail, String userName, String voucherCode, List<String> eventType, String flipdishEventId, final ApiCallback<RestApiEventSearchPaginationResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOrderEventsByCustomerValidateBeforeCall(customerId, limit, page, start, end, orderId, storeId, storeGroupId, userId, menuId, campaignId, userEmail, userName, voucherCode, eventType, flipdishEventId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiEventSearchPaginationResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getStoreEvents
     * @param storeId Id of the store (required)
     * @param limit The maximum elements to return (optional)
     * @param page The index of the page to return, starting by 1 (optional)
     * @param start Start date (optional)
     * @param end End date (optional)
     * @param orderId Events that have Order Id (optional)
     * @param storeId2 Events that have Store Id (optional)
     * @param storeGroupId Events that have Store Group Id (optional)
     * @param userId Events that have User Id (optional)
     * @param menuId Events that have Menu Id (optional)
     * @param campaignId Events that have Campaign Id (optional)
     * @param userEmail Events that have User Email (optional)
     * @param userName Events that have User Name (optional)
     * @param voucherCode Events that have voucher code (optional)
     * @param eventType Events that have event type\\s (optional)
     * @param flipdishEventId Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getStoreEventsCall(Integer storeId, Integer limit, Integer page, OffsetDateTime start, OffsetDateTime end, Integer orderId, Integer storeId2, Integer storeGroupId, Integer userId, Integer menuId, Integer campaignId, String userEmail, String userName, String voucherCode, List<String> eventType, String flipdishEventId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/events/store/{storeId}"
            .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start", start));
        if (end != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end", end));
        if (orderId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orderId", orderId));
        if (storeId2 != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storeId", storeId2));
        if (storeGroupId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storeGroupId", storeGroupId));
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userId", userId));
        if (menuId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("menuId", menuId));
        if (campaignId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("campaignId", campaignId));
        if (userEmail != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userEmail", userEmail));
        if (userName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userName", userName));
        if (voucherCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("voucherCode", voucherCode));
        if (eventType != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "eventType", eventType));
        if (flipdishEventId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("flipdishEventId", flipdishEventId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStoreEventsValidateBeforeCall(Integer storeId, Integer limit, Integer page, OffsetDateTime start, OffsetDateTime end, Integer orderId, Integer storeId2, Integer storeGroupId, Integer userId, Integer menuId, Integer campaignId, String userEmail, String userName, String voucherCode, List<String> eventType, String flipdishEventId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling getStoreEvents(Async)");
        }
        

        com.squareup.okhttp.Call call = getStoreEventsCall(storeId, limit, page, start, end, orderId, storeId2, storeGroupId, userId, menuId, campaignId, userEmail, userName, voucherCode, eventType, flipdishEventId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get store events  For technical reasons, the number of records returned is limited to 100.
     * 
     * @param storeId Id of the store (required)
     * @param limit The maximum elements to return (optional)
     * @param page The index of the page to return, starting by 1 (optional)
     * @param start Start date (optional)
     * @param end End date (optional)
     * @param orderId Events that have Order Id (optional)
     * @param storeId2 Events that have Store Id (optional)
     * @param storeGroupId Events that have Store Group Id (optional)
     * @param userId Events that have User Id (optional)
     * @param menuId Events that have Menu Id (optional)
     * @param campaignId Events that have Campaign Id (optional)
     * @param userEmail Events that have User Email (optional)
     * @param userName Events that have User Name (optional)
     * @param voucherCode Events that have voucher code (optional)
     * @param eventType Events that have event type\\s (optional)
     * @param flipdishEventId Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     * @return RestApiEventSearchPaginationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiEventSearchPaginationResult getStoreEvents(Integer storeId, Integer limit, Integer page, OffsetDateTime start, OffsetDateTime end, Integer orderId, Integer storeId2, Integer storeGroupId, Integer userId, Integer menuId, Integer campaignId, String userEmail, String userName, String voucherCode, List<String> eventType, String flipdishEventId) throws ApiException {
        ApiResponse<RestApiEventSearchPaginationResult> resp = getStoreEventsWithHttpInfo(storeId, limit, page, start, end, orderId, storeId2, storeGroupId, userId, menuId, campaignId, userEmail, userName, voucherCode, eventType, flipdishEventId);
        return resp.getData();
    }

    /**
     * Get store events  For technical reasons, the number of records returned is limited to 100.
     * 
     * @param storeId Id of the store (required)
     * @param limit The maximum elements to return (optional)
     * @param page The index of the page to return, starting by 1 (optional)
     * @param start Start date (optional)
     * @param end End date (optional)
     * @param orderId Events that have Order Id (optional)
     * @param storeId2 Events that have Store Id (optional)
     * @param storeGroupId Events that have Store Group Id (optional)
     * @param userId Events that have User Id (optional)
     * @param menuId Events that have Menu Id (optional)
     * @param campaignId Events that have Campaign Id (optional)
     * @param userEmail Events that have User Email (optional)
     * @param userName Events that have User Name (optional)
     * @param voucherCode Events that have voucher code (optional)
     * @param eventType Events that have event type\\s (optional)
     * @param flipdishEventId Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     * @return ApiResponse&lt;RestApiEventSearchPaginationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiEventSearchPaginationResult> getStoreEventsWithHttpInfo(Integer storeId, Integer limit, Integer page, OffsetDateTime start, OffsetDateTime end, Integer orderId, Integer storeId2, Integer storeGroupId, Integer userId, Integer menuId, Integer campaignId, String userEmail, String userName, String voucherCode, List<String> eventType, String flipdishEventId) throws ApiException {
        com.squareup.okhttp.Call call = getStoreEventsValidateBeforeCall(storeId, limit, page, start, end, orderId, storeId2, storeGroupId, userId, menuId, campaignId, userEmail, userName, voucherCode, eventType, flipdishEventId, null, null);
        Type localVarReturnType = new TypeToken<RestApiEventSearchPaginationResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get store events  For technical reasons, the number of records returned is limited to 100. (asynchronously)
     * 
     * @param storeId Id of the store (required)
     * @param limit The maximum elements to return (optional)
     * @param page The index of the page to return, starting by 1 (optional)
     * @param start Start date (optional)
     * @param end End date (optional)
     * @param orderId Events that have Order Id (optional)
     * @param storeId2 Events that have Store Id (optional)
     * @param storeGroupId Events that have Store Group Id (optional)
     * @param userId Events that have User Id (optional)
     * @param menuId Events that have Menu Id (optional)
     * @param campaignId Events that have Campaign Id (optional)
     * @param userEmail Events that have User Email (optional)
     * @param userName Events that have User Name (optional)
     * @param voucherCode Events that have voucher code (optional)
     * @param eventType Events that have event type\\s (optional)
     * @param flipdishEventId Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStoreEventsAsync(Integer storeId, Integer limit, Integer page, OffsetDateTime start, OffsetDateTime end, Integer orderId, Integer storeId2, Integer storeGroupId, Integer userId, Integer menuId, Integer campaignId, String userEmail, String userName, String voucherCode, List<String> eventType, String flipdishEventId, final ApiCallback<RestApiEventSearchPaginationResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStoreEventsValidateBeforeCall(storeId, limit, page, start, end, orderId, storeId2, storeGroupId, userId, menuId, campaignId, userEmail, userName, voucherCode, eventType, flipdishEventId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiEventSearchPaginationResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getUserEvents
     * @param userId User identifier (required)
     * @param limit The maximum elements to return (optional)
     * @param page The index of the page to return, starting by 1 (optional)
     * @param start Start date (optional)
     * @param end End date (optional)
     * @param orderId Events that have Order Id (optional)
     * @param storeId Events that have Store Id (optional)
     * @param storeGroupId Events that have Store Group Id (optional)
     * @param userId2 Events that have User Id (optional)
     * @param menuId Events that have Menu Id (optional)
     * @param campaignId Events that have Campaign Id (optional)
     * @param userEmail Events that have User Email (optional)
     * @param userName Events that have User Name (optional)
     * @param voucherCode Events that have voucher code (optional)
     * @param eventType Events that have event type\\s (optional)
     * @param flipdishEventId Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getUserEventsCall(Integer userId, Integer limit, Integer page, OffsetDateTime start, OffsetDateTime end, Integer orderId, Integer storeId, Integer storeGroupId, Integer userId2, Integer menuId, Integer campaignId, String userEmail, String userName, String voucherCode, List<String> eventType, String flipdishEventId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/events/user/{userId}"
            .replaceAll("\\{" + "userId" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start", start));
        if (end != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end", end));
        if (orderId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orderId", orderId));
        if (storeId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storeId", storeId));
        if (storeGroupId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storeGroupId", storeGroupId));
        if (userId2 != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userId", userId2));
        if (menuId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("menuId", menuId));
        if (campaignId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("campaignId", campaignId));
        if (userEmail != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userEmail", userEmail));
        if (userName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userName", userName));
        if (voucherCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("voucherCode", voucherCode));
        if (eventType != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "eventType", eventType));
        if (flipdishEventId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("flipdishEventId", flipdishEventId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUserEventsValidateBeforeCall(Integer userId, Integer limit, Integer page, OffsetDateTime start, OffsetDateTime end, Integer orderId, Integer storeId, Integer storeGroupId, Integer userId2, Integer menuId, Integer campaignId, String userEmail, String userName, String voucherCode, List<String> eventType, String flipdishEventId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUserEvents(Async)");
        }
        

        com.squareup.okhttp.Call call = getUserEventsCall(userId, limit, page, start, end, orderId, storeId, storeGroupId, userId2, menuId, campaignId, userEmail, userName, voucherCode, eventType, flipdishEventId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get user events  For technical reasons, the number of records returned is limited to 100.
     * 
     * @param userId User identifier (required)
     * @param limit The maximum elements to return (optional)
     * @param page The index of the page to return, starting by 1 (optional)
     * @param start Start date (optional)
     * @param end End date (optional)
     * @param orderId Events that have Order Id (optional)
     * @param storeId Events that have Store Id (optional)
     * @param storeGroupId Events that have Store Group Id (optional)
     * @param userId2 Events that have User Id (optional)
     * @param menuId Events that have Menu Id (optional)
     * @param campaignId Events that have Campaign Id (optional)
     * @param userEmail Events that have User Email (optional)
     * @param userName Events that have User Name (optional)
     * @param voucherCode Events that have voucher code (optional)
     * @param eventType Events that have event type\\s (optional)
     * @param flipdishEventId Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     * @return RestApiEventSearchPaginationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiEventSearchPaginationResult getUserEvents(Integer userId, Integer limit, Integer page, OffsetDateTime start, OffsetDateTime end, Integer orderId, Integer storeId, Integer storeGroupId, Integer userId2, Integer menuId, Integer campaignId, String userEmail, String userName, String voucherCode, List<String> eventType, String flipdishEventId) throws ApiException {
        ApiResponse<RestApiEventSearchPaginationResult> resp = getUserEventsWithHttpInfo(userId, limit, page, start, end, orderId, storeId, storeGroupId, userId2, menuId, campaignId, userEmail, userName, voucherCode, eventType, flipdishEventId);
        return resp.getData();
    }

    /**
     * Get user events  For technical reasons, the number of records returned is limited to 100.
     * 
     * @param userId User identifier (required)
     * @param limit The maximum elements to return (optional)
     * @param page The index of the page to return, starting by 1 (optional)
     * @param start Start date (optional)
     * @param end End date (optional)
     * @param orderId Events that have Order Id (optional)
     * @param storeId Events that have Store Id (optional)
     * @param storeGroupId Events that have Store Group Id (optional)
     * @param userId2 Events that have User Id (optional)
     * @param menuId Events that have Menu Id (optional)
     * @param campaignId Events that have Campaign Id (optional)
     * @param userEmail Events that have User Email (optional)
     * @param userName Events that have User Name (optional)
     * @param voucherCode Events that have voucher code (optional)
     * @param eventType Events that have event type\\s (optional)
     * @param flipdishEventId Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     * @return ApiResponse&lt;RestApiEventSearchPaginationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiEventSearchPaginationResult> getUserEventsWithHttpInfo(Integer userId, Integer limit, Integer page, OffsetDateTime start, OffsetDateTime end, Integer orderId, Integer storeId, Integer storeGroupId, Integer userId2, Integer menuId, Integer campaignId, String userEmail, String userName, String voucherCode, List<String> eventType, String flipdishEventId) throws ApiException {
        com.squareup.okhttp.Call call = getUserEventsValidateBeforeCall(userId, limit, page, start, end, orderId, storeId, storeGroupId, userId2, menuId, campaignId, userEmail, userName, voucherCode, eventType, flipdishEventId, null, null);
        Type localVarReturnType = new TypeToken<RestApiEventSearchPaginationResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get user events  For technical reasons, the number of records returned is limited to 100. (asynchronously)
     * 
     * @param userId User identifier (required)
     * @param limit The maximum elements to return (optional)
     * @param page The index of the page to return, starting by 1 (optional)
     * @param start Start date (optional)
     * @param end End date (optional)
     * @param orderId Events that have Order Id (optional)
     * @param storeId Events that have Store Id (optional)
     * @param storeGroupId Events that have Store Group Id (optional)
     * @param userId2 Events that have User Id (optional)
     * @param menuId Events that have Menu Id (optional)
     * @param campaignId Events that have Campaign Id (optional)
     * @param userEmail Events that have User Email (optional)
     * @param userName Events that have User Name (optional)
     * @param voucherCode Events that have voucher code (optional)
     * @param eventType Events that have event type\\s (optional)
     * @param flipdishEventId Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUserEventsAsync(Integer userId, Integer limit, Integer page, OffsetDateTime start, OffsetDateTime end, Integer orderId, Integer storeId, Integer storeGroupId, Integer userId2, Integer menuId, Integer campaignId, String userEmail, String userName, String voucherCode, List<String> eventType, String flipdishEventId, final ApiCallback<RestApiEventSearchPaginationResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUserEventsValidateBeforeCall(userId, limit, page, start, end, orderId, storeId, storeGroupId, userId2, menuId, campaignId, userEmail, userName, voucherCode, eventType, flipdishEventId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiEventSearchPaginationResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getWhiteLabelEvents
     * @param whitelabelId White Label Identifier (required)
     * @param limit The maximum elements to return (optional)
     * @param page The index of the page to return, starting by 1 (optional)
     * @param start Start date (optional)
     * @param end End date (optional)
     * @param orderId Events that have Order Id (optional)
     * @param storeId Events that have Store Id (optional)
     * @param storeGroupId Events that have Store Group Id (optional)
     * @param userId Events that have User Id (optional)
     * @param menuId Events that have Menu Id (optional)
     * @param campaignId Events that have Campaign Id (optional)
     * @param userEmail Events that have User Email (optional)
     * @param userName Events that have User Name (optional)
     * @param voucherCode Events that have voucher code (optional)
     * @param eventType Events that have event type\\s (optional)
     * @param flipdishEventId Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getWhiteLabelEventsCall(Integer whitelabelId, Integer limit, Integer page, OffsetDateTime start, OffsetDateTime end, Integer orderId, Integer storeId, Integer storeGroupId, Integer userId, Integer menuId, Integer campaignId, String userEmail, String userName, String voucherCode, List<String> eventType, String flipdishEventId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/events/whitelabel/{whitelabelId}"
            .replaceAll("\\{" + "whitelabelId" + "\\}", apiClient.escapeString(whitelabelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start", start));
        if (end != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end", end));
        if (orderId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orderId", orderId));
        if (storeId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storeId", storeId));
        if (storeGroupId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storeGroupId", storeGroupId));
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userId", userId));
        if (menuId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("menuId", menuId));
        if (campaignId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("campaignId", campaignId));
        if (userEmail != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userEmail", userEmail));
        if (userName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userName", userName));
        if (voucherCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("voucherCode", voucherCode));
        if (eventType != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "eventType", eventType));
        if (flipdishEventId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("flipdishEventId", flipdishEventId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getWhiteLabelEventsValidateBeforeCall(Integer whitelabelId, Integer limit, Integer page, OffsetDateTime start, OffsetDateTime end, Integer orderId, Integer storeId, Integer storeGroupId, Integer userId, Integer menuId, Integer campaignId, String userEmail, String userName, String voucherCode, List<String> eventType, String flipdishEventId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'whitelabelId' is set
        if (whitelabelId == null) {
            throw new ApiException("Missing the required parameter 'whitelabelId' when calling getWhiteLabelEvents(Async)");
        }
        

        com.squareup.okhttp.Call call = getWhiteLabelEventsCall(whitelabelId, limit, page, start, end, orderId, storeId, storeGroupId, userId, menuId, campaignId, userEmail, userName, voucherCode, eventType, flipdishEventId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get WhiteLabel events  For technical reasons, the number of records returned is limited to 100.
     * 
     * @param whitelabelId White Label Identifier (required)
     * @param limit The maximum elements to return (optional)
     * @param page The index of the page to return, starting by 1 (optional)
     * @param start Start date (optional)
     * @param end End date (optional)
     * @param orderId Events that have Order Id (optional)
     * @param storeId Events that have Store Id (optional)
     * @param storeGroupId Events that have Store Group Id (optional)
     * @param userId Events that have User Id (optional)
     * @param menuId Events that have Menu Id (optional)
     * @param campaignId Events that have Campaign Id (optional)
     * @param userEmail Events that have User Email (optional)
     * @param userName Events that have User Name (optional)
     * @param voucherCode Events that have voucher code (optional)
     * @param eventType Events that have event type\\s (optional)
     * @param flipdishEventId Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     * @return RestApiEventSearchPaginationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiEventSearchPaginationResult getWhiteLabelEvents(Integer whitelabelId, Integer limit, Integer page, OffsetDateTime start, OffsetDateTime end, Integer orderId, Integer storeId, Integer storeGroupId, Integer userId, Integer menuId, Integer campaignId, String userEmail, String userName, String voucherCode, List<String> eventType, String flipdishEventId) throws ApiException {
        ApiResponse<RestApiEventSearchPaginationResult> resp = getWhiteLabelEventsWithHttpInfo(whitelabelId, limit, page, start, end, orderId, storeId, storeGroupId, userId, menuId, campaignId, userEmail, userName, voucherCode, eventType, flipdishEventId);
        return resp.getData();
    }

    /**
     * Get WhiteLabel events  For technical reasons, the number of records returned is limited to 100.
     * 
     * @param whitelabelId White Label Identifier (required)
     * @param limit The maximum elements to return (optional)
     * @param page The index of the page to return, starting by 1 (optional)
     * @param start Start date (optional)
     * @param end End date (optional)
     * @param orderId Events that have Order Id (optional)
     * @param storeId Events that have Store Id (optional)
     * @param storeGroupId Events that have Store Group Id (optional)
     * @param userId Events that have User Id (optional)
     * @param menuId Events that have Menu Id (optional)
     * @param campaignId Events that have Campaign Id (optional)
     * @param userEmail Events that have User Email (optional)
     * @param userName Events that have User Name (optional)
     * @param voucherCode Events that have voucher code (optional)
     * @param eventType Events that have event type\\s (optional)
     * @param flipdishEventId Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     * @return ApiResponse&lt;RestApiEventSearchPaginationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiEventSearchPaginationResult> getWhiteLabelEventsWithHttpInfo(Integer whitelabelId, Integer limit, Integer page, OffsetDateTime start, OffsetDateTime end, Integer orderId, Integer storeId, Integer storeGroupId, Integer userId, Integer menuId, Integer campaignId, String userEmail, String userName, String voucherCode, List<String> eventType, String flipdishEventId) throws ApiException {
        com.squareup.okhttp.Call call = getWhiteLabelEventsValidateBeforeCall(whitelabelId, limit, page, start, end, orderId, storeId, storeGroupId, userId, menuId, campaignId, userEmail, userName, voucherCode, eventType, flipdishEventId, null, null);
        Type localVarReturnType = new TypeToken<RestApiEventSearchPaginationResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get WhiteLabel events  For technical reasons, the number of records returned is limited to 100. (asynchronously)
     * 
     * @param whitelabelId White Label Identifier (required)
     * @param limit The maximum elements to return (optional)
     * @param page The index of the page to return, starting by 1 (optional)
     * @param start Start date (optional)
     * @param end End date (optional)
     * @param orderId Events that have Order Id (optional)
     * @param storeId Events that have Store Id (optional)
     * @param storeGroupId Events that have Store Group Id (optional)
     * @param userId Events that have User Id (optional)
     * @param menuId Events that have Menu Id (optional)
     * @param campaignId Events that have Campaign Id (optional)
     * @param userEmail Events that have User Email (optional)
     * @param userName Events that have User Name (optional)
     * @param voucherCode Events that have voucher code (optional)
     * @param eventType Events that have event type\\s (optional)
     * @param flipdishEventId Unique Identifier of Event, if this is specified, all other criteria are ignored. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getWhiteLabelEventsAsync(Integer whitelabelId, Integer limit, Integer page, OffsetDateTime start, OffsetDateTime end, Integer orderId, Integer storeId, Integer storeGroupId, Integer userId, Integer menuId, Integer campaignId, String userEmail, String userName, String voucherCode, List<String> eventType, String flipdishEventId, final ApiCallback<RestApiEventSearchPaginationResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getWhiteLabelEventsValidateBeforeCall(whitelabelId, limit, page, start, end, orderId, storeId, storeGroupId, userId, menuId, campaignId, userEmail, userName, voucherCode, eventType, flipdishEventId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiEventSearchPaginationResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
