/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.flipdish.apiclient.api;

import com.flipdish.apiclient.ApiCallback;
import com.flipdish.apiclient.ApiClient;
import com.flipdish.apiclient.ApiException;
import com.flipdish.apiclient.ApiResponse;
import com.flipdish.apiclient.Configuration;
import com.flipdish.apiclient.Pair;
import com.flipdish.apiclient.ProgressRequestBody;
import com.flipdish.apiclient.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.flipdish.apiclient.model.CreateMenuSectionItemFromCatalogItems;
import java.io.File;
import com.flipdish.apiclient.model.MenuSectionItemBase;
import com.flipdish.apiclient.model.RestApiArrayResultMenuSectionItem;
import com.flipdish.apiclient.model.RestApiErrorResult;
import com.flipdish.apiclient.model.RestApiForbiddenResult;
import com.flipdish.apiclient.model.RestApiResultCreatedMenuSectionItems;
import com.flipdish.apiclient.model.RestApiResultMenuSectionItem;
import com.flipdish.apiclient.model.RestApiStringResult;
import com.flipdish.apiclient.model.RestApiUnauthorizedResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MenuSectionItemsApi {
    private ApiClient apiClient;

    public MenuSectionItemsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MenuSectionItemsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for cloneMenuSectionItem
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSectionItemId Menu section item identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cloneMenuSectionItemCall(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/clone"
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()))
            .replaceAll("\\{" + "menuSectionId" + "\\}", apiClient.escapeString(menuSectionId.toString()))
            .replaceAll("\\{" + "menuSectionItemId" + "\\}", apiClient.escapeString(menuSectionItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cloneMenuSectionItemValidateBeforeCall(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling cloneMenuSectionItem(Async)");
        }
        
        // verify the required parameter 'menuSectionId' is set
        if (menuSectionId == null) {
            throw new ApiException("Missing the required parameter 'menuSectionId' when calling cloneMenuSectionItem(Async)");
        }
        
        // verify the required parameter 'menuSectionItemId' is set
        if (menuSectionItemId == null) {
            throw new ApiException("Missing the required parameter 'menuSectionItemId' when calling cloneMenuSectionItem(Async)");
        }
        

        com.squareup.okhttp.Call call = cloneMenuSectionItemCall(menuId, menuSectionId, menuSectionItemId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Clone menu section item
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSectionItemId Menu section item identifier (required)
     * @return RestApiResultMenuSectionItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultMenuSectionItem cloneMenuSectionItem(Integer menuId, Integer menuSectionId, Integer menuSectionItemId) throws ApiException {
        ApiResponse<RestApiResultMenuSectionItem> resp = cloneMenuSectionItemWithHttpInfo(menuId, menuSectionId, menuSectionItemId);
        return resp.getData();
    }

    /**
     * Clone menu section item
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSectionItemId Menu section item identifier (required)
     * @return ApiResponse&lt;RestApiResultMenuSectionItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultMenuSectionItem> cloneMenuSectionItemWithHttpInfo(Integer menuId, Integer menuSectionId, Integer menuSectionItemId) throws ApiException {
        com.squareup.okhttp.Call call = cloneMenuSectionItemValidateBeforeCall(menuId, menuSectionId, menuSectionItemId, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultMenuSectionItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Clone menu section item (asynchronously)
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSectionItemId Menu section item identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cloneMenuSectionItemAsync(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, final ApiCallback<RestApiResultMenuSectionItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cloneMenuSectionItemValidateBeforeCall(menuId, menuSectionId, menuSectionItemId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultMenuSectionItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createMenuSectionItem
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSectionItem Menu section item (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createMenuSectionItemCall(Integer menuId, Integer menuSectionId, MenuSectionItemBase menuSectionItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = menuSectionItem;

        // create path and map variables
        String localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems"
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()))
            .replaceAll("\\{" + "menuSectionId" + "\\}", apiClient.escapeString(menuSectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createMenuSectionItemValidateBeforeCall(Integer menuId, Integer menuSectionId, MenuSectionItemBase menuSectionItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling createMenuSectionItem(Async)");
        }
        
        // verify the required parameter 'menuSectionId' is set
        if (menuSectionId == null) {
            throw new ApiException("Missing the required parameter 'menuSectionId' when calling createMenuSectionItem(Async)");
        }
        
        // verify the required parameter 'menuSectionItem' is set
        if (menuSectionItem == null) {
            throw new ApiException("Missing the required parameter 'menuSectionItem' when calling createMenuSectionItem(Async)");
        }
        

        com.squareup.okhttp.Call call = createMenuSectionItemCall(menuId, menuSectionId, menuSectionItem, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create menu section item
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSectionItem Menu section item (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object createMenuSectionItem(Integer menuId, Integer menuSectionId, MenuSectionItemBase menuSectionItem) throws ApiException {
        ApiResponse<Object> resp = createMenuSectionItemWithHttpInfo(menuId, menuSectionId, menuSectionItem);
        return resp.getData();
    }

    /**
     * Create menu section item
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSectionItem Menu section item (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> createMenuSectionItemWithHttpInfo(Integer menuId, Integer menuSectionId, MenuSectionItemBase menuSectionItem) throws ApiException {
        com.squareup.okhttp.Call call = createMenuSectionItemValidateBeforeCall(menuId, menuSectionId, menuSectionItem, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create menu section item (asynchronously)
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSectionItem Menu section item (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createMenuSectionItemAsync(Integer menuId, Integer menuSectionId, MenuSectionItemBase menuSectionItem, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createMenuSectionItemValidateBeforeCall(menuId, menuSectionId, menuSectionItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createMenuSectionItemFromCatalogItems
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param createFromCatalogItems Information to create the new MenuSectionItems (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createMenuSectionItemFromCatalogItemsCall(Integer menuId, Integer menuSectionId, CreateMenuSectionItemFromCatalogItems createFromCatalogItems, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = createFromCatalogItems;

        // create path and map variables
        String localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/add-catalogitems"
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()))
            .replaceAll("\\{" + "menuSectionId" + "\\}", apiClient.escapeString(menuSectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createMenuSectionItemFromCatalogItemsValidateBeforeCall(Integer menuId, Integer menuSectionId, CreateMenuSectionItemFromCatalogItems createFromCatalogItems, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling createMenuSectionItemFromCatalogItems(Async)");
        }
        
        // verify the required parameter 'menuSectionId' is set
        if (menuSectionId == null) {
            throw new ApiException("Missing the required parameter 'menuSectionId' when calling createMenuSectionItemFromCatalogItems(Async)");
        }
        
        // verify the required parameter 'createFromCatalogItems' is set
        if (createFromCatalogItems == null) {
            throw new ApiException("Missing the required parameter 'createFromCatalogItems' when calling createMenuSectionItemFromCatalogItems(Async)");
        }
        

        com.squareup.okhttp.Call call = createMenuSectionItemFromCatalogItemsCall(menuId, menuSectionId, createFromCatalogItems, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create menu section items from a list of Catalog Items
     * BETA - this endpoint is under development, do not use it in your production system
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param createFromCatalogItems Information to create the new MenuSectionItems (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object createMenuSectionItemFromCatalogItems(Integer menuId, Integer menuSectionId, CreateMenuSectionItemFromCatalogItems createFromCatalogItems) throws ApiException {
        ApiResponse<Object> resp = createMenuSectionItemFromCatalogItemsWithHttpInfo(menuId, menuSectionId, createFromCatalogItems);
        return resp.getData();
    }

    /**
     * Create menu section items from a list of Catalog Items
     * BETA - this endpoint is under development, do not use it in your production system
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param createFromCatalogItems Information to create the new MenuSectionItems (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> createMenuSectionItemFromCatalogItemsWithHttpInfo(Integer menuId, Integer menuSectionId, CreateMenuSectionItemFromCatalogItems createFromCatalogItems) throws ApiException {
        com.squareup.okhttp.Call call = createMenuSectionItemFromCatalogItemsValidateBeforeCall(menuId, menuSectionId, createFromCatalogItems, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create menu section items from a list of Catalog Items (asynchronously)
     * BETA - this endpoint is under development, do not use it in your production system
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param createFromCatalogItems Information to create the new MenuSectionItems (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createMenuSectionItemFromCatalogItemsAsync(Integer menuId, Integer menuSectionId, CreateMenuSectionItemFromCatalogItems createFromCatalogItems, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createMenuSectionItemFromCatalogItemsValidateBeforeCall(menuId, menuSectionId, createFromCatalogItems, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteMenuSectionItem
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSectionItemId Menu section item identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteMenuSectionItemCall(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}"
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()))
            .replaceAll("\\{" + "menuSectionId" + "\\}", apiClient.escapeString(menuSectionId.toString()))
            .replaceAll("\\{" + "menuSectionItemId" + "\\}", apiClient.escapeString(menuSectionItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteMenuSectionItemValidateBeforeCall(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling deleteMenuSectionItem(Async)");
        }
        
        // verify the required parameter 'menuSectionId' is set
        if (menuSectionId == null) {
            throw new ApiException("Missing the required parameter 'menuSectionId' when calling deleteMenuSectionItem(Async)");
        }
        
        // verify the required parameter 'menuSectionItemId' is set
        if (menuSectionItemId == null) {
            throw new ApiException("Missing the required parameter 'menuSectionItemId' when calling deleteMenuSectionItem(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteMenuSectionItemCall(menuId, menuSectionId, menuSectionItemId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete menu section item
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSectionItemId Menu section item identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteMenuSectionItem(Integer menuId, Integer menuSectionId, Integer menuSectionItemId) throws ApiException {
        deleteMenuSectionItemWithHttpInfo(menuId, menuSectionId, menuSectionItemId);
    }

    /**
     * Delete menu section item
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSectionItemId Menu section item identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteMenuSectionItemWithHttpInfo(Integer menuId, Integer menuSectionId, Integer menuSectionItemId) throws ApiException {
        com.squareup.okhttp.Call call = deleteMenuSectionItemValidateBeforeCall(menuId, menuSectionId, menuSectionItemId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete menu section item (asynchronously)
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSectionItemId Menu section item identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteMenuSectionItemAsync(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteMenuSectionItemValidateBeforeCall(menuId, menuSectionId, menuSectionItemId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteMenuSectionItemImage
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSectionItemId Menu section item identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteMenuSectionItemImageCall(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/image"
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()))
            .replaceAll("\\{" + "menuSectionId" + "\\}", apiClient.escapeString(menuSectionId.toString()))
            .replaceAll("\\{" + "menuSectionItemId" + "\\}", apiClient.escapeString(menuSectionItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteMenuSectionItemImageValidateBeforeCall(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling deleteMenuSectionItemImage(Async)");
        }
        
        // verify the required parameter 'menuSectionId' is set
        if (menuSectionId == null) {
            throw new ApiException("Missing the required parameter 'menuSectionId' when calling deleteMenuSectionItemImage(Async)");
        }
        
        // verify the required parameter 'menuSectionItemId' is set
        if (menuSectionItemId == null) {
            throw new ApiException("Missing the required parameter 'menuSectionItemId' when calling deleteMenuSectionItemImage(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteMenuSectionItemImageCall(menuId, menuSectionId, menuSectionItemId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete menu section item image
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSectionItemId Menu section item identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteMenuSectionItemImage(Integer menuId, Integer menuSectionId, Integer menuSectionItemId) throws ApiException {
        deleteMenuSectionItemImageWithHttpInfo(menuId, menuSectionId, menuSectionItemId);
    }

    /**
     * Delete menu section item image
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSectionItemId Menu section item identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteMenuSectionItemImageWithHttpInfo(Integer menuId, Integer menuSectionId, Integer menuSectionItemId) throws ApiException {
        com.squareup.okhttp.Call call = deleteMenuSectionItemImageValidateBeforeCall(menuId, menuSectionId, menuSectionItemId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete menu section item image (asynchronously)
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSectionItemId Menu section item identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteMenuSectionItemImageAsync(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteMenuSectionItemImageValidateBeforeCall(menuId, menuSectionId, menuSectionItemId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getMenuItemById
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSectionItemId Menu item identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMenuItemByIdCall(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}"
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()))
            .replaceAll("\\{" + "menuSectionId" + "\\}", apiClient.escapeString(menuSectionId.toString()))
            .replaceAll("\\{" + "menuSectionItemId" + "\\}", apiClient.escapeString(menuSectionItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMenuItemByIdValidateBeforeCall(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling getMenuItemById(Async)");
        }
        
        // verify the required parameter 'menuSectionId' is set
        if (menuSectionId == null) {
            throw new ApiException("Missing the required parameter 'menuSectionId' when calling getMenuItemById(Async)");
        }
        
        // verify the required parameter 'menuSectionItemId' is set
        if (menuSectionItemId == null) {
            throw new ApiException("Missing the required parameter 'menuSectionItemId' when calling getMenuItemById(Async)");
        }
        

        com.squareup.okhttp.Call call = getMenuItemByIdCall(menuId, menuSectionId, menuSectionItemId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get menu item by identifier
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSectionItemId Menu item identifier (required)
     * @return RestApiResultMenuSectionItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultMenuSectionItem getMenuItemById(Integer menuId, Integer menuSectionId, Integer menuSectionItemId) throws ApiException {
        ApiResponse<RestApiResultMenuSectionItem> resp = getMenuItemByIdWithHttpInfo(menuId, menuSectionId, menuSectionItemId);
        return resp.getData();
    }

    /**
     * Get menu item by identifier
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSectionItemId Menu item identifier (required)
     * @return ApiResponse&lt;RestApiResultMenuSectionItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultMenuSectionItem> getMenuItemByIdWithHttpInfo(Integer menuId, Integer menuSectionId, Integer menuSectionItemId) throws ApiException {
        com.squareup.okhttp.Call call = getMenuItemByIdValidateBeforeCall(menuId, menuSectionId, menuSectionItemId, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultMenuSectionItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get menu item by identifier (asynchronously)
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSectionItemId Menu item identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMenuItemByIdAsync(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, final ApiCallback<RestApiResultMenuSectionItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMenuItemByIdValidateBeforeCall(menuId, menuSectionId, menuSectionItemId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultMenuSectionItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getMenuItems
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMenuItemsCall(Integer menuId, Integer menuSectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems"
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()))
            .replaceAll("\\{" + "menuSectionId" + "\\}", apiClient.escapeString(menuSectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMenuItemsValidateBeforeCall(Integer menuId, Integer menuSectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling getMenuItems(Async)");
        }
        
        // verify the required parameter 'menuSectionId' is set
        if (menuSectionId == null) {
            throw new ApiException("Missing the required parameter 'menuSectionId' when calling getMenuItems(Async)");
        }
        

        com.squareup.okhttp.Call call = getMenuItemsCall(menuId, menuSectionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get menu items
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @return RestApiArrayResultMenuSectionItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiArrayResultMenuSectionItem getMenuItems(Integer menuId, Integer menuSectionId) throws ApiException {
        ApiResponse<RestApiArrayResultMenuSectionItem> resp = getMenuItemsWithHttpInfo(menuId, menuSectionId);
        return resp.getData();
    }

    /**
     * Get menu items
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @return ApiResponse&lt;RestApiArrayResultMenuSectionItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiArrayResultMenuSectionItem> getMenuItemsWithHttpInfo(Integer menuId, Integer menuSectionId) throws ApiException {
        com.squareup.okhttp.Call call = getMenuItemsValidateBeforeCall(menuId, menuSectionId, null, null);
        Type localVarReturnType = new TypeToken<RestApiArrayResultMenuSectionItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get menu items (asynchronously)
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMenuItemsAsync(Integer menuId, Integer menuSectionId, final ApiCallback<RestApiArrayResultMenuSectionItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMenuItemsValidateBeforeCall(menuId, menuSectionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiArrayResultMenuSectionItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for moveMenuItem
     * @param menuId Menu identifier (required)
     * @param menuSectionId Section to put item in (will usually be original section) (required)
     * @param menuSectionItemId ID of Item to be moved (required)
     * @param destinationDisplayOrder New Display Order of item (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call moveMenuItemCall(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, Integer destinationDisplayOrder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/setorder/{destinationDisplayOrder}"
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()))
            .replaceAll("\\{" + "menuSectionId" + "\\}", apiClient.escapeString(menuSectionId.toString()))
            .replaceAll("\\{" + "menuSectionItemId" + "\\}", apiClient.escapeString(menuSectionItemId.toString()))
            .replaceAll("\\{" + "destinationDisplayOrder" + "\\}", apiClient.escapeString(destinationDisplayOrder.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call moveMenuItemValidateBeforeCall(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, Integer destinationDisplayOrder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling moveMenuItem(Async)");
        }
        
        // verify the required parameter 'menuSectionId' is set
        if (menuSectionId == null) {
            throw new ApiException("Missing the required parameter 'menuSectionId' when calling moveMenuItem(Async)");
        }
        
        // verify the required parameter 'menuSectionItemId' is set
        if (menuSectionItemId == null) {
            throw new ApiException("Missing the required parameter 'menuSectionItemId' when calling moveMenuItem(Async)");
        }
        
        // verify the required parameter 'destinationDisplayOrder' is set
        if (destinationDisplayOrder == null) {
            throw new ApiException("Missing the required parameter 'destinationDisplayOrder' when calling moveMenuItem(Async)");
        }
        

        com.squareup.okhttp.Call call = moveMenuItemCall(menuId, menuSectionId, menuSectionItemId, destinationDisplayOrder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * [PRIVATE API] Move an Item within a menu
     * [PRIVATE API]
     * @param menuId Menu identifier (required)
     * @param menuSectionId Section to put item in (will usually be original section) (required)
     * @param menuSectionItemId ID of Item to be moved (required)
     * @param destinationDisplayOrder New Display Order of item (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void moveMenuItem(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, Integer destinationDisplayOrder) throws ApiException {
        moveMenuItemWithHttpInfo(menuId, menuSectionId, menuSectionItemId, destinationDisplayOrder);
    }

    /**
     * [PRIVATE API] Move an Item within a menu
     * [PRIVATE API]
     * @param menuId Menu identifier (required)
     * @param menuSectionId Section to put item in (will usually be original section) (required)
     * @param menuSectionItemId ID of Item to be moved (required)
     * @param destinationDisplayOrder New Display Order of item (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> moveMenuItemWithHttpInfo(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, Integer destinationDisplayOrder) throws ApiException {
        com.squareup.okhttp.Call call = moveMenuItemValidateBeforeCall(menuId, menuSectionId, menuSectionItemId, destinationDisplayOrder, null, null);
        return apiClient.execute(call);
    }

    /**
     * [PRIVATE API] Move an Item within a menu (asynchronously)
     * [PRIVATE API]
     * @param menuId Menu identifier (required)
     * @param menuSectionId Section to put item in (will usually be original section) (required)
     * @param menuSectionItemId ID of Item to be moved (required)
     * @param destinationDisplayOrder New Display Order of item (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call moveMenuItemAsync(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, Integer destinationDisplayOrder, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = moveMenuItemValidateBeforeCall(menuId, menuSectionId, menuSectionItemId, destinationDisplayOrder, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for setSectionItemTax
     * @param menuId Menu identifier (required)
     * @param menuSectionId Section to put item in (will usually be original section) (required)
     * @param menuSectionItemId ID of Item to be moved (required)
     * @param taxRateId tax rate to be set against item (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setSectionItemTaxCall(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, Integer taxRateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/taxrate/{taxRateId}"
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()))
            .replaceAll("\\{" + "menuSectionId" + "\\}", apiClient.escapeString(menuSectionId.toString()))
            .replaceAll("\\{" + "menuSectionItemId" + "\\}", apiClient.escapeString(menuSectionItemId.toString()))
            .replaceAll("\\{" + "taxRateId" + "\\}", apiClient.escapeString(taxRateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setSectionItemTaxValidateBeforeCall(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, Integer taxRateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling setSectionItemTax(Async)");
        }
        
        // verify the required parameter 'menuSectionId' is set
        if (menuSectionId == null) {
            throw new ApiException("Missing the required parameter 'menuSectionId' when calling setSectionItemTax(Async)");
        }
        
        // verify the required parameter 'menuSectionItemId' is set
        if (menuSectionItemId == null) {
            throw new ApiException("Missing the required parameter 'menuSectionItemId' when calling setSectionItemTax(Async)");
        }
        
        // verify the required parameter 'taxRateId' is set
        if (taxRateId == null) {
            throw new ApiException("Missing the required parameter 'taxRateId' when calling setSectionItemTax(Async)");
        }
        

        com.squareup.okhttp.Call call = setSectionItemTaxCall(menuId, menuSectionId, menuSectionItemId, taxRateId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Set tax rate for menu item
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Section to put item in (will usually be original section) (required)
     * @param menuSectionItemId ID of Item to be moved (required)
     * @param taxRateId tax rate to be set against item (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void setSectionItemTax(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, Integer taxRateId) throws ApiException {
        setSectionItemTaxWithHttpInfo(menuId, menuSectionId, menuSectionItemId, taxRateId);
    }

    /**
     * Set tax rate for menu item
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Section to put item in (will usually be original section) (required)
     * @param menuSectionItemId ID of Item to be moved (required)
     * @param taxRateId tax rate to be set against item (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> setSectionItemTaxWithHttpInfo(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, Integer taxRateId) throws ApiException {
        com.squareup.okhttp.Call call = setSectionItemTaxValidateBeforeCall(menuId, menuSectionId, menuSectionItemId, taxRateId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Set tax rate for menu item (asynchronously)
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Section to put item in (will usually be original section) (required)
     * @param menuSectionItemId ID of Item to be moved (required)
     * @param taxRateId tax rate to be set against item (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setSectionItemTaxAsync(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, Integer taxRateId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setSectionItemTaxValidateBeforeCall(menuId, menuSectionId, menuSectionItemId, taxRateId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateMenuSectionItem
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSectionItemId Menu section item identifier (required)
     * @param menuSectionItem Menu section item (delta) (required)
     * @param undoAfter An optional time period, in hours, after which the hide-section operation will be undone (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateMenuSectionItemCall(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, MenuSectionItemBase menuSectionItem, Double undoAfter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = menuSectionItem;

        // create path and map variables
        String localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}"
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()))
            .replaceAll("\\{" + "menuSectionId" + "\\}", apiClient.escapeString(menuSectionId.toString()))
            .replaceAll("\\{" + "menuSectionItemId" + "\\}", apiClient.escapeString(menuSectionItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (undoAfter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("undoAfter", undoAfter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateMenuSectionItemValidateBeforeCall(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, MenuSectionItemBase menuSectionItem, Double undoAfter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling updateMenuSectionItem(Async)");
        }
        
        // verify the required parameter 'menuSectionId' is set
        if (menuSectionId == null) {
            throw new ApiException("Missing the required parameter 'menuSectionId' when calling updateMenuSectionItem(Async)");
        }
        
        // verify the required parameter 'menuSectionItemId' is set
        if (menuSectionItemId == null) {
            throw new ApiException("Missing the required parameter 'menuSectionItemId' when calling updateMenuSectionItem(Async)");
        }
        
        // verify the required parameter 'menuSectionItem' is set
        if (menuSectionItem == null) {
            throw new ApiException("Missing the required parameter 'menuSectionItem' when calling updateMenuSectionItem(Async)");
        }
        

        com.squareup.okhttp.Call call = updateMenuSectionItemCall(menuId, menuSectionId, menuSectionItemId, menuSectionItem, undoAfter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update menu section item
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSectionItemId Menu section item identifier (required)
     * @param menuSectionItem Menu section item (delta) (required)
     * @param undoAfter An optional time period, in hours, after which the hide-section operation will be undone (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateMenuSectionItem(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, MenuSectionItemBase menuSectionItem, Double undoAfter) throws ApiException {
        updateMenuSectionItemWithHttpInfo(menuId, menuSectionId, menuSectionItemId, menuSectionItem, undoAfter);
    }

    /**
     * Update menu section item
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSectionItemId Menu section item identifier (required)
     * @param menuSectionItem Menu section item (delta) (required)
     * @param undoAfter An optional time period, in hours, after which the hide-section operation will be undone (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateMenuSectionItemWithHttpInfo(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, MenuSectionItemBase menuSectionItem, Double undoAfter) throws ApiException {
        com.squareup.okhttp.Call call = updateMenuSectionItemValidateBeforeCall(menuId, menuSectionId, menuSectionItemId, menuSectionItem, undoAfter, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update menu section item (asynchronously)
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSectionItemId Menu section item identifier (required)
     * @param menuSectionItem Menu section item (delta) (required)
     * @param undoAfter An optional time period, in hours, after which the hide-section operation will be undone (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateMenuSectionItemAsync(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, MenuSectionItemBase menuSectionItem, Double undoAfter, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateMenuSectionItemValidateBeforeCall(menuId, menuSectionId, menuSectionItemId, menuSectionItem, undoAfter, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for uploadMenuSectionItemImage
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSectionItemId Menu section item identifier (required)
     * @param image Menu section item image (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call uploadMenuSectionItemImageCall(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, File image, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/image"
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()))
            .replaceAll("\\{" + "menuSectionId" + "\\}", apiClient.escapeString(menuSectionId.toString()))
            .replaceAll("\\{" + "menuSectionItemId" + "\\}", apiClient.escapeString(menuSectionItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (image != null)
        localVarFormParams.put("Image", image);

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call uploadMenuSectionItemImageValidateBeforeCall(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, File image, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling uploadMenuSectionItemImage(Async)");
        }
        
        // verify the required parameter 'menuSectionId' is set
        if (menuSectionId == null) {
            throw new ApiException("Missing the required parameter 'menuSectionId' when calling uploadMenuSectionItemImage(Async)");
        }
        
        // verify the required parameter 'menuSectionItemId' is set
        if (menuSectionItemId == null) {
            throw new ApiException("Missing the required parameter 'menuSectionItemId' when calling uploadMenuSectionItemImage(Async)");
        }
        
        // verify the required parameter 'image' is set
        if (image == null) {
            throw new ApiException("Missing the required parameter 'image' when calling uploadMenuSectionItemImage(Async)");
        }
        

        com.squareup.okhttp.Call call = uploadMenuSectionItemImageCall(menuId, menuSectionId, menuSectionItemId, image, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Upload menu section item image
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSectionItemId Menu section item identifier (required)
     * @param image Menu section item image (required)
     * @return RestApiStringResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiStringResult uploadMenuSectionItemImage(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, File image) throws ApiException {
        ApiResponse<RestApiStringResult> resp = uploadMenuSectionItemImageWithHttpInfo(menuId, menuSectionId, menuSectionItemId, image);
        return resp.getData();
    }

    /**
     * Upload menu section item image
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSectionItemId Menu section item identifier (required)
     * @param image Menu section item image (required)
     * @return ApiResponse&lt;RestApiStringResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiStringResult> uploadMenuSectionItemImageWithHttpInfo(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, File image) throws ApiException {
        com.squareup.okhttp.Call call = uploadMenuSectionItemImageValidateBeforeCall(menuId, menuSectionId, menuSectionItemId, image, null, null);
        Type localVarReturnType = new TypeToken<RestApiStringResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Upload menu section item image (asynchronously)
     * 
     * @param menuId Menu identifier (required)
     * @param menuSectionId Menu section identifier (required)
     * @param menuSectionItemId Menu section item identifier (required)
     * @param image Menu section item image (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call uploadMenuSectionItemImageAsync(Integer menuId, Integer menuSectionId, Integer menuSectionItemId, File image, final ApiCallback<RestApiStringResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = uploadMenuSectionItemImageValidateBeforeCall(menuId, menuSectionId, menuSectionItemId, image, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiStringResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
