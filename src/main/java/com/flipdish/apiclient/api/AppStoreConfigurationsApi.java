/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.flipdish.apiclient.api;

import com.flipdish.apiclient.ApiCallback;
import com.flipdish.apiclient.ApiClient;
import com.flipdish.apiclient.ApiException;
import com.flipdish.apiclient.ApiResponse;
import com.flipdish.apiclient.Configuration;
import com.flipdish.apiclient.Pair;
import com.flipdish.apiclient.ProgressRequestBody;
import com.flipdish.apiclient.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.flipdish.apiclient.model.ExecuteConfigurationActionRequest;
import com.flipdish.apiclient.model.RestApiArrayResultAppStoreAppConfigurationSummary;
import com.flipdish.apiclient.model.RestApiArrayResultAppStoreAppSummary;
import com.flipdish.apiclient.model.RestApiErrorResult;
import com.flipdish.apiclient.model.RestApiForbiddenResult;
import com.flipdish.apiclient.model.RestApiResultAppStoreAppConfiguration;
import com.flipdish.apiclient.model.RestApiResultExecuteConfigurationActionResult;
import com.flipdish.apiclient.model.RestApiStringResult;
import com.flipdish.apiclient.model.RestApiUnauthorizedResult;
import com.flipdish.apiclient.model.UpdateAppStoreAppConfiguration;
import com.flipdish.apiclient.model.UpdateAppStoreAppConfigurationValuesBatch;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AppStoreConfigurationsApi {
    private ApiClient apiClient;
    private Map<String, String> headers;

    public AppStoreConfigurationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AppStoreConfigurationsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public void setHeadersOverrides(Map<String, String> headers) {
        this.headers = headers;
    }

    /**
     * Build call for appStoreConfigurationsAppStoreHandleOauthResponseCode
     * @param appStoreAppId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call appStoreConfigurationsAppStoreHandleOauthResponseCodeCall(String appStoreAppId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/appstore/oauthresponse/{appStoreAppId}/responsecode"
            .replaceAll("\\{" + "appStoreAppId" + "\\}", apiClient.escapeString(appStoreAppId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call appStoreConfigurationsAppStoreHandleOauthResponseCodeValidateBeforeCall(String appStoreAppId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appStoreAppId' is set
        if (appStoreAppId == null) {
            throw new ApiException("Missing the required parameter 'appStoreAppId' when calling appStoreConfigurationsAppStoreHandleOauthResponseCode(Async)");
        }
        

        com.squareup.okhttp.Call call = appStoreConfigurationsAppStoreHandleOauthResponseCodeCall(appStoreAppId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param appStoreAppId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object appStoreConfigurationsAppStoreHandleOauthResponseCode(String appStoreAppId) throws ApiException {
        ApiResponse<Object> resp = appStoreConfigurationsAppStoreHandleOauthResponseCodeWithHttpInfo(appStoreAppId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param appStoreAppId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> appStoreConfigurationsAppStoreHandleOauthResponseCodeWithHttpInfo(String appStoreAppId) throws ApiException {
        com.squareup.okhttp.Call call = appStoreConfigurationsAppStoreHandleOauthResponseCodeValidateBeforeCall(appStoreAppId, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appStoreAppId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call appStoreConfigurationsAppStoreHandleOauthResponseCodeAsync(String appStoreAppId, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = appStoreConfigurationsAppStoreHandleOauthResponseCodeValidateBeforeCall(appStoreAppId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createAppStoreConfig
     * @param appId  (required)
     * @param appStoreAppId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createAppStoreConfigCall(String appId, String appStoreAppId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/appstore/apps/{appStoreAppId}/config"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "appStoreAppId" + "\\}", apiClient.escapeString(appStoreAppId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createAppStoreConfigValidateBeforeCall(String appId, String appStoreAppId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling createAppStoreConfig(Async)");
        }
        
        // verify the required parameter 'appStoreAppId' is set
        if (appStoreAppId == null) {
            throw new ApiException("Missing the required parameter 'appStoreAppId' when calling createAppStoreConfig(Async)");
        }
        

        com.squareup.okhttp.Call call = createAppStoreConfigCall(appId, appStoreAppId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param appStoreAppId  (required)
     * @return RestApiResultAppStoreAppConfiguration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultAppStoreAppConfiguration createAppStoreConfig(String appId, String appStoreAppId) throws ApiException {
        ApiResponse<RestApiResultAppStoreAppConfiguration> resp = createAppStoreConfigWithHttpInfo(appId, appStoreAppId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param appStoreAppId  (required)
     * @return ApiResponse&lt;RestApiResultAppStoreAppConfiguration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultAppStoreAppConfiguration> createAppStoreConfigWithHttpInfo(String appId, String appStoreAppId) throws ApiException {
        com.squareup.okhttp.Call call = createAppStoreConfigValidateBeforeCall(appId, appStoreAppId, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultAppStoreAppConfiguration>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param appStoreAppId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createAppStoreConfigAsync(String appId, String appStoreAppId, final ApiCallback<RestApiResultAppStoreAppConfiguration> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createAppStoreConfigValidateBeforeCall(appId, appStoreAppId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultAppStoreAppConfiguration>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteAppStoreConfig
     * @param appId  (required)
     * @param appStoreAppId  (required)
     * @param configId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAppStoreConfigCall(String appId, String appStoreAppId, String configId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/appstore/apps/{appStoreAppId}/config/{configId}"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "appStoreAppId" + "\\}", apiClient.escapeString(appStoreAppId.toString()))
            .replaceAll("\\{" + "configId" + "\\}", apiClient.escapeString(configId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAppStoreConfigValidateBeforeCall(String appId, String appStoreAppId, String configId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling deleteAppStoreConfig(Async)");
        }
        
        // verify the required parameter 'appStoreAppId' is set
        if (appStoreAppId == null) {
            throw new ApiException("Missing the required parameter 'appStoreAppId' when calling deleteAppStoreConfig(Async)");
        }
        
        // verify the required parameter 'configId' is set
        if (configId == null) {
            throw new ApiException("Missing the required parameter 'configId' when calling deleteAppStoreConfig(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteAppStoreConfigCall(appId, appStoreAppId, configId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param appStoreAppId  (required)
     * @param configId  (required)
     * @return RestApiStringResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiStringResult deleteAppStoreConfig(String appId, String appStoreAppId, String configId) throws ApiException {
        ApiResponse<RestApiStringResult> resp = deleteAppStoreConfigWithHttpInfo(appId, appStoreAppId, configId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param appStoreAppId  (required)
     * @param configId  (required)
     * @return ApiResponse&lt;RestApiStringResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiStringResult> deleteAppStoreConfigWithHttpInfo(String appId, String appStoreAppId, String configId) throws ApiException {
        com.squareup.okhttp.Call call = deleteAppStoreConfigValidateBeforeCall(appId, appStoreAppId, configId, null, null);
        Type localVarReturnType = new TypeToken<RestApiStringResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param appStoreAppId  (required)
     * @param configId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAppStoreConfigAsync(String appId, String appStoreAppId, String configId, final ApiCallback<RestApiStringResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAppStoreConfigValidateBeforeCall(appId, appStoreAppId, configId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiStringResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for executeConfigurationAction
     * @param appId  (required)
     * @param appStoreAppId  (required)
     * @param configId  (required)
     * @param executeConfigurationActionRequest  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call executeConfigurationActionCall(String appId, String appStoreAppId, String configId, ExecuteConfigurationActionRequest executeConfigurationActionRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = executeConfigurationActionRequest;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/appstore/apps/{appStoreAppId}/config/{configId}/action"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "appStoreAppId" + "\\}", apiClient.escapeString(appStoreAppId.toString()))
            .replaceAll("\\{" + "configId" + "\\}", apiClient.escapeString(configId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call executeConfigurationActionValidateBeforeCall(String appId, String appStoreAppId, String configId, ExecuteConfigurationActionRequest executeConfigurationActionRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling executeConfigurationAction(Async)");
        }
        
        // verify the required parameter 'appStoreAppId' is set
        if (appStoreAppId == null) {
            throw new ApiException("Missing the required parameter 'appStoreAppId' when calling executeConfigurationAction(Async)");
        }
        
        // verify the required parameter 'configId' is set
        if (configId == null) {
            throw new ApiException("Missing the required parameter 'configId' when calling executeConfigurationAction(Async)");
        }
        
        // verify the required parameter 'executeConfigurationActionRequest' is set
        if (executeConfigurationActionRequest == null) {
            throw new ApiException("Missing the required parameter 'executeConfigurationActionRequest' when calling executeConfigurationAction(Async)");
        }
        

        com.squareup.okhttp.Call call = executeConfigurationActionCall(appId, appStoreAppId, configId, executeConfigurationActionRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param appStoreAppId  (required)
     * @param configId  (required)
     * @param executeConfigurationActionRequest  (required)
     * @return RestApiResultExecuteConfigurationActionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultExecuteConfigurationActionResult executeConfigurationAction(String appId, String appStoreAppId, String configId, ExecuteConfigurationActionRequest executeConfigurationActionRequest) throws ApiException {
        ApiResponse<RestApiResultExecuteConfigurationActionResult> resp = executeConfigurationActionWithHttpInfo(appId, appStoreAppId, configId, executeConfigurationActionRequest);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param appStoreAppId  (required)
     * @param configId  (required)
     * @param executeConfigurationActionRequest  (required)
     * @return ApiResponse&lt;RestApiResultExecuteConfigurationActionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultExecuteConfigurationActionResult> executeConfigurationActionWithHttpInfo(String appId, String appStoreAppId, String configId, ExecuteConfigurationActionRequest executeConfigurationActionRequest) throws ApiException {
        com.squareup.okhttp.Call call = executeConfigurationActionValidateBeforeCall(appId, appStoreAppId, configId, executeConfigurationActionRequest, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultExecuteConfigurationActionResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param appStoreAppId  (required)
     * @param configId  (required)
     * @param executeConfigurationActionRequest  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call executeConfigurationActionAsync(String appId, String appStoreAppId, String configId, ExecuteConfigurationActionRequest executeConfigurationActionRequest, final ApiCallback<RestApiResultExecuteConfigurationActionResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = executeConfigurationActionValidateBeforeCall(appId, appStoreAppId, configId, executeConfigurationActionRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultExecuteConfigurationActionResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAppStoreConfig
     * @param appId  (required)
     * @param appStoreAppId  (required)
     * @param configId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAppStoreConfigCall(String appId, String appStoreAppId, String configId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/appstore/apps/{appStoreAppId}/config/{configId}"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "appStoreAppId" + "\\}", apiClient.escapeString(appStoreAppId.toString()))
            .replaceAll("\\{" + "configId" + "\\}", apiClient.escapeString(configId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAppStoreConfigValidateBeforeCall(String appId, String appStoreAppId, String configId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getAppStoreConfig(Async)");
        }
        
        // verify the required parameter 'appStoreAppId' is set
        if (appStoreAppId == null) {
            throw new ApiException("Missing the required parameter 'appStoreAppId' when calling getAppStoreConfig(Async)");
        }
        
        // verify the required parameter 'configId' is set
        if (configId == null) {
            throw new ApiException("Missing the required parameter 'configId' when calling getAppStoreConfig(Async)");
        }
        

        com.squareup.okhttp.Call call = getAppStoreConfigCall(appId, appStoreAppId, configId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param appStoreAppId  (required)
     * @param configId  (required)
     * @return RestApiResultAppStoreAppConfiguration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultAppStoreAppConfiguration getAppStoreConfig(String appId, String appStoreAppId, String configId) throws ApiException {
        ApiResponse<RestApiResultAppStoreAppConfiguration> resp = getAppStoreConfigWithHttpInfo(appId, appStoreAppId, configId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param appStoreAppId  (required)
     * @param configId  (required)
     * @return ApiResponse&lt;RestApiResultAppStoreAppConfiguration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultAppStoreAppConfiguration> getAppStoreConfigWithHttpInfo(String appId, String appStoreAppId, String configId) throws ApiException {
        com.squareup.okhttp.Call call = getAppStoreConfigValidateBeforeCall(appId, appStoreAppId, configId, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultAppStoreAppConfiguration>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param appStoreAppId  (required)
     * @param configId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAppStoreConfigAsync(String appId, String appStoreAppId, String configId, final ApiCallback<RestApiResultAppStoreAppConfiguration> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAppStoreConfigValidateBeforeCall(appId, appStoreAppId, configId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultAppStoreAppConfiguration>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getConfiguredAppSingleApp
     * @param appId  (required)
     * @param appStoreAppId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getConfiguredAppSingleAppCall(String appId, String appStoreAppId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/appstore/apps/{appStoreAppId}"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "appStoreAppId" + "\\}", apiClient.escapeString(appStoreAppId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getConfiguredAppSingleAppValidateBeforeCall(String appId, String appStoreAppId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getConfiguredAppSingleApp(Async)");
        }
        
        // verify the required parameter 'appStoreAppId' is set
        if (appStoreAppId == null) {
            throw new ApiException("Missing the required parameter 'appStoreAppId' when calling getConfiguredAppSingleApp(Async)");
        }
        

        com.squareup.okhttp.Call call = getConfiguredAppSingleAppCall(appId, appStoreAppId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param appStoreAppId  (required)
     * @return RestApiArrayResultAppStoreAppConfigurationSummary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiArrayResultAppStoreAppConfigurationSummary getConfiguredAppSingleApp(String appId, String appStoreAppId) throws ApiException {
        ApiResponse<RestApiArrayResultAppStoreAppConfigurationSummary> resp = getConfiguredAppSingleAppWithHttpInfo(appId, appStoreAppId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param appStoreAppId  (required)
     * @return ApiResponse&lt;RestApiArrayResultAppStoreAppConfigurationSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiArrayResultAppStoreAppConfigurationSummary> getConfiguredAppSingleAppWithHttpInfo(String appId, String appStoreAppId) throws ApiException {
        com.squareup.okhttp.Call call = getConfiguredAppSingleAppValidateBeforeCall(appId, appStoreAppId, null, null);
        Type localVarReturnType = new TypeToken<RestApiArrayResultAppStoreAppConfigurationSummary>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param appStoreAppId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getConfiguredAppSingleAppAsync(String appId, String appStoreAppId, final ApiCallback<RestApiArrayResultAppStoreAppConfigurationSummary> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getConfiguredAppSingleAppValidateBeforeCall(appId, appStoreAppId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiArrayResultAppStoreAppConfigurationSummary>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getConfiguredApps
     * @param appId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getConfiguredAppsCall(String appId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/appstore/apps"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getConfiguredAppsValidateBeforeCall(String appId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getConfiguredApps(Async)");
        }
        

        com.squareup.okhttp.Call call = getConfiguredAppsCall(appId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @return RestApiArrayResultAppStoreAppSummary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiArrayResultAppStoreAppSummary getConfiguredApps(String appId) throws ApiException {
        ApiResponse<RestApiArrayResultAppStoreAppSummary> resp = getConfiguredAppsWithHttpInfo(appId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @return ApiResponse&lt;RestApiArrayResultAppStoreAppSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiArrayResultAppStoreAppSummary> getConfiguredAppsWithHttpInfo(String appId) throws ApiException {
        com.squareup.okhttp.Call call = getConfiguredAppsValidateBeforeCall(appId, null, null);
        Type localVarReturnType = new TypeToken<RestApiArrayResultAppStoreAppSummary>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getConfiguredAppsAsync(String appId, final ApiCallback<RestApiArrayResultAppStoreAppSummary> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getConfiguredAppsValidateBeforeCall(appId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiArrayResultAppStoreAppSummary>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateAppStoreConfig
     * @param appId  (required)
     * @param appStoreAppId  (required)
     * @param configId  (required)
     * @param updateAppStoreAppConfiguration  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateAppStoreConfigCall(String appId, String appStoreAppId, String configId, UpdateAppStoreAppConfiguration updateAppStoreAppConfiguration, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = updateAppStoreAppConfiguration;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/appstore/apps/{appStoreAppId}/config/{configId}"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "appStoreAppId" + "\\}", apiClient.escapeString(appStoreAppId.toString()))
            .replaceAll("\\{" + "configId" + "\\}", apiClient.escapeString(configId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateAppStoreConfigValidateBeforeCall(String appId, String appStoreAppId, String configId, UpdateAppStoreAppConfiguration updateAppStoreAppConfiguration, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling updateAppStoreConfig(Async)");
        }
        
        // verify the required parameter 'appStoreAppId' is set
        if (appStoreAppId == null) {
            throw new ApiException("Missing the required parameter 'appStoreAppId' when calling updateAppStoreConfig(Async)");
        }
        
        // verify the required parameter 'configId' is set
        if (configId == null) {
            throw new ApiException("Missing the required parameter 'configId' when calling updateAppStoreConfig(Async)");
        }
        
        // verify the required parameter 'updateAppStoreAppConfiguration' is set
        if (updateAppStoreAppConfiguration == null) {
            throw new ApiException("Missing the required parameter 'updateAppStoreAppConfiguration' when calling updateAppStoreConfig(Async)");
        }
        

        com.squareup.okhttp.Call call = updateAppStoreConfigCall(appId, appStoreAppId, configId, updateAppStoreAppConfiguration, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param appStoreAppId  (required)
     * @param configId  (required)
     * @param updateAppStoreAppConfiguration  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateAppStoreConfig(String appId, String appStoreAppId, String configId, UpdateAppStoreAppConfiguration updateAppStoreAppConfiguration) throws ApiException {
        updateAppStoreConfigWithHttpInfo(appId, appStoreAppId, configId, updateAppStoreAppConfiguration);
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param appStoreAppId  (required)
     * @param configId  (required)
     * @param updateAppStoreAppConfiguration  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateAppStoreConfigWithHttpInfo(String appId, String appStoreAppId, String configId, UpdateAppStoreAppConfiguration updateAppStoreAppConfiguration) throws ApiException {
        com.squareup.okhttp.Call call = updateAppStoreConfigValidateBeforeCall(appId, appStoreAppId, configId, updateAppStoreAppConfiguration, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param appStoreAppId  (required)
     * @param configId  (required)
     * @param updateAppStoreAppConfiguration  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateAppStoreConfigAsync(String appId, String appStoreAppId, String configId, UpdateAppStoreAppConfiguration updateAppStoreAppConfiguration, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateAppStoreConfigValidateBeforeCall(appId, appStoreAppId, configId, updateAppStoreAppConfiguration, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateAppStoreConfigSettingValues
     * @param appId  (required)
     * @param appStoreAppId  (required)
     * @param configId  (required)
     * @param updateAppStoreAppConfigurationValues  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateAppStoreConfigSettingValuesCall(String appId, String appStoreAppId, String configId, UpdateAppStoreAppConfigurationValuesBatch updateAppStoreAppConfigurationValues, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = updateAppStoreAppConfigurationValues;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/appstore/apps/{appStoreAppId}/config/{configId}/updatesettings"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "appStoreAppId" + "\\}", apiClient.escapeString(appStoreAppId.toString()))
            .replaceAll("\\{" + "configId" + "\\}", apiClient.escapeString(configId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateAppStoreConfigSettingValuesValidateBeforeCall(String appId, String appStoreAppId, String configId, UpdateAppStoreAppConfigurationValuesBatch updateAppStoreAppConfigurationValues, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling updateAppStoreConfigSettingValues(Async)");
        }
        
        // verify the required parameter 'appStoreAppId' is set
        if (appStoreAppId == null) {
            throw new ApiException("Missing the required parameter 'appStoreAppId' when calling updateAppStoreConfigSettingValues(Async)");
        }
        
        // verify the required parameter 'configId' is set
        if (configId == null) {
            throw new ApiException("Missing the required parameter 'configId' when calling updateAppStoreConfigSettingValues(Async)");
        }
        
        // verify the required parameter 'updateAppStoreAppConfigurationValues' is set
        if (updateAppStoreAppConfigurationValues == null) {
            throw new ApiException("Missing the required parameter 'updateAppStoreAppConfigurationValues' when calling updateAppStoreConfigSettingValues(Async)");
        }
        

        com.squareup.okhttp.Call call = updateAppStoreConfigSettingValuesCall(appId, appStoreAppId, configId, updateAppStoreAppConfigurationValues, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param appStoreAppId  (required)
     * @param configId  (required)
     * @param updateAppStoreAppConfigurationValues  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateAppStoreConfigSettingValues(String appId, String appStoreAppId, String configId, UpdateAppStoreAppConfigurationValuesBatch updateAppStoreAppConfigurationValues) throws ApiException {
        updateAppStoreConfigSettingValuesWithHttpInfo(appId, appStoreAppId, configId, updateAppStoreAppConfigurationValues);
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param appStoreAppId  (required)
     * @param configId  (required)
     * @param updateAppStoreAppConfigurationValues  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateAppStoreConfigSettingValuesWithHttpInfo(String appId, String appStoreAppId, String configId, UpdateAppStoreAppConfigurationValuesBatch updateAppStoreAppConfigurationValues) throws ApiException {
        com.squareup.okhttp.Call call = updateAppStoreConfigSettingValuesValidateBeforeCall(appId, appStoreAppId, configId, updateAppStoreAppConfigurationValues, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param appStoreAppId  (required)
     * @param configId  (required)
     * @param updateAppStoreAppConfigurationValues  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateAppStoreConfigSettingValuesAsync(String appId, String appStoreAppId, String configId, UpdateAppStoreAppConfigurationValuesBatch updateAppStoreAppConfigurationValues, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateAppStoreConfigSettingValuesValidateBeforeCall(appId, appStoreAppId, configId, updateAppStoreAppConfigurationValues, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
