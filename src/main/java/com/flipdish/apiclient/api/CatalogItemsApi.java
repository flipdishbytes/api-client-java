/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.flipdish.apiclient.api;

import com.flipdish.apiclient.ApiCallback;
import com.flipdish.apiclient.ApiClient;
import com.flipdish.apiclient.ApiException;
import com.flipdish.apiclient.ApiResponse;
import com.flipdish.apiclient.Configuration;
import com.flipdish.apiclient.Pair;
import com.flipdish.apiclient.ProgressRequestBody;
import com.flipdish.apiclient.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.flipdish.apiclient.model.CatalogItem;
import com.flipdish.apiclient.model.CreateCatalogItem;
import com.flipdish.apiclient.model.RestApiErrorResult;
import com.flipdish.apiclient.model.RestApiForbiddenResult;
import com.flipdish.apiclient.model.RestApiPaginationResultCatalogItem;
import com.flipdish.apiclient.model.RestApiResultCatalogItem;
import com.flipdish.apiclient.model.RestApiUnauthorizedResult;
import com.flipdish.apiclient.model.UpdateCatalogItem;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CatalogItemsApi {
    private ApiClient apiClient;
    private Map<String, String> headers;

    public CatalogItemsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CatalogItemsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public void setHeadersOverrides(Map<String, String> headers) {
        this.headers = headers;
    }

    /**
     * Build call for archiveCatalogItem
     * @param appId  (required)
     * @param catalogItemId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call archiveCatalogItemCall(String appId, String catalogItemId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/catalog/items/{catalogItemId}/archive"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "catalogItemId" + "\\}", apiClient.escapeString(catalogItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call archiveCatalogItemValidateBeforeCall(String appId, String catalogItemId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling archiveCatalogItem(Async)");
        }
        
        // verify the required parameter 'catalogItemId' is set
        if (catalogItemId == null) {
            throw new ApiException("Missing the required parameter 'catalogItemId' when calling archiveCatalogItem(Async)");
        }
        

        com.squareup.okhttp.Call call = archiveCatalogItemCall(appId, catalogItemId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Archive Catalog Item
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param appId  (required)
     * @param catalogItemId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void archiveCatalogItem(String appId, String catalogItemId) throws ApiException {
        archiveCatalogItemWithHttpInfo(appId, catalogItemId);
    }

    /**
     * Archive Catalog Item
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param appId  (required)
     * @param catalogItemId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> archiveCatalogItemWithHttpInfo(String appId, String catalogItemId) throws ApiException {
        com.squareup.okhttp.Call call = archiveCatalogItemValidateBeforeCall(appId, catalogItemId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Archive Catalog Item (asynchronously)
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param appId  (required)
     * @param catalogItemId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call archiveCatalogItemAsync(String appId, String catalogItemId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = archiveCatalogItemValidateBeforeCall(appId, catalogItemId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createCatalogItem
     * @param appId  (required)
     * @param createCatalogItem  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createCatalogItemCall(String appId, CreateCatalogItem createCatalogItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = createCatalogItem;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/catalog/items"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createCatalogItemValidateBeforeCall(String appId, CreateCatalogItem createCatalogItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling createCatalogItem(Async)");
        }
        
        // verify the required parameter 'createCatalogItem' is set
        if (createCatalogItem == null) {
            throw new ApiException("Missing the required parameter 'createCatalogItem' when calling createCatalogItem(Async)");
        }
        

        com.squareup.okhttp.Call call = createCatalogItemCall(appId, createCatalogItem, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a Catalog Item
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param appId  (required)
     * @param createCatalogItem  (required)
     * @return RestApiResultCatalogItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultCatalogItem createCatalogItem(String appId, CreateCatalogItem createCatalogItem) throws ApiException {
        ApiResponse<RestApiResultCatalogItem> resp = createCatalogItemWithHttpInfo(appId, createCatalogItem);
        return resp.getData();
    }

    /**
     * Create a Catalog Item
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param appId  (required)
     * @param createCatalogItem  (required)
     * @return ApiResponse&lt;RestApiResultCatalogItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultCatalogItem> createCatalogItemWithHttpInfo(String appId, CreateCatalogItem createCatalogItem) throws ApiException {
        com.squareup.okhttp.Call call = createCatalogItemValidateBeforeCall(appId, createCatalogItem, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultCatalogItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a Catalog Item (asynchronously)
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param appId  (required)
     * @param createCatalogItem  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createCatalogItemAsync(String appId, CreateCatalogItem createCatalogItem, final ApiCallback<RestApiResultCatalogItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createCatalogItemValidateBeforeCall(appId, createCatalogItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultCatalogItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for duplicateCatalogItem
     * @param appId  (required)
     * @param catalogItemId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call duplicateCatalogItemCall(String appId, String catalogItemId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/catalog/items/{catalogItemId}/duplicate"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "catalogItemId" + "\\}", apiClient.escapeString(catalogItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call duplicateCatalogItemValidateBeforeCall(String appId, String catalogItemId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling duplicateCatalogItem(Async)");
        }
        
        // verify the required parameter 'catalogItemId' is set
        if (catalogItemId == null) {
            throw new ApiException("Missing the required parameter 'catalogItemId' when calling duplicateCatalogItem(Async)");
        }
        

        com.squareup.okhttp.Call call = duplicateCatalogItemCall(appId, catalogItemId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Duplicate Catalog Item
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param appId  (required)
     * @param catalogItemId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void duplicateCatalogItem(String appId, String catalogItemId) throws ApiException {
        duplicateCatalogItemWithHttpInfo(appId, catalogItemId);
    }

    /**
     * Duplicate Catalog Item
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param appId  (required)
     * @param catalogItemId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> duplicateCatalogItemWithHttpInfo(String appId, String catalogItemId) throws ApiException {
        com.squareup.okhttp.Call call = duplicateCatalogItemValidateBeforeCall(appId, catalogItemId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Duplicate Catalog Item (asynchronously)
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param appId  (required)
     * @param catalogItemId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call duplicateCatalogItemAsync(String appId, String catalogItemId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = duplicateCatalogItemValidateBeforeCall(appId, catalogItemId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getCatalogItemById
     * @param appId  (required)
     * @param catalogItemId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCatalogItemByIdCall(String appId, String catalogItemId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/catalog/items/{catalogItemId}"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "catalogItemId" + "\\}", apiClient.escapeString(catalogItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCatalogItemByIdValidateBeforeCall(String appId, String catalogItemId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getCatalogItemById(Async)");
        }
        
        // verify the required parameter 'catalogItemId' is set
        if (catalogItemId == null) {
            throw new ApiException("Missing the required parameter 'catalogItemId' when calling getCatalogItemById(Async)");
        }
        

        com.squareup.okhttp.Call call = getCatalogItemByIdCall(appId, catalogItemId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get item by Id
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param appId  (required)
     * @param catalogItemId  (required)
     * @return CatalogItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CatalogItem getCatalogItemById(String appId, String catalogItemId) throws ApiException {
        ApiResponse<CatalogItem> resp = getCatalogItemByIdWithHttpInfo(appId, catalogItemId);
        return resp.getData();
    }

    /**
     * Get item by Id
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param appId  (required)
     * @param catalogItemId  (required)
     * @return ApiResponse&lt;CatalogItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CatalogItem> getCatalogItemByIdWithHttpInfo(String appId, String catalogItemId) throws ApiException {
        com.squareup.okhttp.Call call = getCatalogItemByIdValidateBeforeCall(appId, catalogItemId, null, null);
        Type localVarReturnType = new TypeToken<CatalogItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get item by Id (asynchronously)
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param appId  (required)
     * @param catalogItemId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCatalogItemByIdAsync(String appId, String catalogItemId, final ApiCallback<CatalogItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCatalogItemByIdValidateBeforeCall(appId, catalogItemId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CatalogItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getItems
     * @param appId  (required)
     * @param itemTypes  (required)
     * @param searchTerm  (optional)
     * @param page  (optional)
     * @param limit  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getItemsCall(String appId, List<String> itemTypes, String searchTerm, Integer page, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/catalog/items"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (itemTypes != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "itemTypes", itemTypes));
        if (searchTerm != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("searchTerm", searchTerm));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getItemsValidateBeforeCall(String appId, List<String> itemTypes, String searchTerm, Integer page, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getItems(Async)");
        }
        
        // verify the required parameter 'itemTypes' is set
        if (itemTypes == null) {
            throw new ApiException("Missing the required parameter 'itemTypes' when calling getItems(Async)");
        }
        

        com.squareup.okhttp.Call call = getItemsCall(appId, itemTypes, searchTerm, page, limit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get paginated items by app name id filtered by types
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param appId  (required)
     * @param itemTypes  (required)
     * @param searchTerm  (optional)
     * @param page  (optional)
     * @param limit  (optional)
     * @return RestApiPaginationResultCatalogItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiPaginationResultCatalogItem getItems(String appId, List<String> itemTypes, String searchTerm, Integer page, Integer limit) throws ApiException {
        ApiResponse<RestApiPaginationResultCatalogItem> resp = getItemsWithHttpInfo(appId, itemTypes, searchTerm, page, limit);
        return resp.getData();
    }

    /**
     * Get paginated items by app name id filtered by types
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param appId  (required)
     * @param itemTypes  (required)
     * @param searchTerm  (optional)
     * @param page  (optional)
     * @param limit  (optional)
     * @return ApiResponse&lt;RestApiPaginationResultCatalogItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiPaginationResultCatalogItem> getItemsWithHttpInfo(String appId, List<String> itemTypes, String searchTerm, Integer page, Integer limit) throws ApiException {
        com.squareup.okhttp.Call call = getItemsValidateBeforeCall(appId, itemTypes, searchTerm, page, limit, null, null);
        Type localVarReturnType = new TypeToken<RestApiPaginationResultCatalogItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get paginated items by app name id filtered by types (asynchronously)
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param appId  (required)
     * @param itemTypes  (required)
     * @param searchTerm  (optional)
     * @param page  (optional)
     * @param limit  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getItemsAsync(String appId, List<String> itemTypes, String searchTerm, Integer page, Integer limit, final ApiCallback<RestApiPaginationResultCatalogItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getItemsValidateBeforeCall(appId, itemTypes, searchTerm, page, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiPaginationResultCatalogItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateCatalogItem
     * @param appId  (required)
     * @param catalogItemId  (required)
     * @param updateCatalogItem  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateCatalogItemCall(String appId, String catalogItemId, UpdateCatalogItem updateCatalogItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = updateCatalogItem;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/catalog/items/{catalogItemId}"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "catalogItemId" + "\\}", apiClient.escapeString(catalogItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateCatalogItemValidateBeforeCall(String appId, String catalogItemId, UpdateCatalogItem updateCatalogItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling updateCatalogItem(Async)");
        }
        
        // verify the required parameter 'catalogItemId' is set
        if (catalogItemId == null) {
            throw new ApiException("Missing the required parameter 'catalogItemId' when calling updateCatalogItem(Async)");
        }
        
        // verify the required parameter 'updateCatalogItem' is set
        if (updateCatalogItem == null) {
            throw new ApiException("Missing the required parameter 'updateCatalogItem' when calling updateCatalogItem(Async)");
        }
        

        com.squareup.okhttp.Call call = updateCatalogItemCall(appId, catalogItemId, updateCatalogItem, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update Catalog Item
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param appId  (required)
     * @param catalogItemId  (required)
     * @param updateCatalogItem  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateCatalogItem(String appId, String catalogItemId, UpdateCatalogItem updateCatalogItem) throws ApiException {
        updateCatalogItemWithHttpInfo(appId, catalogItemId, updateCatalogItem);
    }

    /**
     * Update Catalog Item
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param appId  (required)
     * @param catalogItemId  (required)
     * @param updateCatalogItem  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateCatalogItemWithHttpInfo(String appId, String catalogItemId, UpdateCatalogItem updateCatalogItem) throws ApiException {
        com.squareup.okhttp.Call call = updateCatalogItemValidateBeforeCall(appId, catalogItemId, updateCatalogItem, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update Catalog Item (asynchronously)
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param appId  (required)
     * @param catalogItemId  (required)
     * @param updateCatalogItem  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateCatalogItemAsync(String appId, String catalogItemId, UpdateCatalogItem updateCatalogItem, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateCatalogItemValidateBeforeCall(appId, catalogItemId, updateCatalogItem, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
