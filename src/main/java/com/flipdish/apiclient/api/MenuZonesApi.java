/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.flipdish.apiclient.api;

import com.flipdish.apiclient.ApiCallback;
import com.flipdish.apiclient.ApiClient;
import com.flipdish.apiclient.ApiException;
import com.flipdish.apiclient.ApiResponse;
import com.flipdish.apiclient.Configuration;
import com.flipdish.apiclient.Pair;
import com.flipdish.apiclient.ProgressRequestBody;
import com.flipdish.apiclient.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.flipdish.apiclient.model.HttpPostedFileBase;
import com.flipdish.apiclient.model.MenuZone;
import com.flipdish.apiclient.model.RestApiArrayResultMenuZone;
import com.flipdish.apiclient.model.RestApiErrorResult;
import com.flipdish.apiclient.model.RestApiForbiddenResult;
import com.flipdish.apiclient.model.RestApiResultMenuZone;
import com.flipdish.apiclient.model.RestApiUnauthorizedResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MenuZonesApi {
    private ApiClient apiClient;

    public MenuZonesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MenuZonesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addMenuZone
     * @param menuId  (required)
     * @param menuZone  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addMenuZoneCall(Integer menuId, MenuZone menuZone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = menuZone;

        // create path and map variables
        String localVarPath = "/api/v1.0/menus/{menuId}/zones"
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addMenuZoneValidateBeforeCall(Integer menuId, MenuZone menuZone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling addMenuZone(Async)");
        }
        
        // verify the required parameter 'menuZone' is set
        if (menuZone == null) {
            throw new ApiException("Missing the required parameter 'menuZone' when calling addMenuZone(Async)");
        }
        

        com.squareup.okhttp.Call call = addMenuZoneCall(menuId, menuZone, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param menuId  (required)
     * @param menuZone  (required)
     * @return RestApiResultMenuZone
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultMenuZone addMenuZone(Integer menuId, MenuZone menuZone) throws ApiException {
        ApiResponse<RestApiResultMenuZone> resp = addMenuZoneWithHttpInfo(menuId, menuZone);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param menuId  (required)
     * @param menuZone  (required)
     * @return ApiResponse&lt;RestApiResultMenuZone&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultMenuZone> addMenuZoneWithHttpInfo(Integer menuId, MenuZone menuZone) throws ApiException {
        com.squareup.okhttp.Call call = addMenuZoneValidateBeforeCall(menuId, menuZone, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultMenuZone>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param menuId  (required)
     * @param menuZone  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addMenuZoneAsync(Integer menuId, MenuZone menuZone, final ApiCallback<RestApiResultMenuZone> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addMenuZoneValidateBeforeCall(menuId, menuZone, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultMenuZone>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteMenuZone
     * @param menuZoneId  (required)
     * @param menuId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteMenuZoneCall(Integer menuZoneId, String menuId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/menus/{menuId}/zones/{menuZoneId}"
            .replaceAll("\\{" + "menuZoneId" + "\\}", apiClient.escapeString(menuZoneId.toString()))
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteMenuZoneValidateBeforeCall(Integer menuZoneId, String menuId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuZoneId' is set
        if (menuZoneId == null) {
            throw new ApiException("Missing the required parameter 'menuZoneId' when calling deleteMenuZone(Async)");
        }
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling deleteMenuZone(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteMenuZoneCall(menuZoneId, menuId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param menuZoneId  (required)
     * @param menuId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteMenuZone(Integer menuZoneId, String menuId) throws ApiException {
        deleteMenuZoneWithHttpInfo(menuZoneId, menuId);
    }

    /**
     * 
     * 
     * @param menuZoneId  (required)
     * @param menuId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteMenuZoneWithHttpInfo(Integer menuZoneId, String menuId) throws ApiException {
        com.squareup.okhttp.Call call = deleteMenuZoneValidateBeforeCall(menuZoneId, menuId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param menuZoneId  (required)
     * @param menuId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteMenuZoneAsync(Integer menuZoneId, String menuId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteMenuZoneValidateBeforeCall(menuZoneId, menuId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for flipMenuZones
     * @param menuZoneId  (required)
     * @param menuZoneI2  (required)
     * @param menuId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call flipMenuZonesCall(Integer menuZoneId, Integer menuZoneI2, String menuId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/menus/{menuId}/zones/{menuZoneId}/flip/{menuZoneI2}"
            .replaceAll("\\{" + "menuZoneId" + "\\}", apiClient.escapeString(menuZoneId.toString()))
            .replaceAll("\\{" + "menuZoneI2" + "\\}", apiClient.escapeString(menuZoneI2.toString()))
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call flipMenuZonesValidateBeforeCall(Integer menuZoneId, Integer menuZoneI2, String menuId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuZoneId' is set
        if (menuZoneId == null) {
            throw new ApiException("Missing the required parameter 'menuZoneId' when calling flipMenuZones(Async)");
        }
        
        // verify the required parameter 'menuZoneI2' is set
        if (menuZoneI2 == null) {
            throw new ApiException("Missing the required parameter 'menuZoneI2' when calling flipMenuZones(Async)");
        }
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling flipMenuZones(Async)");
        }
        

        com.squareup.okhttp.Call call = flipMenuZonesCall(menuZoneId, menuZoneI2, menuId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param menuZoneId  (required)
     * @param menuZoneI2  (required)
     * @param menuId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void flipMenuZones(Integer menuZoneId, Integer menuZoneI2, String menuId) throws ApiException {
        flipMenuZonesWithHttpInfo(menuZoneId, menuZoneI2, menuId);
    }

    /**
     * 
     * 
     * @param menuZoneId  (required)
     * @param menuZoneI2  (required)
     * @param menuId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> flipMenuZonesWithHttpInfo(Integer menuZoneId, Integer menuZoneI2, String menuId) throws ApiException {
        com.squareup.okhttp.Call call = flipMenuZonesValidateBeforeCall(menuZoneId, menuZoneI2, menuId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param menuZoneId  (required)
     * @param menuZoneI2  (required)
     * @param menuId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call flipMenuZonesAsync(Integer menuZoneId, Integer menuZoneI2, String menuId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = flipMenuZonesValidateBeforeCall(menuZoneId, menuZoneI2, menuId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getMenuZone
     * @param menuId  (required)
     * @param menuZoneId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMenuZoneCall(Integer menuId, Integer menuZoneId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/menus/{menuId}/zones/{menuZoneId}"
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()))
            .replaceAll("\\{" + "menuZoneId" + "\\}", apiClient.escapeString(menuZoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMenuZoneValidateBeforeCall(Integer menuId, Integer menuZoneId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling getMenuZone(Async)");
        }
        
        // verify the required parameter 'menuZoneId' is set
        if (menuZoneId == null) {
            throw new ApiException("Missing the required parameter 'menuZoneId' when calling getMenuZone(Async)");
        }
        

        com.squareup.okhttp.Call call = getMenuZoneCall(menuId, menuZoneId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param menuId  (required)
     * @param menuZoneId  (required)
     * @return RestApiResultMenuZone
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultMenuZone getMenuZone(Integer menuId, Integer menuZoneId) throws ApiException {
        ApiResponse<RestApiResultMenuZone> resp = getMenuZoneWithHttpInfo(menuId, menuZoneId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param menuId  (required)
     * @param menuZoneId  (required)
     * @return ApiResponse&lt;RestApiResultMenuZone&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultMenuZone> getMenuZoneWithHttpInfo(Integer menuId, Integer menuZoneId) throws ApiException {
        com.squareup.okhttp.Call call = getMenuZoneValidateBeforeCall(menuId, menuZoneId, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultMenuZone>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param menuId  (required)
     * @param menuZoneId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMenuZoneAsync(Integer menuId, Integer menuZoneId, final ApiCallback<RestApiResultMenuZone> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMenuZoneValidateBeforeCall(menuId, menuZoneId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultMenuZone>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getMenuZonesForMenu
     * @param menuId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMenuZonesForMenuCall(Integer menuId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/menus/{menuId}/zones"
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMenuZonesForMenuValidateBeforeCall(Integer menuId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling getMenuZonesForMenu(Async)");
        }
        

        com.squareup.okhttp.Call call = getMenuZonesForMenuCall(menuId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param menuId  (required)
     * @return RestApiArrayResultMenuZone
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiArrayResultMenuZone getMenuZonesForMenu(Integer menuId) throws ApiException {
        ApiResponse<RestApiArrayResultMenuZone> resp = getMenuZonesForMenuWithHttpInfo(menuId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param menuId  (required)
     * @return ApiResponse&lt;RestApiArrayResultMenuZone&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiArrayResultMenuZone> getMenuZonesForMenuWithHttpInfo(Integer menuId) throws ApiException {
        com.squareup.okhttp.Call call = getMenuZonesForMenuValidateBeforeCall(menuId, null, null);
        Type localVarReturnType = new TypeToken<RestApiArrayResultMenuZone>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param menuId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMenuZonesForMenuAsync(Integer menuId, final ApiCallback<RestApiArrayResultMenuZone> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMenuZonesForMenuValidateBeforeCall(menuId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiArrayResultMenuZone>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setMenuSectionMenuZone
     * @param menuZoneId  (required)
     * @param description  (required)
     * @param menuId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setMenuSectionMenuZoneCall(Integer menuZoneId, String description, String menuId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = description;

        // create path and map variables
        String localVarPath = "/api/v1.0/menus/{menuId}/zones/{menuZoneId}/description"
            .replaceAll("\\{" + "menuZoneId" + "\\}", apiClient.escapeString(menuZoneId.toString()))
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setMenuSectionMenuZoneValidateBeforeCall(Integer menuZoneId, String description, String menuId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuZoneId' is set
        if (menuZoneId == null) {
            throw new ApiException("Missing the required parameter 'menuZoneId' when calling setMenuSectionMenuZone(Async)");
        }
        
        // verify the required parameter 'description' is set
        if (description == null) {
            throw new ApiException("Missing the required parameter 'description' when calling setMenuSectionMenuZone(Async)");
        }
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling setMenuSectionMenuZone(Async)");
        }
        

        com.squareup.okhttp.Call call = setMenuSectionMenuZoneCall(menuZoneId, description, menuId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param menuZoneId  (required)
     * @param description  (required)
     * @param menuId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void setMenuSectionMenuZone(Integer menuZoneId, String description, String menuId) throws ApiException {
        setMenuSectionMenuZoneWithHttpInfo(menuZoneId, description, menuId);
    }

    /**
     * 
     * 
     * @param menuZoneId  (required)
     * @param description  (required)
     * @param menuId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> setMenuSectionMenuZoneWithHttpInfo(Integer menuZoneId, String description, String menuId) throws ApiException {
        com.squareup.okhttp.Call call = setMenuSectionMenuZoneValidateBeforeCall(menuZoneId, description, menuId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param menuZoneId  (required)
     * @param description  (required)
     * @param menuId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setMenuSectionMenuZoneAsync(Integer menuZoneId, String description, String menuId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setMenuSectionMenuZoneValidateBeforeCall(menuZoneId, description, menuId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for setMenuSectionMenuZone_0
     * @param menuZoneId  (required)
     * @param menuSectionId  (required)
     * @param menuId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setMenuSectionMenuZone_0Call(Integer menuZoneId, Integer menuSectionId, String menuId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/menus/{menuId}/zones/{menuZoneId}/section/{menuSectionId}"
            .replaceAll("\\{" + "menuZoneId" + "\\}", apiClient.escapeString(menuZoneId.toString()))
            .replaceAll("\\{" + "menuSectionId" + "\\}", apiClient.escapeString(menuSectionId.toString()))
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setMenuSectionMenuZone_0ValidateBeforeCall(Integer menuZoneId, Integer menuSectionId, String menuId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuZoneId' is set
        if (menuZoneId == null) {
            throw new ApiException("Missing the required parameter 'menuZoneId' when calling setMenuSectionMenuZone_0(Async)");
        }
        
        // verify the required parameter 'menuSectionId' is set
        if (menuSectionId == null) {
            throw new ApiException("Missing the required parameter 'menuSectionId' when calling setMenuSectionMenuZone_0(Async)");
        }
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling setMenuSectionMenuZone_0(Async)");
        }
        

        com.squareup.okhttp.Call call = setMenuSectionMenuZone_0Call(menuZoneId, menuSectionId, menuId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param menuZoneId  (required)
     * @param menuSectionId  (required)
     * @param menuId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void setMenuSectionMenuZone_0(Integer menuZoneId, Integer menuSectionId, String menuId) throws ApiException {
        setMenuSectionMenuZone_0WithHttpInfo(menuZoneId, menuSectionId, menuId);
    }

    /**
     * 
     * 
     * @param menuZoneId  (required)
     * @param menuSectionId  (required)
     * @param menuId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> setMenuSectionMenuZone_0WithHttpInfo(Integer menuZoneId, Integer menuSectionId, String menuId) throws ApiException {
        com.squareup.okhttp.Call call = setMenuSectionMenuZone_0ValidateBeforeCall(menuZoneId, menuSectionId, menuId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param menuZoneId  (required)
     * @param menuSectionId  (required)
     * @param menuId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setMenuSectionMenuZone_0Async(Integer menuZoneId, Integer menuSectionId, String menuId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setMenuSectionMenuZone_0ValidateBeforeCall(menuZoneId, menuSectionId, menuId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for setMenuZoneName
     * @param menuZoneId  (required)
     * @param menuZoneName  (required)
     * @param menuId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setMenuZoneNameCall(Integer menuZoneId, String menuZoneName, String menuId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/menus/{menuId}/zones/{menuZoneId}/name/{menuZoneName}"
            .replaceAll("\\{" + "menuZoneId" + "\\}", apiClient.escapeString(menuZoneId.toString()))
            .replaceAll("\\{" + "menuZoneName" + "\\}", apiClient.escapeString(menuZoneName.toString()))
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setMenuZoneNameValidateBeforeCall(Integer menuZoneId, String menuZoneName, String menuId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuZoneId' is set
        if (menuZoneId == null) {
            throw new ApiException("Missing the required parameter 'menuZoneId' when calling setMenuZoneName(Async)");
        }
        
        // verify the required parameter 'menuZoneName' is set
        if (menuZoneName == null) {
            throw new ApiException("Missing the required parameter 'menuZoneName' when calling setMenuZoneName(Async)");
        }
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling setMenuZoneName(Async)");
        }
        

        com.squareup.okhttp.Call call = setMenuZoneNameCall(menuZoneId, menuZoneName, menuId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param menuZoneId  (required)
     * @param menuZoneName  (required)
     * @param menuId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void setMenuZoneName(Integer menuZoneId, String menuZoneName, String menuId) throws ApiException {
        setMenuZoneNameWithHttpInfo(menuZoneId, menuZoneName, menuId);
    }

    /**
     * 
     * 
     * @param menuZoneId  (required)
     * @param menuZoneName  (required)
     * @param menuId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> setMenuZoneNameWithHttpInfo(Integer menuZoneId, String menuZoneName, String menuId) throws ApiException {
        com.squareup.okhttp.Call call = setMenuZoneNameValidateBeforeCall(menuZoneId, menuZoneName, menuId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param menuZoneId  (required)
     * @param menuZoneName  (required)
     * @param menuId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setMenuZoneNameAsync(Integer menuZoneId, String menuZoneName, String menuId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setMenuZoneNameValidateBeforeCall(menuZoneId, menuZoneName, menuId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateMenuZone
     * @param menuId  (required)
     * @param menuZoneId  (required)
     * @param menuZone  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateMenuZoneCall(Integer menuId, Integer menuZoneId, MenuZone menuZone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = menuZone;

        // create path and map variables
        String localVarPath = "/api/v1.0/menus/{menuId}/zones/{menuZoneId}"
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()))
            .replaceAll("\\{" + "menuZoneId" + "\\}", apiClient.escapeString(menuZoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateMenuZoneValidateBeforeCall(Integer menuId, Integer menuZoneId, MenuZone menuZone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling updateMenuZone(Async)");
        }
        
        // verify the required parameter 'menuZoneId' is set
        if (menuZoneId == null) {
            throw new ApiException("Missing the required parameter 'menuZoneId' when calling updateMenuZone(Async)");
        }
        
        // verify the required parameter 'menuZone' is set
        if (menuZone == null) {
            throw new ApiException("Missing the required parameter 'menuZone' when calling updateMenuZone(Async)");
        }
        

        com.squareup.okhttp.Call call = updateMenuZoneCall(menuId, menuZoneId, menuZone, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param menuId  (required)
     * @param menuZoneId  (required)
     * @param menuZone  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateMenuZone(Integer menuId, Integer menuZoneId, MenuZone menuZone) throws ApiException {
        updateMenuZoneWithHttpInfo(menuId, menuZoneId, menuZone);
    }

    /**
     * 
     * 
     * @param menuId  (required)
     * @param menuZoneId  (required)
     * @param menuZone  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateMenuZoneWithHttpInfo(Integer menuId, Integer menuZoneId, MenuZone menuZone) throws ApiException {
        com.squareup.okhttp.Call call = updateMenuZoneValidateBeforeCall(menuId, menuZoneId, menuZone, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param menuId  (required)
     * @param menuZoneId  (required)
     * @param menuZone  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateMenuZoneAsync(Integer menuId, Integer menuZoneId, MenuZone menuZone, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateMenuZoneValidateBeforeCall(menuId, menuZoneId, menuZone, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for uploadMenuZoneImage
     * @param menuZoneId  (required)
     * @param file  (required)
     * @param menuId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call uploadMenuZoneImageCall(Integer menuZoneId, List<HttpPostedFileBase> file, String menuId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = file;

        // create path and map variables
        String localVarPath = "/api/v1.0/menus/{menuId}/zones/{menuZoneId}/image"
            .replaceAll("\\{" + "menuZoneId" + "\\}", apiClient.escapeString(menuZoneId.toString()))
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call uploadMenuZoneImageValidateBeforeCall(Integer menuZoneId, List<HttpPostedFileBase> file, String menuId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuZoneId' is set
        if (menuZoneId == null) {
            throw new ApiException("Missing the required parameter 'menuZoneId' when calling uploadMenuZoneImage(Async)");
        }
        
        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling uploadMenuZoneImage(Async)");
        }
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling uploadMenuZoneImage(Async)");
        }
        

        com.squareup.okhttp.Call call = uploadMenuZoneImageCall(menuZoneId, file, menuId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param menuZoneId  (required)
     * @param file  (required)
     * @param menuId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void uploadMenuZoneImage(Integer menuZoneId, List<HttpPostedFileBase> file, String menuId) throws ApiException {
        uploadMenuZoneImageWithHttpInfo(menuZoneId, file, menuId);
    }

    /**
     * 
     * 
     * @param menuZoneId  (required)
     * @param file  (required)
     * @param menuId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> uploadMenuZoneImageWithHttpInfo(Integer menuZoneId, List<HttpPostedFileBase> file, String menuId) throws ApiException {
        com.squareup.okhttp.Call call = uploadMenuZoneImageValidateBeforeCall(menuZoneId, file, menuId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param menuZoneId  (required)
     * @param file  (required)
     * @param menuId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call uploadMenuZoneImageAsync(Integer menuZoneId, List<HttpPostedFileBase> file, String menuId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = uploadMenuZoneImageValidateBeforeCall(menuZoneId, file, menuId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for uploadMenuZoneImage_0
     * @param menuZoneId  (required)
     * @param menuId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call uploadMenuZoneImage_0Call(Integer menuZoneId, String menuId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/menus/{menuId}/zones/{menuZoneId}/image"
            .replaceAll("\\{" + "menuZoneId" + "\\}", apiClient.escapeString(menuZoneId.toString()))
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call uploadMenuZoneImage_0ValidateBeforeCall(Integer menuZoneId, String menuId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuZoneId' is set
        if (menuZoneId == null) {
            throw new ApiException("Missing the required parameter 'menuZoneId' when calling uploadMenuZoneImage_0(Async)");
        }
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling uploadMenuZoneImage_0(Async)");
        }
        

        com.squareup.okhttp.Call call = uploadMenuZoneImage_0Call(menuZoneId, menuId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param menuZoneId  (required)
     * @param menuId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void uploadMenuZoneImage_0(Integer menuZoneId, String menuId) throws ApiException {
        uploadMenuZoneImage_0WithHttpInfo(menuZoneId, menuId);
    }

    /**
     * 
     * 
     * @param menuZoneId  (required)
     * @param menuId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> uploadMenuZoneImage_0WithHttpInfo(Integer menuZoneId, String menuId) throws ApiException {
        com.squareup.okhttp.Call call = uploadMenuZoneImage_0ValidateBeforeCall(menuZoneId, menuId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param menuZoneId  (required)
     * @param menuId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call uploadMenuZoneImage_0Async(Integer menuZoneId, String menuId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = uploadMenuZoneImage_0ValidateBeforeCall(menuZoneId, menuId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
