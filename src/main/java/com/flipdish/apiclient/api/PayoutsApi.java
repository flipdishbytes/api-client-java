/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.flipdish.apiclient.api;

import com.flipdish.apiclient.ApiCallback;
import com.flipdish.apiclient.ApiClient;
import com.flipdish.apiclient.ApiException;
import com.flipdish.apiclient.ApiResponse;
import com.flipdish.apiclient.Configuration;
import com.flipdish.apiclient.Pair;
import com.flipdish.apiclient.ProgressRequestBody;
import com.flipdish.apiclient.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.threeten.bp.OffsetDateTime;
import com.flipdish.apiclient.model.PayoutDetail;
import com.flipdish.apiclient.model.RestApiArrayResultPayoutSummary;
import com.flipdish.apiclient.model.RestApiErrorResult;
import com.flipdish.apiclient.model.RestApiForbiddenResult;
import com.flipdish.apiclient.model.RestApiPaginationResultPayout;
import com.flipdish.apiclient.model.RestApiPaginationResultPayoutChargeback;
import com.flipdish.apiclient.model.RestApiPaginationResultPayoutOrder;
import com.flipdish.apiclient.model.RestApiPaginationResultPayoutOtherCharge;
import com.flipdish.apiclient.model.RestApiPaginationResultPayoutRefund;
import com.flipdish.apiclient.model.RestApiUnauthorizedResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PayoutsApi {
    private ApiClient apiClient;

    public PayoutsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PayoutsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for exportPayoutChargebacks
     * @param appId  (required)
     * @param bankAccountId  (required)
     * @param payoutId  (required)
     * @param storeIds  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call exportPayoutChargebacksCall(String appId, Integer bankAccountId, Integer payoutId, List<Integer> storeIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/bankaccounts/{bankAccountId}/payouts/{payoutId}/chargebacks/export"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "bankAccountId" + "\\}", apiClient.escapeString(bankAccountId.toString()))
            .replaceAll("\\{" + "payoutId" + "\\}", apiClient.escapeString(payoutId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storeIds != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "storeIds", storeIds));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call exportPayoutChargebacksValidateBeforeCall(String appId, Integer bankAccountId, Integer payoutId, List<Integer> storeIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling exportPayoutChargebacks(Async)");
        }
        
        // verify the required parameter 'bankAccountId' is set
        if (bankAccountId == null) {
            throw new ApiException("Missing the required parameter 'bankAccountId' when calling exportPayoutChargebacks(Async)");
        }
        
        // verify the required parameter 'payoutId' is set
        if (payoutId == null) {
            throw new ApiException("Missing the required parameter 'payoutId' when calling exportPayoutChargebacks(Async)");
        }
        

        com.squareup.okhttp.Call call = exportPayoutChargebacksCall(appId, bankAccountId, payoutId, storeIds, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Export a list of payout&#39;s chargebacks as CSV
     * 
     * @param appId  (required)
     * @param bankAccountId  (required)
     * @param payoutId  (required)
     * @param storeIds  (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String exportPayoutChargebacks(String appId, Integer bankAccountId, Integer payoutId, List<Integer> storeIds) throws ApiException {
        ApiResponse<String> resp = exportPayoutChargebacksWithHttpInfo(appId, bankAccountId, payoutId, storeIds);
        return resp.getData();
    }

    /**
     * Export a list of payout&#39;s chargebacks as CSV
     * 
     * @param appId  (required)
     * @param bankAccountId  (required)
     * @param payoutId  (required)
     * @param storeIds  (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> exportPayoutChargebacksWithHttpInfo(String appId, Integer bankAccountId, Integer payoutId, List<Integer> storeIds) throws ApiException {
        com.squareup.okhttp.Call call = exportPayoutChargebacksValidateBeforeCall(appId, bankAccountId, payoutId, storeIds, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Export a list of payout&#39;s chargebacks as CSV (asynchronously)
     * 
     * @param appId  (required)
     * @param bankAccountId  (required)
     * @param payoutId  (required)
     * @param storeIds  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call exportPayoutChargebacksAsync(String appId, Integer bankAccountId, Integer payoutId, List<Integer> storeIds, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = exportPayoutChargebacksValidateBeforeCall(appId, bankAccountId, payoutId, storeIds, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for exportPayoutOrders
     * @param appId  (required)
     * @param bankAccountId  (required)
     * @param payoutId  (required)
     * @param storeIds  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call exportPayoutOrdersCall(String appId, Integer bankAccountId, Integer payoutId, List<Integer> storeIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/bankaccounts/{bankAccountId}/payouts/{payoutId}/orders/export"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "bankAccountId" + "\\}", apiClient.escapeString(bankAccountId.toString()))
            .replaceAll("\\{" + "payoutId" + "\\}", apiClient.escapeString(payoutId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storeIds != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "storeIds", storeIds));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call exportPayoutOrdersValidateBeforeCall(String appId, Integer bankAccountId, Integer payoutId, List<Integer> storeIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling exportPayoutOrders(Async)");
        }
        
        // verify the required parameter 'bankAccountId' is set
        if (bankAccountId == null) {
            throw new ApiException("Missing the required parameter 'bankAccountId' when calling exportPayoutOrders(Async)");
        }
        
        // verify the required parameter 'payoutId' is set
        if (payoutId == null) {
            throw new ApiException("Missing the required parameter 'payoutId' when calling exportPayoutOrders(Async)");
        }
        

        com.squareup.okhttp.Call call = exportPayoutOrdersCall(appId, bankAccountId, payoutId, storeIds, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Export a list of payout&#39;s orders as CSV
     * 
     * @param appId  (required)
     * @param bankAccountId  (required)
     * @param payoutId  (required)
     * @param storeIds  (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String exportPayoutOrders(String appId, Integer bankAccountId, Integer payoutId, List<Integer> storeIds) throws ApiException {
        ApiResponse<String> resp = exportPayoutOrdersWithHttpInfo(appId, bankAccountId, payoutId, storeIds);
        return resp.getData();
    }

    /**
     * Export a list of payout&#39;s orders as CSV
     * 
     * @param appId  (required)
     * @param bankAccountId  (required)
     * @param payoutId  (required)
     * @param storeIds  (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> exportPayoutOrdersWithHttpInfo(String appId, Integer bankAccountId, Integer payoutId, List<Integer> storeIds) throws ApiException {
        com.squareup.okhttp.Call call = exportPayoutOrdersValidateBeforeCall(appId, bankAccountId, payoutId, storeIds, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Export a list of payout&#39;s orders as CSV (asynchronously)
     * 
     * @param appId  (required)
     * @param bankAccountId  (required)
     * @param payoutId  (required)
     * @param storeIds  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call exportPayoutOrdersAsync(String appId, Integer bankAccountId, Integer payoutId, List<Integer> storeIds, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = exportPayoutOrdersValidateBeforeCall(appId, bankAccountId, payoutId, storeIds, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for exportPayoutOtherCharges
     * @param appId  (required)
     * @param bankAccountId  (required)
     * @param payoutId  (required)
     * @param storeIds  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call exportPayoutOtherChargesCall(String appId, Integer bankAccountId, Integer payoutId, List<Integer> storeIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/bankaccounts/{bankAccountId}/payouts/{payoutId}/othercharges/export"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "bankAccountId" + "\\}", apiClient.escapeString(bankAccountId.toString()))
            .replaceAll("\\{" + "payoutId" + "\\}", apiClient.escapeString(payoutId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storeIds != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "storeIds", storeIds));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call exportPayoutOtherChargesValidateBeforeCall(String appId, Integer bankAccountId, Integer payoutId, List<Integer> storeIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling exportPayoutOtherCharges(Async)");
        }
        
        // verify the required parameter 'bankAccountId' is set
        if (bankAccountId == null) {
            throw new ApiException("Missing the required parameter 'bankAccountId' when calling exportPayoutOtherCharges(Async)");
        }
        
        // verify the required parameter 'payoutId' is set
        if (payoutId == null) {
            throw new ApiException("Missing the required parameter 'payoutId' when calling exportPayoutOtherCharges(Async)");
        }
        

        com.squareup.okhttp.Call call = exportPayoutOtherChargesCall(appId, bankAccountId, payoutId, storeIds, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Export a list of payout&#39;s other charges as CSV
     * 
     * @param appId  (required)
     * @param bankAccountId  (required)
     * @param payoutId  (required)
     * @param storeIds  (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String exportPayoutOtherCharges(String appId, Integer bankAccountId, Integer payoutId, List<Integer> storeIds) throws ApiException {
        ApiResponse<String> resp = exportPayoutOtherChargesWithHttpInfo(appId, bankAccountId, payoutId, storeIds);
        return resp.getData();
    }

    /**
     * Export a list of payout&#39;s other charges as CSV
     * 
     * @param appId  (required)
     * @param bankAccountId  (required)
     * @param payoutId  (required)
     * @param storeIds  (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> exportPayoutOtherChargesWithHttpInfo(String appId, Integer bankAccountId, Integer payoutId, List<Integer> storeIds) throws ApiException {
        com.squareup.okhttp.Call call = exportPayoutOtherChargesValidateBeforeCall(appId, bankAccountId, payoutId, storeIds, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Export a list of payout&#39;s other charges as CSV (asynchronously)
     * 
     * @param appId  (required)
     * @param bankAccountId  (required)
     * @param payoutId  (required)
     * @param storeIds  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call exportPayoutOtherChargesAsync(String appId, Integer bankAccountId, Integer payoutId, List<Integer> storeIds, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = exportPayoutOtherChargesValidateBeforeCall(appId, bankAccountId, payoutId, storeIds, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for exportPayoutRefunds
     * @param appId  (required)
     * @param bankAccountId  (required)
     * @param payoutId  (required)
     * @param storeIds  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call exportPayoutRefundsCall(String appId, Integer bankAccountId, Integer payoutId, List<Integer> storeIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/bankaccounts/{bankAccountId}/payouts/{payoutId}/refunds/export"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "bankAccountId" + "\\}", apiClient.escapeString(bankAccountId.toString()))
            .replaceAll("\\{" + "payoutId" + "\\}", apiClient.escapeString(payoutId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storeIds != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "storeIds", storeIds));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call exportPayoutRefundsValidateBeforeCall(String appId, Integer bankAccountId, Integer payoutId, List<Integer> storeIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling exportPayoutRefunds(Async)");
        }
        
        // verify the required parameter 'bankAccountId' is set
        if (bankAccountId == null) {
            throw new ApiException("Missing the required parameter 'bankAccountId' when calling exportPayoutRefunds(Async)");
        }
        
        // verify the required parameter 'payoutId' is set
        if (payoutId == null) {
            throw new ApiException("Missing the required parameter 'payoutId' when calling exportPayoutRefunds(Async)");
        }
        

        com.squareup.okhttp.Call call = exportPayoutRefundsCall(appId, bankAccountId, payoutId, storeIds, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Export a list of payout&#39;s refunds as CSV
     * 
     * @param appId  (required)
     * @param bankAccountId  (required)
     * @param payoutId  (required)
     * @param storeIds  (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String exportPayoutRefunds(String appId, Integer bankAccountId, Integer payoutId, List<Integer> storeIds) throws ApiException {
        ApiResponse<String> resp = exportPayoutRefundsWithHttpInfo(appId, bankAccountId, payoutId, storeIds);
        return resp.getData();
    }

    /**
     * Export a list of payout&#39;s refunds as CSV
     * 
     * @param appId  (required)
     * @param bankAccountId  (required)
     * @param payoutId  (required)
     * @param storeIds  (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> exportPayoutRefundsWithHttpInfo(String appId, Integer bankAccountId, Integer payoutId, List<Integer> storeIds) throws ApiException {
        com.squareup.okhttp.Call call = exportPayoutRefundsValidateBeforeCall(appId, bankAccountId, payoutId, storeIds, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Export a list of payout&#39;s refunds as CSV (asynchronously)
     * 
     * @param appId  (required)
     * @param bankAccountId  (required)
     * @param payoutId  (required)
     * @param storeIds  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call exportPayoutRefundsAsync(String appId, Integer bankAccountId, Integer payoutId, List<Integer> storeIds, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = exportPayoutRefundsValidateBeforeCall(appId, bankAccountId, payoutId, storeIds, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for exportPayoutStores
     * @param appId  (required)
     * @param bankAccountId  (required)
     * @param payoutId  (required)
     * @param storeIds  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call exportPayoutStoresCall(String appId, Integer bankAccountId, Integer payoutId, List<Integer> storeIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/bankaccounts/{bankAccountId}/payouts/{payoutId}/export"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "bankAccountId" + "\\}", apiClient.escapeString(bankAccountId.toString()))
            .replaceAll("\\{" + "payoutId" + "\\}", apiClient.escapeString(payoutId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storeIds != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "storeIds", storeIds));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call exportPayoutStoresValidateBeforeCall(String appId, Integer bankAccountId, Integer payoutId, List<Integer> storeIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling exportPayoutStores(Async)");
        }
        
        // verify the required parameter 'bankAccountId' is set
        if (bankAccountId == null) {
            throw new ApiException("Missing the required parameter 'bankAccountId' when calling exportPayoutStores(Async)");
        }
        
        // verify the required parameter 'payoutId' is set
        if (payoutId == null) {
            throw new ApiException("Missing the required parameter 'payoutId' when calling exportPayoutStores(Async)");
        }
        

        com.squareup.okhttp.Call call = exportPayoutStoresCall(appId, bankAccountId, payoutId, storeIds, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Export payout&#39;s details as CSV
     * 
     * @param appId  (required)
     * @param bankAccountId  (required)
     * @param payoutId  (required)
     * @param storeIds  (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String exportPayoutStores(String appId, Integer bankAccountId, Integer payoutId, List<Integer> storeIds) throws ApiException {
        ApiResponse<String> resp = exportPayoutStoresWithHttpInfo(appId, bankAccountId, payoutId, storeIds);
        return resp.getData();
    }

    /**
     * Export payout&#39;s details as CSV
     * 
     * @param appId  (required)
     * @param bankAccountId  (required)
     * @param payoutId  (required)
     * @param storeIds  (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> exportPayoutStoresWithHttpInfo(String appId, Integer bankAccountId, Integer payoutId, List<Integer> storeIds) throws ApiException {
        com.squareup.okhttp.Call call = exportPayoutStoresValidateBeforeCall(appId, bankAccountId, payoutId, storeIds, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Export payout&#39;s details as CSV (asynchronously)
     * 
     * @param appId  (required)
     * @param bankAccountId  (required)
     * @param payoutId  (required)
     * @param storeIds  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call exportPayoutStoresAsync(String appId, Integer bankAccountId, Integer payoutId, List<Integer> storeIds, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = exportPayoutStoresValidateBeforeCall(appId, bankAccountId, payoutId, storeIds, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPayout
     * @param appId  (required)
     * @param bankAccountId  (required)
     * @param payoutId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPayoutCall(String appId, Integer bankAccountId, Integer payoutId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/bankaccounts/{bankAccountId}/payouts/{payoutId}"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "bankAccountId" + "\\}", apiClient.escapeString(bankAccountId.toString()))
            .replaceAll("\\{" + "payoutId" + "\\}", apiClient.escapeString(payoutId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPayoutValidateBeforeCall(String appId, Integer bankAccountId, Integer payoutId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getPayout(Async)");
        }
        
        // verify the required parameter 'bankAccountId' is set
        if (bankAccountId == null) {
            throw new ApiException("Missing the required parameter 'bankAccountId' when calling getPayout(Async)");
        }
        
        // verify the required parameter 'payoutId' is set
        if (payoutId == null) {
            throw new ApiException("Missing the required parameter 'payoutId' when calling getPayout(Async)");
        }
        

        com.squareup.okhttp.Call call = getPayoutCall(appId, bankAccountId, payoutId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Payout details broken down by Store
     * 
     * @param appId  (required)
     * @param bankAccountId  (required)
     * @param payoutId  (required)
     * @return PayoutDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PayoutDetail getPayout(String appId, Integer bankAccountId, Integer payoutId) throws ApiException {
        ApiResponse<PayoutDetail> resp = getPayoutWithHttpInfo(appId, bankAccountId, payoutId);
        return resp.getData();
    }

    /**
     * Get Payout details broken down by Store
     * 
     * @param appId  (required)
     * @param bankAccountId  (required)
     * @param payoutId  (required)
     * @return ApiResponse&lt;PayoutDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PayoutDetail> getPayoutWithHttpInfo(String appId, Integer bankAccountId, Integer payoutId) throws ApiException {
        com.squareup.okhttp.Call call = getPayoutValidateBeforeCall(appId, bankAccountId, payoutId, null, null);
        Type localVarReturnType = new TypeToken<PayoutDetail>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Payout details broken down by Store (asynchronously)
     * 
     * @param appId  (required)
     * @param bankAccountId  (required)
     * @param payoutId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPayoutAsync(String appId, Integer bankAccountId, Integer payoutId, final ApiCallback<PayoutDetail> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPayoutValidateBeforeCall(appId, bankAccountId, payoutId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PayoutDetail>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPayoutChargebacks
     * @param appId  (required)
     * @param bankAccountId  (required)
     * @param payoutId  (required)
     * @param page  (optional)
     * @param limit  (optional)
     * @param storeIds  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPayoutChargebacksCall(String appId, Integer bankAccountId, Integer payoutId, Integer page, Integer limit, List<Integer> storeIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/bankaccounts/{bankAccountId}/payouts/{payoutId}/chargebacks"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "bankAccountId" + "\\}", apiClient.escapeString(bankAccountId.toString()))
            .replaceAll("\\{" + "payoutId" + "\\}", apiClient.escapeString(payoutId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (storeIds != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "storeIds", storeIds));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPayoutChargebacksValidateBeforeCall(String appId, Integer bankAccountId, Integer payoutId, Integer page, Integer limit, List<Integer> storeIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getPayoutChargebacks(Async)");
        }
        
        // verify the required parameter 'bankAccountId' is set
        if (bankAccountId == null) {
            throw new ApiException("Missing the required parameter 'bankAccountId' when calling getPayoutChargebacks(Async)");
        }
        
        // verify the required parameter 'payoutId' is set
        if (payoutId == null) {
            throw new ApiException("Missing the required parameter 'payoutId' when calling getPayoutChargebacks(Async)");
        }
        

        com.squareup.okhttp.Call call = getPayoutChargebacksCall(appId, bankAccountId, payoutId, page, limit, storeIds, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get list of payout&#39;s chargebacks
     * 
     * @param appId  (required)
     * @param bankAccountId  (required)
     * @param payoutId  (required)
     * @param page  (optional)
     * @param limit  (optional)
     * @param storeIds  (optional)
     * @return RestApiPaginationResultPayoutChargeback
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiPaginationResultPayoutChargeback getPayoutChargebacks(String appId, Integer bankAccountId, Integer payoutId, Integer page, Integer limit, List<Integer> storeIds) throws ApiException {
        ApiResponse<RestApiPaginationResultPayoutChargeback> resp = getPayoutChargebacksWithHttpInfo(appId, bankAccountId, payoutId, page, limit, storeIds);
        return resp.getData();
    }

    /**
     * Get list of payout&#39;s chargebacks
     * 
     * @param appId  (required)
     * @param bankAccountId  (required)
     * @param payoutId  (required)
     * @param page  (optional)
     * @param limit  (optional)
     * @param storeIds  (optional)
     * @return ApiResponse&lt;RestApiPaginationResultPayoutChargeback&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiPaginationResultPayoutChargeback> getPayoutChargebacksWithHttpInfo(String appId, Integer bankAccountId, Integer payoutId, Integer page, Integer limit, List<Integer> storeIds) throws ApiException {
        com.squareup.okhttp.Call call = getPayoutChargebacksValidateBeforeCall(appId, bankAccountId, payoutId, page, limit, storeIds, null, null);
        Type localVarReturnType = new TypeToken<RestApiPaginationResultPayoutChargeback>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of payout&#39;s chargebacks (asynchronously)
     * 
     * @param appId  (required)
     * @param bankAccountId  (required)
     * @param payoutId  (required)
     * @param page  (optional)
     * @param limit  (optional)
     * @param storeIds  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPayoutChargebacksAsync(String appId, Integer bankAccountId, Integer payoutId, Integer page, Integer limit, List<Integer> storeIds, final ApiCallback<RestApiPaginationResultPayoutChargeback> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPayoutChargebacksValidateBeforeCall(appId, bankAccountId, payoutId, page, limit, storeIds, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiPaginationResultPayoutChargeback>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPayoutOrders
     * @param appId  (required)
     * @param bankAccountId  (required)
     * @param payoutId  (required)
     * @param page  (optional)
     * @param limit  (optional)
     * @param storeIds  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPayoutOrdersCall(String appId, Integer bankAccountId, Integer payoutId, Integer page, Integer limit, List<Integer> storeIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/bankaccounts/{bankAccountId}/payouts/{payoutId}/orders"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "bankAccountId" + "\\}", apiClient.escapeString(bankAccountId.toString()))
            .replaceAll("\\{" + "payoutId" + "\\}", apiClient.escapeString(payoutId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (storeIds != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "storeIds", storeIds));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPayoutOrdersValidateBeforeCall(String appId, Integer bankAccountId, Integer payoutId, Integer page, Integer limit, List<Integer> storeIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getPayoutOrders(Async)");
        }
        
        // verify the required parameter 'bankAccountId' is set
        if (bankAccountId == null) {
            throw new ApiException("Missing the required parameter 'bankAccountId' when calling getPayoutOrders(Async)");
        }
        
        // verify the required parameter 'payoutId' is set
        if (payoutId == null) {
            throw new ApiException("Missing the required parameter 'payoutId' when calling getPayoutOrders(Async)");
        }
        

        com.squareup.okhttp.Call call = getPayoutOrdersCall(appId, bankAccountId, payoutId, page, limit, storeIds, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get list of payout&#39;s orders
     * 
     * @param appId  (required)
     * @param bankAccountId  (required)
     * @param payoutId  (required)
     * @param page  (optional)
     * @param limit  (optional)
     * @param storeIds  (optional)
     * @return RestApiPaginationResultPayoutOrder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiPaginationResultPayoutOrder getPayoutOrders(String appId, Integer bankAccountId, Integer payoutId, Integer page, Integer limit, List<Integer> storeIds) throws ApiException {
        ApiResponse<RestApiPaginationResultPayoutOrder> resp = getPayoutOrdersWithHttpInfo(appId, bankAccountId, payoutId, page, limit, storeIds);
        return resp.getData();
    }

    /**
     * Get list of payout&#39;s orders
     * 
     * @param appId  (required)
     * @param bankAccountId  (required)
     * @param payoutId  (required)
     * @param page  (optional)
     * @param limit  (optional)
     * @param storeIds  (optional)
     * @return ApiResponse&lt;RestApiPaginationResultPayoutOrder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiPaginationResultPayoutOrder> getPayoutOrdersWithHttpInfo(String appId, Integer bankAccountId, Integer payoutId, Integer page, Integer limit, List<Integer> storeIds) throws ApiException {
        com.squareup.okhttp.Call call = getPayoutOrdersValidateBeforeCall(appId, bankAccountId, payoutId, page, limit, storeIds, null, null);
        Type localVarReturnType = new TypeToken<RestApiPaginationResultPayoutOrder>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of payout&#39;s orders (asynchronously)
     * 
     * @param appId  (required)
     * @param bankAccountId  (required)
     * @param payoutId  (required)
     * @param page  (optional)
     * @param limit  (optional)
     * @param storeIds  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPayoutOrdersAsync(String appId, Integer bankAccountId, Integer payoutId, Integer page, Integer limit, List<Integer> storeIds, final ApiCallback<RestApiPaginationResultPayoutOrder> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPayoutOrdersValidateBeforeCall(appId, bankAccountId, payoutId, page, limit, storeIds, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiPaginationResultPayoutOrder>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPayoutOtherCharges
     * @param appId  (required)
     * @param bankAccountId  (required)
     * @param payoutId  (required)
     * @param page  (optional)
     * @param limit  (optional)
     * @param storeIds  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPayoutOtherChargesCall(String appId, Integer bankAccountId, Integer payoutId, Integer page, Integer limit, List<Integer> storeIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/bankaccounts/{bankAccountId}/payouts/{payoutId}/othercharges"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "bankAccountId" + "\\}", apiClient.escapeString(bankAccountId.toString()))
            .replaceAll("\\{" + "payoutId" + "\\}", apiClient.escapeString(payoutId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (storeIds != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "storeIds", storeIds));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPayoutOtherChargesValidateBeforeCall(String appId, Integer bankAccountId, Integer payoutId, Integer page, Integer limit, List<Integer> storeIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getPayoutOtherCharges(Async)");
        }
        
        // verify the required parameter 'bankAccountId' is set
        if (bankAccountId == null) {
            throw new ApiException("Missing the required parameter 'bankAccountId' when calling getPayoutOtherCharges(Async)");
        }
        
        // verify the required parameter 'payoutId' is set
        if (payoutId == null) {
            throw new ApiException("Missing the required parameter 'payoutId' when calling getPayoutOtherCharges(Async)");
        }
        

        com.squareup.okhttp.Call call = getPayoutOtherChargesCall(appId, bankAccountId, payoutId, page, limit, storeIds, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get list of payout&#39;s other charges
     * 
     * @param appId  (required)
     * @param bankAccountId  (required)
     * @param payoutId  (required)
     * @param page  (optional)
     * @param limit  (optional)
     * @param storeIds  (optional)
     * @return RestApiPaginationResultPayoutOtherCharge
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiPaginationResultPayoutOtherCharge getPayoutOtherCharges(String appId, Integer bankAccountId, Integer payoutId, Integer page, Integer limit, List<Integer> storeIds) throws ApiException {
        ApiResponse<RestApiPaginationResultPayoutOtherCharge> resp = getPayoutOtherChargesWithHttpInfo(appId, bankAccountId, payoutId, page, limit, storeIds);
        return resp.getData();
    }

    /**
     * Get list of payout&#39;s other charges
     * 
     * @param appId  (required)
     * @param bankAccountId  (required)
     * @param payoutId  (required)
     * @param page  (optional)
     * @param limit  (optional)
     * @param storeIds  (optional)
     * @return ApiResponse&lt;RestApiPaginationResultPayoutOtherCharge&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiPaginationResultPayoutOtherCharge> getPayoutOtherChargesWithHttpInfo(String appId, Integer bankAccountId, Integer payoutId, Integer page, Integer limit, List<Integer> storeIds) throws ApiException {
        com.squareup.okhttp.Call call = getPayoutOtherChargesValidateBeforeCall(appId, bankAccountId, payoutId, page, limit, storeIds, null, null);
        Type localVarReturnType = new TypeToken<RestApiPaginationResultPayoutOtherCharge>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of payout&#39;s other charges (asynchronously)
     * 
     * @param appId  (required)
     * @param bankAccountId  (required)
     * @param payoutId  (required)
     * @param page  (optional)
     * @param limit  (optional)
     * @param storeIds  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPayoutOtherChargesAsync(String appId, Integer bankAccountId, Integer payoutId, Integer page, Integer limit, List<Integer> storeIds, final ApiCallback<RestApiPaginationResultPayoutOtherCharge> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPayoutOtherChargesValidateBeforeCall(appId, bankAccountId, payoutId, page, limit, storeIds, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiPaginationResultPayoutOtherCharge>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPayoutRefunds
     * @param appId  (required)
     * @param bankAccountId  (required)
     * @param payoutId  (required)
     * @param page  (optional)
     * @param limit  (optional)
     * @param storeIds  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPayoutRefundsCall(String appId, Integer bankAccountId, Integer payoutId, Integer page, Integer limit, List<Integer> storeIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/bankaccounts/{bankAccountId}/payouts/{payoutId}/refunds"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "bankAccountId" + "\\}", apiClient.escapeString(bankAccountId.toString()))
            .replaceAll("\\{" + "payoutId" + "\\}", apiClient.escapeString(payoutId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (storeIds != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "storeIds", storeIds));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPayoutRefundsValidateBeforeCall(String appId, Integer bankAccountId, Integer payoutId, Integer page, Integer limit, List<Integer> storeIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getPayoutRefunds(Async)");
        }
        
        // verify the required parameter 'bankAccountId' is set
        if (bankAccountId == null) {
            throw new ApiException("Missing the required parameter 'bankAccountId' when calling getPayoutRefunds(Async)");
        }
        
        // verify the required parameter 'payoutId' is set
        if (payoutId == null) {
            throw new ApiException("Missing the required parameter 'payoutId' when calling getPayoutRefunds(Async)");
        }
        

        com.squareup.okhttp.Call call = getPayoutRefundsCall(appId, bankAccountId, payoutId, page, limit, storeIds, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get list of payout&#39;s refunds
     * 
     * @param appId  (required)
     * @param bankAccountId  (required)
     * @param payoutId  (required)
     * @param page  (optional)
     * @param limit  (optional)
     * @param storeIds  (optional)
     * @return RestApiPaginationResultPayoutRefund
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiPaginationResultPayoutRefund getPayoutRefunds(String appId, Integer bankAccountId, Integer payoutId, Integer page, Integer limit, List<Integer> storeIds) throws ApiException {
        ApiResponse<RestApiPaginationResultPayoutRefund> resp = getPayoutRefundsWithHttpInfo(appId, bankAccountId, payoutId, page, limit, storeIds);
        return resp.getData();
    }

    /**
     * Get list of payout&#39;s refunds
     * 
     * @param appId  (required)
     * @param bankAccountId  (required)
     * @param payoutId  (required)
     * @param page  (optional)
     * @param limit  (optional)
     * @param storeIds  (optional)
     * @return ApiResponse&lt;RestApiPaginationResultPayoutRefund&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiPaginationResultPayoutRefund> getPayoutRefundsWithHttpInfo(String appId, Integer bankAccountId, Integer payoutId, Integer page, Integer limit, List<Integer> storeIds) throws ApiException {
        com.squareup.okhttp.Call call = getPayoutRefundsValidateBeforeCall(appId, bankAccountId, payoutId, page, limit, storeIds, null, null);
        Type localVarReturnType = new TypeToken<RestApiPaginationResultPayoutRefund>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of payout&#39;s refunds (asynchronously)
     * 
     * @param appId  (required)
     * @param bankAccountId  (required)
     * @param payoutId  (required)
     * @param page  (optional)
     * @param limit  (optional)
     * @param storeIds  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPayoutRefundsAsync(String appId, Integer bankAccountId, Integer payoutId, Integer page, Integer limit, List<Integer> storeIds, final ApiCallback<RestApiPaginationResultPayoutRefund> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPayoutRefundsValidateBeforeCall(appId, bankAccountId, payoutId, page, limit, storeIds, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiPaginationResultPayoutRefund>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPayoutSummaries
     * @param appId  (required)
     * @param bankAccountId  (optional)
     * @param payeeBankAccountDataId Deprecated (optional)
     * @param startDate  (optional)
     * @param endDate  (optional)
     * @param status  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPayoutSummariesCall(String appId, Integer bankAccountId, Integer payeeBankAccountDataId, OffsetDateTime startDate, OffsetDateTime endDate, String status, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/payouts/summaries"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (bankAccountId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("bankAccountId", bankAccountId));
        if (payeeBankAccountDataId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("payeeBankAccountDataId", payeeBankAccountDataId));
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startDate", startDate));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("endDate", endDate));
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPayoutSummariesValidateBeforeCall(String appId, Integer bankAccountId, Integer payeeBankAccountDataId, OffsetDateTime startDate, OffsetDateTime endDate, String status, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getPayoutSummaries(Async)");
        }
        

        com.squareup.okhttp.Call call = getPayoutSummariesCall(appId, bankAccountId, payeeBankAccountDataId, startDate, endDate, status, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get list of payout summaries
     * BETA - this endpoint is under development, do not use it in your production system
     * @param appId  (required)
     * @param bankAccountId  (optional)
     * @param payeeBankAccountDataId Deprecated (optional)
     * @param startDate  (optional)
     * @param endDate  (optional)
     * @param status  (optional)
     * @return RestApiArrayResultPayoutSummary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiArrayResultPayoutSummary getPayoutSummaries(String appId, Integer bankAccountId, Integer payeeBankAccountDataId, OffsetDateTime startDate, OffsetDateTime endDate, String status) throws ApiException {
        ApiResponse<RestApiArrayResultPayoutSummary> resp = getPayoutSummariesWithHttpInfo(appId, bankAccountId, payeeBankAccountDataId, startDate, endDate, status);
        return resp.getData();
    }

    /**
     * Get list of payout summaries
     * BETA - this endpoint is under development, do not use it in your production system
     * @param appId  (required)
     * @param bankAccountId  (optional)
     * @param payeeBankAccountDataId Deprecated (optional)
     * @param startDate  (optional)
     * @param endDate  (optional)
     * @param status  (optional)
     * @return ApiResponse&lt;RestApiArrayResultPayoutSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiArrayResultPayoutSummary> getPayoutSummariesWithHttpInfo(String appId, Integer bankAccountId, Integer payeeBankAccountDataId, OffsetDateTime startDate, OffsetDateTime endDate, String status) throws ApiException {
        com.squareup.okhttp.Call call = getPayoutSummariesValidateBeforeCall(appId, bankAccountId, payeeBankAccountDataId, startDate, endDate, status, null, null);
        Type localVarReturnType = new TypeToken<RestApiArrayResultPayoutSummary>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of payout summaries (asynchronously)
     * BETA - this endpoint is under development, do not use it in your production system
     * @param appId  (required)
     * @param bankAccountId  (optional)
     * @param payeeBankAccountDataId Deprecated (optional)
     * @param startDate  (optional)
     * @param endDate  (optional)
     * @param status  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPayoutSummariesAsync(String appId, Integer bankAccountId, Integer payeeBankAccountDataId, OffsetDateTime startDate, OffsetDateTime endDate, String status, final ApiCallback<RestApiArrayResultPayoutSummary> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPayoutSummariesValidateBeforeCall(appId, bankAccountId, payeeBankAccountDataId, startDate, endDate, status, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiArrayResultPayoutSummary>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPayouts
     * @param appId  (required)
     * @param bankAccountId  (optional)
     * @param payeeBankAccountDataId Deprecated (optional)
     * @param startDate  (optional)
     * @param endDate  (optional)
     * @param status  (optional)
     * @param page  (optional)
     * @param limit  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPayoutsCall(String appId, Integer bankAccountId, Integer payeeBankAccountDataId, OffsetDateTime startDate, OffsetDateTime endDate, String status, Integer page, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/payouts"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (bankAccountId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("bankAccountId", bankAccountId));
        if (payeeBankAccountDataId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("payeeBankAccountDataId", payeeBankAccountDataId));
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startDate", startDate));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("endDate", endDate));
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPayoutsValidateBeforeCall(String appId, Integer bankAccountId, Integer payeeBankAccountDataId, OffsetDateTime startDate, OffsetDateTime endDate, String status, Integer page, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getPayouts(Async)");
        }
        

        com.squareup.okhttp.Call call = getPayoutsCall(appId, bankAccountId, payeeBankAccountDataId, startDate, endDate, status, page, limit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get list of payouts
     * BETA - this endpoint is under development, do not use it in your production system
     * @param appId  (required)
     * @param bankAccountId  (optional)
     * @param payeeBankAccountDataId Deprecated (optional)
     * @param startDate  (optional)
     * @param endDate  (optional)
     * @param status  (optional)
     * @param page  (optional)
     * @param limit  (optional)
     * @return RestApiPaginationResultPayout
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiPaginationResultPayout getPayouts(String appId, Integer bankAccountId, Integer payeeBankAccountDataId, OffsetDateTime startDate, OffsetDateTime endDate, String status, Integer page, Integer limit) throws ApiException {
        ApiResponse<RestApiPaginationResultPayout> resp = getPayoutsWithHttpInfo(appId, bankAccountId, payeeBankAccountDataId, startDate, endDate, status, page, limit);
        return resp.getData();
    }

    /**
     * Get list of payouts
     * BETA - this endpoint is under development, do not use it in your production system
     * @param appId  (required)
     * @param bankAccountId  (optional)
     * @param payeeBankAccountDataId Deprecated (optional)
     * @param startDate  (optional)
     * @param endDate  (optional)
     * @param status  (optional)
     * @param page  (optional)
     * @param limit  (optional)
     * @return ApiResponse&lt;RestApiPaginationResultPayout&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiPaginationResultPayout> getPayoutsWithHttpInfo(String appId, Integer bankAccountId, Integer payeeBankAccountDataId, OffsetDateTime startDate, OffsetDateTime endDate, String status, Integer page, Integer limit) throws ApiException {
        com.squareup.okhttp.Call call = getPayoutsValidateBeforeCall(appId, bankAccountId, payeeBankAccountDataId, startDate, endDate, status, page, limit, null, null);
        Type localVarReturnType = new TypeToken<RestApiPaginationResultPayout>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of payouts (asynchronously)
     * BETA - this endpoint is under development, do not use it in your production system
     * @param appId  (required)
     * @param bankAccountId  (optional)
     * @param payeeBankAccountDataId Deprecated (optional)
     * @param startDate  (optional)
     * @param endDate  (optional)
     * @param status  (optional)
     * @param page  (optional)
     * @param limit  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPayoutsAsync(String appId, Integer bankAccountId, Integer payeeBankAccountDataId, OffsetDateTime startDate, OffsetDateTime endDate, String status, Integer page, Integer limit, final ApiCallback<RestApiPaginationResultPayout> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPayoutsValidateBeforeCall(appId, bankAccountId, payeeBankAccountDataId, startDate, endDate, status, page, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiPaginationResultPayout>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
