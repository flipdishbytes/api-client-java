/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.flipdish.apiclient.api;

import com.flipdish.apiclient.ApiCallback;
import com.flipdish.apiclient.ApiClient;
import com.flipdish.apiclient.ApiException;
import com.flipdish.apiclient.ApiResponse;
import com.flipdish.apiclient.Configuration;
import com.flipdish.apiclient.Pair;
import com.flipdish.apiclient.ProgressRequestBody;
import com.flipdish.apiclient.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.flipdish.apiclient.model.BusinessHoursOverrideBase;
import com.flipdish.apiclient.model.BusinessHoursPeriodBase;
import com.flipdish.apiclient.model.Coordinates;
import org.threeten.bp.OffsetDateTime;
import com.flipdish.apiclient.model.PreOrderConfig;
import com.flipdish.apiclient.model.RestApiArrayResultBusinessHoursPeriod;
import com.flipdish.apiclient.model.RestApiArrayResultPreOrderTime;
import com.flipdish.apiclient.model.RestApiArrayResultProcessingFeeConfig;
import com.flipdish.apiclient.model.RestApiArrayResultRestApiDefaultResponse;
import com.flipdish.apiclient.model.RestApiArrayResultStoreStatistics;
import com.flipdish.apiclient.model.RestApiErrorResult;
import com.flipdish.apiclient.model.RestApiForbiddenResult;
import com.flipdish.apiclient.model.RestApiPaginationResultBusinessHoursOverride;
import com.flipdish.apiclient.model.RestApiPaginationResultStore;
import com.flipdish.apiclient.model.RestApiPaginationResultStoreHeader;
import com.flipdish.apiclient.model.RestApiPaginationResultStoreValidationConfig;
import com.flipdish.apiclient.model.RestApiResultAssignedBankAccount;
import com.flipdish.apiclient.model.RestApiResultBusinessHoursOverride;
import com.flipdish.apiclient.model.RestApiResultBusinessHoursPeriod;
import com.flipdish.apiclient.model.RestApiResultCoordinates;
import com.flipdish.apiclient.model.RestApiResultPreOrderConfig;
import com.flipdish.apiclient.model.RestApiResultProcessingFeeConfig;
import com.flipdish.apiclient.model.RestApiResultServiceCharge;
import com.flipdish.apiclient.model.RestApiResultStore;
import com.flipdish.apiclient.model.RestApiResultStoreAddress;
import com.flipdish.apiclient.model.RestApiResultStoreEndOfDayReport;
import com.flipdish.apiclient.model.RestApiUnauthorizedResult;
import com.flipdish.apiclient.model.ServiceCharge;
import com.flipdish.apiclient.model.StoreAddressBase;
import com.flipdish.apiclient.model.StoreAddressForm;
import com.flipdish.apiclient.model.StoreBase;
import com.flipdish.apiclient.model.StoreCloneSettings;
import com.flipdish.apiclient.model.StoreCreateBase;
import com.flipdish.apiclient.model.StoreFeeConfig;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StoresApi {
    private ApiClient apiClient;

    public StoresApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StoresApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for archiveStore
     * @param storeId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call archiveStoreCall(Integer storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/stores/{storeId}/archive"
            .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call archiveStoreValidateBeforeCall(Integer storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling archiveStore(Async)");
        }
        

        com.squareup.okhttp.Call call = archiveStoreCall(storeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param storeId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void archiveStore(Integer storeId) throws ApiException {
        archiveStoreWithHttpInfo(storeId);
    }

    /**
     * 
     * 
     * @param storeId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> archiveStoreWithHttpInfo(Integer storeId) throws ApiException {
        com.squareup.okhttp.Call call = archiveStoreValidateBeforeCall(storeId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param storeId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call archiveStoreAsync(Integer storeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = archiveStoreValidateBeforeCall(storeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for assignMenu
     * @param storeId  (required)
     * @param menuId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call assignMenuCall(Integer storeId, Integer menuId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/stores/{storeId}/menu/{menuId}"
            .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()))
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call assignMenuValidateBeforeCall(Integer storeId, Integer menuId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling assignMenu(Async)");
        }
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling assignMenu(Async)");
        }
        

        com.squareup.okhttp.Call call = assignMenuCall(storeId, menuId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param storeId  (required)
     * @param menuId  (required)
     * @return RestApiArrayResultRestApiDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiArrayResultRestApiDefaultResponse assignMenu(Integer storeId, Integer menuId) throws ApiException {
        ApiResponse<RestApiArrayResultRestApiDefaultResponse> resp = assignMenuWithHttpInfo(storeId, menuId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param storeId  (required)
     * @param menuId  (required)
     * @return ApiResponse&lt;RestApiArrayResultRestApiDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiArrayResultRestApiDefaultResponse> assignMenuWithHttpInfo(Integer storeId, Integer menuId) throws ApiException {
        com.squareup.okhttp.Call call = assignMenuValidateBeforeCall(storeId, menuId, null, null);
        Type localVarReturnType = new TypeToken<RestApiArrayResultRestApiDefaultResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param storeId  (required)
     * @param menuId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call assignMenuAsync(Integer storeId, Integer menuId, final ApiCallback<RestApiArrayResultRestApiDefaultResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = assignMenuValidateBeforeCall(storeId, menuId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiArrayResultRestApiDefaultResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cloneStore
     * @param storeId  (required)
     * @param settings  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cloneStoreCall(Integer storeId, StoreCloneSettings settings, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = settings;

        // create path and map variables
        String localVarPath = "/api/v1.0/stores/{storeId}/clone"
            .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cloneStoreValidateBeforeCall(Integer storeId, StoreCloneSettings settings, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling cloneStore(Async)");
        }
        
        // verify the required parameter 'settings' is set
        if (settings == null) {
            throw new ApiException("Missing the required parameter 'settings' when calling cloneStore(Async)");
        }
        

        com.squareup.okhttp.Call call = cloneStoreCall(storeId, settings, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param storeId  (required)
     * @param settings  (required)
     * @return RestApiResultStore
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultStore cloneStore(Integer storeId, StoreCloneSettings settings) throws ApiException {
        ApiResponse<RestApiResultStore> resp = cloneStoreWithHttpInfo(storeId, settings);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param storeId  (required)
     * @param settings  (required)
     * @return ApiResponse&lt;RestApiResultStore&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultStore> cloneStoreWithHttpInfo(Integer storeId, StoreCloneSettings settings) throws ApiException {
        com.squareup.okhttp.Call call = cloneStoreValidateBeforeCall(storeId, settings, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultStore>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param storeId  (required)
     * @param settings  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cloneStoreAsync(Integer storeId, StoreCloneSettings settings, final ApiCallback<RestApiResultStore> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cloneStoreValidateBeforeCall(storeId, settings, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultStore>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for configureStoreServiceCharge
     * @param storeId  (required)
     * @param serviceCharge  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call configureStoreServiceChargeCall(Integer storeId, ServiceCharge serviceCharge, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = serviceCharge;

        // create path and map variables
        String localVarPath = "/api/v1.0/stores/{storeId}/servicecharge"
            .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call configureStoreServiceChargeValidateBeforeCall(Integer storeId, ServiceCharge serviceCharge, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling configureStoreServiceCharge(Async)");
        }
        
        // verify the required parameter 'serviceCharge' is set
        if (serviceCharge == null) {
            throw new ApiException("Missing the required parameter 'serviceCharge' when calling configureStoreServiceCharge(Async)");
        }
        

        com.squareup.okhttp.Call call = configureStoreServiceChargeCall(storeId, serviceCharge, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param storeId  (required)
     * @param serviceCharge  (required)
     * @return RestApiResultServiceCharge
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultServiceCharge configureStoreServiceCharge(Integer storeId, ServiceCharge serviceCharge) throws ApiException {
        ApiResponse<RestApiResultServiceCharge> resp = configureStoreServiceChargeWithHttpInfo(storeId, serviceCharge);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param storeId  (required)
     * @param serviceCharge  (required)
     * @return ApiResponse&lt;RestApiResultServiceCharge&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultServiceCharge> configureStoreServiceChargeWithHttpInfo(Integer storeId, ServiceCharge serviceCharge) throws ApiException {
        com.squareup.okhttp.Call call = configureStoreServiceChargeValidateBeforeCall(storeId, serviceCharge, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultServiceCharge>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param storeId  (required)
     * @param serviceCharge  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call configureStoreServiceChargeAsync(Integer storeId, ServiceCharge serviceCharge, final ApiCallback<RestApiResultServiceCharge> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = configureStoreServiceChargeValidateBeforeCall(storeId, serviceCharge, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultServiceCharge>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createBusinessHoursOverrideByStoreId
     * @param storeId  (required)
     * @param businessHoursOverride  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createBusinessHoursOverrideByStoreIdCall(Integer storeId, BusinessHoursOverrideBase businessHoursOverride, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = businessHoursOverride;

        // create path and map variables
        String localVarPath = "/api/v1.0/stores/{storeId}/businesshoursoverrides"
            .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createBusinessHoursOverrideByStoreIdValidateBeforeCall(Integer storeId, BusinessHoursOverrideBase businessHoursOverride, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling createBusinessHoursOverrideByStoreId(Async)");
        }
        
        // verify the required parameter 'businessHoursOverride' is set
        if (businessHoursOverride == null) {
            throw new ApiException("Missing the required parameter 'businessHoursOverride' when calling createBusinessHoursOverrideByStoreId(Async)");
        }
        

        com.squareup.okhttp.Call call = createBusinessHoursOverrideByStoreIdCall(storeId, businessHoursOverride, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param storeId  (required)
     * @param businessHoursOverride  (required)
     * @return RestApiResultBusinessHoursOverride
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultBusinessHoursOverride createBusinessHoursOverrideByStoreId(Integer storeId, BusinessHoursOverrideBase businessHoursOverride) throws ApiException {
        ApiResponse<RestApiResultBusinessHoursOverride> resp = createBusinessHoursOverrideByStoreIdWithHttpInfo(storeId, businessHoursOverride);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param storeId  (required)
     * @param businessHoursOverride  (required)
     * @return ApiResponse&lt;RestApiResultBusinessHoursOverride&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultBusinessHoursOverride> createBusinessHoursOverrideByStoreIdWithHttpInfo(Integer storeId, BusinessHoursOverrideBase businessHoursOverride) throws ApiException {
        com.squareup.okhttp.Call call = createBusinessHoursOverrideByStoreIdValidateBeforeCall(storeId, businessHoursOverride, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultBusinessHoursOverride>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param storeId  (required)
     * @param businessHoursOverride  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createBusinessHoursOverrideByStoreIdAsync(Integer storeId, BusinessHoursOverrideBase businessHoursOverride, final ApiCallback<RestApiResultBusinessHoursOverride> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createBusinessHoursOverrideByStoreIdValidateBeforeCall(storeId, businessHoursOverride, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultBusinessHoursOverride>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createStore
     * @param storeGroupId  (required)
     * @param store  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createStoreCall(Integer storeGroupId, StoreCreateBase store, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = store;

        // create path and map variables
        String localVarPath = "/api/v1.0/stores";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storeGroupId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storeGroupId", storeGroupId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createStoreValidateBeforeCall(Integer storeGroupId, StoreCreateBase store, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeGroupId' is set
        if (storeGroupId == null) {
            throw new ApiException("Missing the required parameter 'storeGroupId' when calling createStore(Async)");
        }
        
        // verify the required parameter 'store' is set
        if (store == null) {
            throw new ApiException("Missing the required parameter 'store' when calling createStore(Async)");
        }
        

        com.squareup.okhttp.Call call = createStoreCall(storeGroupId, store, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param storeGroupId  (required)
     * @param store  (required)
     * @return RestApiResultStore
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultStore createStore(Integer storeGroupId, StoreCreateBase store) throws ApiException {
        ApiResponse<RestApiResultStore> resp = createStoreWithHttpInfo(storeGroupId, store);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param storeGroupId  (required)
     * @param store  (required)
     * @return ApiResponse&lt;RestApiResultStore&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultStore> createStoreWithHttpInfo(Integer storeGroupId, StoreCreateBase store) throws ApiException {
        com.squareup.okhttp.Call call = createStoreValidateBeforeCall(storeGroupId, store, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultStore>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param storeGroupId  (required)
     * @param store  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createStoreAsync(Integer storeGroupId, StoreCreateBase store, final ApiCallback<RestApiResultStore> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createStoreValidateBeforeCall(storeGroupId, store, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultStore>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteBusinessHoursOverride
     * @param storeId  (required)
     * @param businessHoursOverrideId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteBusinessHoursOverrideCall(Integer storeId, Integer businessHoursOverrideId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/stores/{storeId}/businesshoursoverrides/{businessHoursOverrideId}"
            .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()))
            .replaceAll("\\{" + "businessHoursOverrideId" + "\\}", apiClient.escapeString(businessHoursOverrideId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteBusinessHoursOverrideValidateBeforeCall(Integer storeId, Integer businessHoursOverrideId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling deleteBusinessHoursOverride(Async)");
        }
        
        // verify the required parameter 'businessHoursOverrideId' is set
        if (businessHoursOverrideId == null) {
            throw new ApiException("Missing the required parameter 'businessHoursOverrideId' when calling deleteBusinessHoursOverride(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteBusinessHoursOverrideCall(storeId, businessHoursOverrideId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param storeId  (required)
     * @param businessHoursOverrideId  (required)
     * @return RestApiArrayResultRestApiDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiArrayResultRestApiDefaultResponse deleteBusinessHoursOverride(Integer storeId, Integer businessHoursOverrideId) throws ApiException {
        ApiResponse<RestApiArrayResultRestApiDefaultResponse> resp = deleteBusinessHoursOverrideWithHttpInfo(storeId, businessHoursOverrideId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param storeId  (required)
     * @param businessHoursOverrideId  (required)
     * @return ApiResponse&lt;RestApiArrayResultRestApiDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiArrayResultRestApiDefaultResponse> deleteBusinessHoursOverrideWithHttpInfo(Integer storeId, Integer businessHoursOverrideId) throws ApiException {
        com.squareup.okhttp.Call call = deleteBusinessHoursOverrideValidateBeforeCall(storeId, businessHoursOverrideId, null, null);
        Type localVarReturnType = new TypeToken<RestApiArrayResultRestApiDefaultResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param storeId  (required)
     * @param businessHoursOverrideId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteBusinessHoursOverrideAsync(Integer storeId, Integer businessHoursOverrideId, final ApiCallback<RestApiArrayResultRestApiDefaultResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteBusinessHoursOverrideValidateBeforeCall(storeId, businessHoursOverrideId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiArrayResultRestApiDefaultResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBankAccountForStore
     * @param storeId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBankAccountForStoreCall(Integer storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/stores/{storeId}/bankaccount"
            .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBankAccountForStoreValidateBeforeCall(Integer storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling getBankAccountForStore(Async)");
        }
        

        com.squareup.okhttp.Call call = getBankAccountForStoreCall(storeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param storeId  (required)
     * @return RestApiResultAssignedBankAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultAssignedBankAccount getBankAccountForStore(Integer storeId) throws ApiException {
        ApiResponse<RestApiResultAssignedBankAccount> resp = getBankAccountForStoreWithHttpInfo(storeId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param storeId  (required)
     * @return ApiResponse&lt;RestApiResultAssignedBankAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultAssignedBankAccount> getBankAccountForStoreWithHttpInfo(Integer storeId) throws ApiException {
        com.squareup.okhttp.Call call = getBankAccountForStoreValidateBeforeCall(storeId, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultAssignedBankAccount>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param storeId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBankAccountForStoreAsync(Integer storeId, final ApiCallback<RestApiResultAssignedBankAccount> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBankAccountForStoreValidateBeforeCall(storeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultAssignedBankAccount>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBusinessHours
     * @param storeId  (required)
     * @param deliveryType  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBusinessHoursCall(Integer storeId, String deliveryType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/stores/{storeId}/availability/{deliveryType}"
            .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()))
            .replaceAll("\\{" + "deliveryType" + "\\}", apiClient.escapeString(deliveryType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBusinessHoursValidateBeforeCall(Integer storeId, String deliveryType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling getBusinessHours(Async)");
        }
        
        // verify the required parameter 'deliveryType' is set
        if (deliveryType == null) {
            throw new ApiException("Missing the required parameter 'deliveryType' when calling getBusinessHours(Async)");
        }
        

        com.squareup.okhttp.Call call = getBusinessHoursCall(storeId, deliveryType, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param storeId  (required)
     * @param deliveryType  (required)
     * @return RestApiArrayResultBusinessHoursPeriod
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiArrayResultBusinessHoursPeriod getBusinessHours(Integer storeId, String deliveryType) throws ApiException {
        ApiResponse<RestApiArrayResultBusinessHoursPeriod> resp = getBusinessHoursWithHttpInfo(storeId, deliveryType);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param storeId  (required)
     * @param deliveryType  (required)
     * @return ApiResponse&lt;RestApiArrayResultBusinessHoursPeriod&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiArrayResultBusinessHoursPeriod> getBusinessHoursWithHttpInfo(Integer storeId, String deliveryType) throws ApiException {
        com.squareup.okhttp.Call call = getBusinessHoursValidateBeforeCall(storeId, deliveryType, null, null);
        Type localVarReturnType = new TypeToken<RestApiArrayResultBusinessHoursPeriod>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param storeId  (required)
     * @param deliveryType  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBusinessHoursAsync(Integer storeId, String deliveryType, final ApiCallback<RestApiArrayResultBusinessHoursPeriod> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBusinessHoursValidateBeforeCall(storeId, deliveryType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiArrayResultBusinessHoursPeriod>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBusinessHoursOverrideByStoreId
     * @param storeId  (required)
     * @param after  (optional)
     * @param page  (optional)
     * @param limit  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBusinessHoursOverrideByStoreIdCall(Integer storeId, OffsetDateTime after, Integer page, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/stores/{storeId}/businesshoursoverrides"
            .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (after != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("after", after));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBusinessHoursOverrideByStoreIdValidateBeforeCall(Integer storeId, OffsetDateTime after, Integer page, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling getBusinessHoursOverrideByStoreId(Async)");
        }
        

        com.squareup.okhttp.Call call = getBusinessHoursOverrideByStoreIdCall(storeId, after, page, limit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param storeId  (required)
     * @param after  (optional)
     * @param page  (optional)
     * @param limit  (optional)
     * @return RestApiPaginationResultBusinessHoursOverride
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiPaginationResultBusinessHoursOverride getBusinessHoursOverrideByStoreId(Integer storeId, OffsetDateTime after, Integer page, Integer limit) throws ApiException {
        ApiResponse<RestApiPaginationResultBusinessHoursOverride> resp = getBusinessHoursOverrideByStoreIdWithHttpInfo(storeId, after, page, limit);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param storeId  (required)
     * @param after  (optional)
     * @param page  (optional)
     * @param limit  (optional)
     * @return ApiResponse&lt;RestApiPaginationResultBusinessHoursOverride&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiPaginationResultBusinessHoursOverride> getBusinessHoursOverrideByStoreIdWithHttpInfo(Integer storeId, OffsetDateTime after, Integer page, Integer limit) throws ApiException {
        com.squareup.okhttp.Call call = getBusinessHoursOverrideByStoreIdValidateBeforeCall(storeId, after, page, limit, null, null);
        Type localVarReturnType = new TypeToken<RestApiPaginationResultBusinessHoursOverride>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param storeId  (required)
     * @param after  (optional)
     * @param page  (optional)
     * @param limit  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBusinessHoursOverrideByStoreIdAsync(Integer storeId, OffsetDateTime after, Integer page, Integer limit, final ApiCallback<RestApiPaginationResultBusinessHoursOverride> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBusinessHoursOverrideByStoreIdValidateBeforeCall(storeId, after, page, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiPaginationResultBusinessHoursOverride>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEndOfDayReport
     * @param storeId  (required)
     * @param date  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEndOfDayReportCall(Integer storeId, OffsetDateTime date, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/stores/{storeId}/endofdayreport"
            .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (date != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("date", date));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEndOfDayReportValidateBeforeCall(Integer storeId, OffsetDateTime date, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling getEndOfDayReport(Async)");
        }
        

        com.squareup.okhttp.Call call = getEndOfDayReportCall(storeId, date, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param storeId  (required)
     * @param date  (optional)
     * @return RestApiResultStoreEndOfDayReport
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultStoreEndOfDayReport getEndOfDayReport(Integer storeId, OffsetDateTime date) throws ApiException {
        ApiResponse<RestApiResultStoreEndOfDayReport> resp = getEndOfDayReportWithHttpInfo(storeId, date);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param storeId  (required)
     * @param date  (optional)
     * @return ApiResponse&lt;RestApiResultStoreEndOfDayReport&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultStoreEndOfDayReport> getEndOfDayReportWithHttpInfo(Integer storeId, OffsetDateTime date) throws ApiException {
        com.squareup.okhttp.Call call = getEndOfDayReportValidateBeforeCall(storeId, date, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultStoreEndOfDayReport>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param storeId  (required)
     * @param date  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEndOfDayReportAsync(Integer storeId, OffsetDateTime date, final ApiCallback<RestApiResultStoreEndOfDayReport> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEndOfDayReportValidateBeforeCall(storeId, date, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultStoreEndOfDayReport>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPreOrderConfig
     * @param storeId  (required)
     * @param deliveryType  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPreOrderConfigCall(Integer storeId, String deliveryType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/stores/{storeId}/preorderconfig/{deliveryType}"
            .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()))
            .replaceAll("\\{" + "deliveryType" + "\\}", apiClient.escapeString(deliveryType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPreOrderConfigValidateBeforeCall(Integer storeId, String deliveryType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling getPreOrderConfig(Async)");
        }
        
        // verify the required parameter 'deliveryType' is set
        if (deliveryType == null) {
            throw new ApiException("Missing the required parameter 'deliveryType' when calling getPreOrderConfig(Async)");
        }
        

        com.squareup.okhttp.Call call = getPreOrderConfigCall(storeId, deliveryType, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param storeId  (required)
     * @param deliveryType  (required)
     * @return RestApiResultPreOrderConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultPreOrderConfig getPreOrderConfig(Integer storeId, String deliveryType) throws ApiException {
        ApiResponse<RestApiResultPreOrderConfig> resp = getPreOrderConfigWithHttpInfo(storeId, deliveryType);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param storeId  (required)
     * @param deliveryType  (required)
     * @return ApiResponse&lt;RestApiResultPreOrderConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultPreOrderConfig> getPreOrderConfigWithHttpInfo(Integer storeId, String deliveryType) throws ApiException {
        com.squareup.okhttp.Call call = getPreOrderConfigValidateBeforeCall(storeId, deliveryType, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultPreOrderConfig>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param storeId  (required)
     * @param deliveryType  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPreOrderConfigAsync(Integer storeId, String deliveryType, final ApiCallback<RestApiResultPreOrderConfig> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPreOrderConfigValidateBeforeCall(storeId, deliveryType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultPreOrderConfig>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPreOrderPreview
     * @param storeId  (required)
     * @param deliveryType  (required)
     * @param preOrderConfigLeadTimeMinutes Lead Time in Minutes (optional)
     * @param preOrderConfigIntervalMinutes Interval in minutes (optional)
     * @param preOrderConfigMaxOrderAheadDays Max Days to order ahead (optional)
     * @param preOrderConfigIncludeAsap Show ASAP as option (optional)
     * @param preOrderConfigIncludeMoreGranularInitialTime Granual Init&#39; Time (optional)
     * @param preOrderConfigCutOffTimePreviousDayBasic Cut off time previous day (optional)
     * @param preOrderConfigCutOffTimeCurrentDayBasic Cut off time current day (optional)
     * @param preOrderConfigPreOrderTimeDisplayType Type of time displayed. (optional)
     * @param preOrderConfigAlwaysAppearOpen Specifies whether a customer can pre-order outside the store opening hours or not. (optional)
     * @param preOrderConfigRequireExplicitSelectAlways Force customer to select collection time. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPreOrderPreviewCall(Integer storeId, String deliveryType, Integer preOrderConfigLeadTimeMinutes, Integer preOrderConfigIntervalMinutes, Integer preOrderConfigMaxOrderAheadDays, Boolean preOrderConfigIncludeAsap, Boolean preOrderConfigIncludeMoreGranularInitialTime, String preOrderConfigCutOffTimePreviousDayBasic, String preOrderConfigCutOffTimeCurrentDayBasic, String preOrderConfigPreOrderTimeDisplayType, Boolean preOrderConfigAlwaysAppearOpen, Boolean preOrderConfigRequireExplicitSelectAlways, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/stores/{storeId}/preorderconfig/{deliveryType}/preview"
            .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()))
            .replaceAll("\\{" + "deliveryType" + "\\}", apiClient.escapeString(deliveryType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (preOrderConfigLeadTimeMinutes != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("preOrderConfig.leadTimeMinutes", preOrderConfigLeadTimeMinutes));
        if (preOrderConfigIntervalMinutes != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("preOrderConfig.intervalMinutes", preOrderConfigIntervalMinutes));
        if (preOrderConfigMaxOrderAheadDays != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("preOrderConfig.maxOrderAheadDays", preOrderConfigMaxOrderAheadDays));
        if (preOrderConfigIncludeAsap != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("preOrderConfig.includeAsap", preOrderConfigIncludeAsap));
        if (preOrderConfigIncludeMoreGranularInitialTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("preOrderConfig.includeMoreGranularInitialTime", preOrderConfigIncludeMoreGranularInitialTime));
        if (preOrderConfigCutOffTimePreviousDayBasic != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("preOrderConfig.cutOffTimePreviousDayBasic", preOrderConfigCutOffTimePreviousDayBasic));
        if (preOrderConfigCutOffTimeCurrentDayBasic != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("preOrderConfig.cutOffTimeCurrentDayBasic", preOrderConfigCutOffTimeCurrentDayBasic));
        if (preOrderConfigPreOrderTimeDisplayType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("preOrderConfig.preOrderTimeDisplayType", preOrderConfigPreOrderTimeDisplayType));
        if (preOrderConfigAlwaysAppearOpen != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("preOrderConfig.alwaysAppearOpen", preOrderConfigAlwaysAppearOpen));
        if (preOrderConfigRequireExplicitSelectAlways != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("preOrderConfig.requireExplicitSelectAlways", preOrderConfigRequireExplicitSelectAlways));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPreOrderPreviewValidateBeforeCall(Integer storeId, String deliveryType, Integer preOrderConfigLeadTimeMinutes, Integer preOrderConfigIntervalMinutes, Integer preOrderConfigMaxOrderAheadDays, Boolean preOrderConfigIncludeAsap, Boolean preOrderConfigIncludeMoreGranularInitialTime, String preOrderConfigCutOffTimePreviousDayBasic, String preOrderConfigCutOffTimeCurrentDayBasic, String preOrderConfigPreOrderTimeDisplayType, Boolean preOrderConfigAlwaysAppearOpen, Boolean preOrderConfigRequireExplicitSelectAlways, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling getPreOrderPreview(Async)");
        }
        
        // verify the required parameter 'deliveryType' is set
        if (deliveryType == null) {
            throw new ApiException("Missing the required parameter 'deliveryType' when calling getPreOrderPreview(Async)");
        }
        

        com.squareup.okhttp.Call call = getPreOrderPreviewCall(storeId, deliveryType, preOrderConfigLeadTimeMinutes, preOrderConfigIntervalMinutes, preOrderConfigMaxOrderAheadDays, preOrderConfigIncludeAsap, preOrderConfigIncludeMoreGranularInitialTime, preOrderConfigCutOffTimePreviousDayBasic, preOrderConfigCutOffTimeCurrentDayBasic, preOrderConfigPreOrderTimeDisplayType, preOrderConfigAlwaysAppearOpen, preOrderConfigRequireExplicitSelectAlways, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param storeId  (required)
     * @param deliveryType  (required)
     * @param preOrderConfigLeadTimeMinutes Lead Time in Minutes (optional)
     * @param preOrderConfigIntervalMinutes Interval in minutes (optional)
     * @param preOrderConfigMaxOrderAheadDays Max Days to order ahead (optional)
     * @param preOrderConfigIncludeAsap Show ASAP as option (optional)
     * @param preOrderConfigIncludeMoreGranularInitialTime Granual Init&#39; Time (optional)
     * @param preOrderConfigCutOffTimePreviousDayBasic Cut off time previous day (optional)
     * @param preOrderConfigCutOffTimeCurrentDayBasic Cut off time current day (optional)
     * @param preOrderConfigPreOrderTimeDisplayType Type of time displayed. (optional)
     * @param preOrderConfigAlwaysAppearOpen Specifies whether a customer can pre-order outside the store opening hours or not. (optional)
     * @param preOrderConfigRequireExplicitSelectAlways Force customer to select collection time. (optional)
     * @return RestApiArrayResultPreOrderTime
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiArrayResultPreOrderTime getPreOrderPreview(Integer storeId, String deliveryType, Integer preOrderConfigLeadTimeMinutes, Integer preOrderConfigIntervalMinutes, Integer preOrderConfigMaxOrderAheadDays, Boolean preOrderConfigIncludeAsap, Boolean preOrderConfigIncludeMoreGranularInitialTime, String preOrderConfigCutOffTimePreviousDayBasic, String preOrderConfigCutOffTimeCurrentDayBasic, String preOrderConfigPreOrderTimeDisplayType, Boolean preOrderConfigAlwaysAppearOpen, Boolean preOrderConfigRequireExplicitSelectAlways) throws ApiException {
        ApiResponse<RestApiArrayResultPreOrderTime> resp = getPreOrderPreviewWithHttpInfo(storeId, deliveryType, preOrderConfigLeadTimeMinutes, preOrderConfigIntervalMinutes, preOrderConfigMaxOrderAheadDays, preOrderConfigIncludeAsap, preOrderConfigIncludeMoreGranularInitialTime, preOrderConfigCutOffTimePreviousDayBasic, preOrderConfigCutOffTimeCurrentDayBasic, preOrderConfigPreOrderTimeDisplayType, preOrderConfigAlwaysAppearOpen, preOrderConfigRequireExplicitSelectAlways);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param storeId  (required)
     * @param deliveryType  (required)
     * @param preOrderConfigLeadTimeMinutes Lead Time in Minutes (optional)
     * @param preOrderConfigIntervalMinutes Interval in minutes (optional)
     * @param preOrderConfigMaxOrderAheadDays Max Days to order ahead (optional)
     * @param preOrderConfigIncludeAsap Show ASAP as option (optional)
     * @param preOrderConfigIncludeMoreGranularInitialTime Granual Init&#39; Time (optional)
     * @param preOrderConfigCutOffTimePreviousDayBasic Cut off time previous day (optional)
     * @param preOrderConfigCutOffTimeCurrentDayBasic Cut off time current day (optional)
     * @param preOrderConfigPreOrderTimeDisplayType Type of time displayed. (optional)
     * @param preOrderConfigAlwaysAppearOpen Specifies whether a customer can pre-order outside the store opening hours or not. (optional)
     * @param preOrderConfigRequireExplicitSelectAlways Force customer to select collection time. (optional)
     * @return ApiResponse&lt;RestApiArrayResultPreOrderTime&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiArrayResultPreOrderTime> getPreOrderPreviewWithHttpInfo(Integer storeId, String deliveryType, Integer preOrderConfigLeadTimeMinutes, Integer preOrderConfigIntervalMinutes, Integer preOrderConfigMaxOrderAheadDays, Boolean preOrderConfigIncludeAsap, Boolean preOrderConfigIncludeMoreGranularInitialTime, String preOrderConfigCutOffTimePreviousDayBasic, String preOrderConfigCutOffTimeCurrentDayBasic, String preOrderConfigPreOrderTimeDisplayType, Boolean preOrderConfigAlwaysAppearOpen, Boolean preOrderConfigRequireExplicitSelectAlways) throws ApiException {
        com.squareup.okhttp.Call call = getPreOrderPreviewValidateBeforeCall(storeId, deliveryType, preOrderConfigLeadTimeMinutes, preOrderConfigIntervalMinutes, preOrderConfigMaxOrderAheadDays, preOrderConfigIncludeAsap, preOrderConfigIncludeMoreGranularInitialTime, preOrderConfigCutOffTimePreviousDayBasic, preOrderConfigCutOffTimeCurrentDayBasic, preOrderConfigPreOrderTimeDisplayType, preOrderConfigAlwaysAppearOpen, preOrderConfigRequireExplicitSelectAlways, null, null);
        Type localVarReturnType = new TypeToken<RestApiArrayResultPreOrderTime>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param storeId  (required)
     * @param deliveryType  (required)
     * @param preOrderConfigLeadTimeMinutes Lead Time in Minutes (optional)
     * @param preOrderConfigIntervalMinutes Interval in minutes (optional)
     * @param preOrderConfigMaxOrderAheadDays Max Days to order ahead (optional)
     * @param preOrderConfigIncludeAsap Show ASAP as option (optional)
     * @param preOrderConfigIncludeMoreGranularInitialTime Granual Init&#39; Time (optional)
     * @param preOrderConfigCutOffTimePreviousDayBasic Cut off time previous day (optional)
     * @param preOrderConfigCutOffTimeCurrentDayBasic Cut off time current day (optional)
     * @param preOrderConfigPreOrderTimeDisplayType Type of time displayed. (optional)
     * @param preOrderConfigAlwaysAppearOpen Specifies whether a customer can pre-order outside the store opening hours or not. (optional)
     * @param preOrderConfigRequireExplicitSelectAlways Force customer to select collection time. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPreOrderPreviewAsync(Integer storeId, String deliveryType, Integer preOrderConfigLeadTimeMinutes, Integer preOrderConfigIntervalMinutes, Integer preOrderConfigMaxOrderAheadDays, Boolean preOrderConfigIncludeAsap, Boolean preOrderConfigIncludeMoreGranularInitialTime, String preOrderConfigCutOffTimePreviousDayBasic, String preOrderConfigCutOffTimeCurrentDayBasic, String preOrderConfigPreOrderTimeDisplayType, Boolean preOrderConfigAlwaysAppearOpen, Boolean preOrderConfigRequireExplicitSelectAlways, final ApiCallback<RestApiArrayResultPreOrderTime> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPreOrderPreviewValidateBeforeCall(storeId, deliveryType, preOrderConfigLeadTimeMinutes, preOrderConfigIntervalMinutes, preOrderConfigMaxOrderAheadDays, preOrderConfigIncludeAsap, preOrderConfigIncludeMoreGranularInitialTime, preOrderConfigCutOffTimePreviousDayBasic, preOrderConfigCutOffTimeCurrentDayBasic, preOrderConfigPreOrderTimeDisplayType, preOrderConfigAlwaysAppearOpen, preOrderConfigRequireExplicitSelectAlways, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiArrayResultPreOrderTime>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getProcessingFeeConfigsByStoreId
     * @param storeId  (required)
     * @param appNameId  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getProcessingFeeConfigsByStoreIdCall(Integer storeId, String appNameId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/stores/{storeId}/processingfeeconfigs"
            .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (appNameId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("appNameId", appNameId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getProcessingFeeConfigsByStoreIdValidateBeforeCall(Integer storeId, String appNameId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling getProcessingFeeConfigsByStoreId(Async)");
        }
        

        com.squareup.okhttp.Call call = getProcessingFeeConfigsByStoreIdCall(storeId, appNameId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param storeId  (required)
     * @param appNameId  (optional)
     * @return RestApiArrayResultProcessingFeeConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiArrayResultProcessingFeeConfig getProcessingFeeConfigsByStoreId(Integer storeId, String appNameId) throws ApiException {
        ApiResponse<RestApiArrayResultProcessingFeeConfig> resp = getProcessingFeeConfigsByStoreIdWithHttpInfo(storeId, appNameId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param storeId  (required)
     * @param appNameId  (optional)
     * @return ApiResponse&lt;RestApiArrayResultProcessingFeeConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiArrayResultProcessingFeeConfig> getProcessingFeeConfigsByStoreIdWithHttpInfo(Integer storeId, String appNameId) throws ApiException {
        com.squareup.okhttp.Call call = getProcessingFeeConfigsByStoreIdValidateBeforeCall(storeId, appNameId, null, null);
        Type localVarReturnType = new TypeToken<RestApiArrayResultProcessingFeeConfig>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param storeId  (required)
     * @param appNameId  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getProcessingFeeConfigsByStoreIdAsync(Integer storeId, String appNameId, final ApiCallback<RestApiArrayResultProcessingFeeConfig> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getProcessingFeeConfigsByStoreIdValidateBeforeCall(storeId, appNameId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiArrayResultProcessingFeeConfig>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getProcessingFeeConfigsByStoreIdAndPaymentAccountType
     * @param storeId  (required)
     * @param paymentAccountType  (required)
     * @param appNameId  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getProcessingFeeConfigsByStoreIdAndPaymentAccountTypeCall(Integer storeId, String paymentAccountType, String appNameId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/stores/{storeId}/processingfeeconfigs/{paymentAccountType}"
            .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()))
            .replaceAll("\\{" + "paymentAccountType" + "\\}", apiClient.escapeString(paymentAccountType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (appNameId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("appNameId", appNameId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getProcessingFeeConfigsByStoreIdAndPaymentAccountTypeValidateBeforeCall(Integer storeId, String paymentAccountType, String appNameId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling getProcessingFeeConfigsByStoreIdAndPaymentAccountType(Async)");
        }
        
        // verify the required parameter 'paymentAccountType' is set
        if (paymentAccountType == null) {
            throw new ApiException("Missing the required parameter 'paymentAccountType' when calling getProcessingFeeConfigsByStoreIdAndPaymentAccountType(Async)");
        }
        

        com.squareup.okhttp.Call call = getProcessingFeeConfigsByStoreIdAndPaymentAccountTypeCall(storeId, paymentAccountType, appNameId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param storeId  (required)
     * @param paymentAccountType  (required)
     * @param appNameId  (optional)
     * @return RestApiResultProcessingFeeConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultProcessingFeeConfig getProcessingFeeConfigsByStoreIdAndPaymentAccountType(Integer storeId, String paymentAccountType, String appNameId) throws ApiException {
        ApiResponse<RestApiResultProcessingFeeConfig> resp = getProcessingFeeConfigsByStoreIdAndPaymentAccountTypeWithHttpInfo(storeId, paymentAccountType, appNameId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param storeId  (required)
     * @param paymentAccountType  (required)
     * @param appNameId  (optional)
     * @return ApiResponse&lt;RestApiResultProcessingFeeConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultProcessingFeeConfig> getProcessingFeeConfigsByStoreIdAndPaymentAccountTypeWithHttpInfo(Integer storeId, String paymentAccountType, String appNameId) throws ApiException {
        com.squareup.okhttp.Call call = getProcessingFeeConfigsByStoreIdAndPaymentAccountTypeValidateBeforeCall(storeId, paymentAccountType, appNameId, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultProcessingFeeConfig>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param storeId  (required)
     * @param paymentAccountType  (required)
     * @param appNameId  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getProcessingFeeConfigsByStoreIdAndPaymentAccountTypeAsync(Integer storeId, String paymentAccountType, String appNameId, final ApiCallback<RestApiResultProcessingFeeConfig> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getProcessingFeeConfigsByStoreIdAndPaymentAccountTypeValidateBeforeCall(storeId, paymentAccountType, appNameId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultProcessingFeeConfig>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getStoreById
     * @param storeId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getStoreByIdCall(Integer storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/stores/{storeId}"
            .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStoreByIdValidateBeforeCall(Integer storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling getStoreById(Async)");
        }
        

        com.squareup.okhttp.Call call = getStoreByIdCall(storeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param storeId  (required)
     * @return RestApiResultStore
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultStore getStoreById(Integer storeId) throws ApiException {
        ApiResponse<RestApiResultStore> resp = getStoreByIdWithHttpInfo(storeId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param storeId  (required)
     * @return ApiResponse&lt;RestApiResultStore&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultStore> getStoreByIdWithHttpInfo(Integer storeId) throws ApiException {
        com.squareup.okhttp.Call call = getStoreByIdValidateBeforeCall(storeId, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultStore>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param storeId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStoreByIdAsync(Integer storeId, final ApiCallback<RestApiResultStore> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStoreByIdValidateBeforeCall(storeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultStore>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getStoreFeeConfig
     * @param storeId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getStoreFeeConfigCall(Integer storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/stores/{storeId}/feeConfig"
            .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStoreFeeConfigValidateBeforeCall(Integer storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling getStoreFeeConfig(Async)");
        }
        

        com.squareup.okhttp.Call call = getStoreFeeConfigCall(storeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param storeId  (required)
     * @return StoreFeeConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StoreFeeConfig getStoreFeeConfig(Integer storeId) throws ApiException {
        ApiResponse<StoreFeeConfig> resp = getStoreFeeConfigWithHttpInfo(storeId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param storeId  (required)
     * @return ApiResponse&lt;StoreFeeConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StoreFeeConfig> getStoreFeeConfigWithHttpInfo(Integer storeId) throws ApiException {
        com.squareup.okhttp.Call call = getStoreFeeConfigValidateBeforeCall(storeId, null, null);
        Type localVarReturnType = new TypeToken<StoreFeeConfig>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param storeId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStoreFeeConfigAsync(Integer storeId, final ApiCallback<StoreFeeConfig> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStoreFeeConfigValidateBeforeCall(storeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StoreFeeConfig>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getStoreHeadersByAppId
     * @param appId  (required)
     * @param storeNameQuery  (optional)
     * @param page  (optional)
     * @param limit  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getStoreHeadersByAppIdCall(String appId, String storeNameQuery, Integer page, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/stores/header"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storeNameQuery != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storeNameQuery", storeNameQuery));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStoreHeadersByAppIdValidateBeforeCall(String appId, String storeNameQuery, Integer page, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getStoreHeadersByAppId(Async)");
        }
        

        com.squareup.okhttp.Call call = getStoreHeadersByAppIdCall(appId, storeNameQuery, page, limit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param storeNameQuery  (optional)
     * @param page  (optional)
     * @param limit  (optional)
     * @return RestApiPaginationResultStoreHeader
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiPaginationResultStoreHeader getStoreHeadersByAppId(String appId, String storeNameQuery, Integer page, Integer limit) throws ApiException {
        ApiResponse<RestApiPaginationResultStoreHeader> resp = getStoreHeadersByAppIdWithHttpInfo(appId, storeNameQuery, page, limit);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param storeNameQuery  (optional)
     * @param page  (optional)
     * @param limit  (optional)
     * @return ApiResponse&lt;RestApiPaginationResultStoreHeader&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiPaginationResultStoreHeader> getStoreHeadersByAppIdWithHttpInfo(String appId, String storeNameQuery, Integer page, Integer limit) throws ApiException {
        com.squareup.okhttp.Call call = getStoreHeadersByAppIdValidateBeforeCall(appId, storeNameQuery, page, limit, null, null);
        Type localVarReturnType = new TypeToken<RestApiPaginationResultStoreHeader>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param storeNameQuery  (optional)
     * @param page  (optional)
     * @param limit  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStoreHeadersByAppIdAsync(String appId, String storeNameQuery, Integer page, Integer limit, final ApiCallback<RestApiPaginationResultStoreHeader> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStoreHeadersByAppIdValidateBeforeCall(appId, storeNameQuery, page, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiPaginationResultStoreHeader>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getStoreNetSales
     * @param appId  (required)
     * @param storeId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getStoreNetSalesCall(String appId, List<Integer> storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/stores/stats"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storeId != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "storeId", storeId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStoreNetSalesValidateBeforeCall(String appId, List<Integer> storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getStoreNetSales(Async)");
        }
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling getStoreNetSales(Async)");
        }
        

        com.squareup.okhttp.Call call = getStoreNetSalesCall(appId, storeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param storeId  (required)
     * @return RestApiArrayResultStoreStatistics
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiArrayResultStoreStatistics getStoreNetSales(String appId, List<Integer> storeId) throws ApiException {
        ApiResponse<RestApiArrayResultStoreStatistics> resp = getStoreNetSalesWithHttpInfo(appId, storeId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param storeId  (required)
     * @return ApiResponse&lt;RestApiArrayResultStoreStatistics&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiArrayResultStoreStatistics> getStoreNetSalesWithHttpInfo(String appId, List<Integer> storeId) throws ApiException {
        com.squareup.okhttp.Call call = getStoreNetSalesValidateBeforeCall(appId, storeId, null, null);
        Type localVarReturnType = new TypeToken<RestApiArrayResultStoreStatistics>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param storeId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStoreNetSalesAsync(String appId, List<Integer> storeId, final ApiCallback<RestApiArrayResultStoreStatistics> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStoreNetSalesValidateBeforeCall(appId, storeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiArrayResultStoreStatistics>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getStoreServiceCharge
     * @param storeId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getStoreServiceChargeCall(Integer storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/stores/{storeId}/servicecharge"
            .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStoreServiceChargeValidateBeforeCall(Integer storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling getStoreServiceCharge(Async)");
        }
        

        com.squareup.okhttp.Call call = getStoreServiceChargeCall(storeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param storeId  (required)
     * @return ServiceCharge
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ServiceCharge getStoreServiceCharge(Integer storeId) throws ApiException {
        ApiResponse<ServiceCharge> resp = getStoreServiceChargeWithHttpInfo(storeId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param storeId  (required)
     * @return ApiResponse&lt;ServiceCharge&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ServiceCharge> getStoreServiceChargeWithHttpInfo(Integer storeId) throws ApiException {
        com.squareup.okhttp.Call call = getStoreServiceChargeValidateBeforeCall(storeId, null, null);
        Type localVarReturnType = new TypeToken<ServiceCharge>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param storeId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStoreServiceChargeAsync(Integer storeId, final ApiCallback<ServiceCharge> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStoreServiceChargeValidateBeforeCall(storeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ServiceCharge>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getStores
     * @param searchQuery  (optional)
     * @param page  (optional)
     * @param limit  (optional)
     * @param storeGroupId  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getStoresCall(String searchQuery, Integer page, Integer limit, Integer storeGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/stores";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (searchQuery != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("searchQuery", searchQuery));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (storeGroupId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storeGroupId", storeGroupId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStoresValidateBeforeCall(String searchQuery, Integer page, Integer limit, Integer storeGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getStoresCall(searchQuery, page, limit, storeGroupId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param searchQuery  (optional)
     * @param page  (optional)
     * @param limit  (optional)
     * @param storeGroupId  (optional)
     * @return RestApiPaginationResultStore
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiPaginationResultStore getStores(String searchQuery, Integer page, Integer limit, Integer storeGroupId) throws ApiException {
        ApiResponse<RestApiPaginationResultStore> resp = getStoresWithHttpInfo(searchQuery, page, limit, storeGroupId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param searchQuery  (optional)
     * @param page  (optional)
     * @param limit  (optional)
     * @param storeGroupId  (optional)
     * @return ApiResponse&lt;RestApiPaginationResultStore&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiPaginationResultStore> getStoresWithHttpInfo(String searchQuery, Integer page, Integer limit, Integer storeGroupId) throws ApiException {
        com.squareup.okhttp.Call call = getStoresValidateBeforeCall(searchQuery, page, limit, storeGroupId, null, null);
        Type localVarReturnType = new TypeToken<RestApiPaginationResultStore>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param searchQuery  (optional)
     * @param page  (optional)
     * @param limit  (optional)
     * @param storeGroupId  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStoresAsync(String searchQuery, Integer page, Integer limit, Integer storeGroupId, final ApiCallback<RestApiPaginationResultStore> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStoresValidateBeforeCall(searchQuery, page, limit, storeGroupId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiPaginationResultStore>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getStoresByAppId
     * @param appId  (required)
     * @param searchQuery  (optional)
     * @param page  (optional)
     * @param limit  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getStoresByAppIdCall(String appId, String searchQuery, Integer page, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/stores"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (searchQuery != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("searchQuery", searchQuery));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStoresByAppIdValidateBeforeCall(String appId, String searchQuery, Integer page, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getStoresByAppId(Async)");
        }
        

        com.squareup.okhttp.Call call = getStoresByAppIdCall(appId, searchQuery, page, limit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param searchQuery  (optional)
     * @param page  (optional)
     * @param limit  (optional)
     * @return RestApiPaginationResultStore
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiPaginationResultStore getStoresByAppId(String appId, String searchQuery, Integer page, Integer limit) throws ApiException {
        ApiResponse<RestApiPaginationResultStore> resp = getStoresByAppIdWithHttpInfo(appId, searchQuery, page, limit);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param searchQuery  (optional)
     * @param page  (optional)
     * @param limit  (optional)
     * @return ApiResponse&lt;RestApiPaginationResultStore&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiPaginationResultStore> getStoresByAppIdWithHttpInfo(String appId, String searchQuery, Integer page, Integer limit) throws ApiException {
        com.squareup.okhttp.Call call = getStoresByAppIdValidateBeforeCall(appId, searchQuery, page, limit, null, null);
        Type localVarReturnType = new TypeToken<RestApiPaginationResultStore>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param searchQuery  (optional)
     * @param page  (optional)
     * @param limit  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStoresByAppIdAsync(String appId, String searchQuery, Integer page, Integer limit, final ApiCallback<RestApiPaginationResultStore> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStoresByAppIdValidateBeforeCall(appId, searchQuery, page, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiPaginationResultStore>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getStoresByStoreIdWithValidations
     * @param storeId  (required)
     * @param appId  (required)
     * @param page  (optional)
     * @param limit  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getStoresByStoreIdWithValidationsCall(List<Integer> storeId, String appId, Integer page, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/storevalidation/kiosk"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storeId != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "storeId", storeId));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStoresByStoreIdWithValidationsValidateBeforeCall(List<Integer> storeId, String appId, Integer page, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling getStoresByStoreIdWithValidations(Async)");
        }
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getStoresByStoreIdWithValidations(Async)");
        }
        

        com.squareup.okhttp.Call call = getStoresByStoreIdWithValidationsCall(storeId, appId, page, limit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param storeId  (required)
     * @param appId  (required)
     * @param page  (optional)
     * @param limit  (optional)
     * @return RestApiPaginationResultStoreValidationConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiPaginationResultStoreValidationConfig getStoresByStoreIdWithValidations(List<Integer> storeId, String appId, Integer page, Integer limit) throws ApiException {
        ApiResponse<RestApiPaginationResultStoreValidationConfig> resp = getStoresByStoreIdWithValidationsWithHttpInfo(storeId, appId, page, limit);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param storeId  (required)
     * @param appId  (required)
     * @param page  (optional)
     * @param limit  (optional)
     * @return ApiResponse&lt;RestApiPaginationResultStoreValidationConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiPaginationResultStoreValidationConfig> getStoresByStoreIdWithValidationsWithHttpInfo(List<Integer> storeId, String appId, Integer page, Integer limit) throws ApiException {
        com.squareup.okhttp.Call call = getStoresByStoreIdWithValidationsValidateBeforeCall(storeId, appId, page, limit, null, null);
        Type localVarReturnType = new TypeToken<RestApiPaginationResultStoreValidationConfig>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param storeId  (required)
     * @param appId  (required)
     * @param page  (optional)
     * @param limit  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStoresByStoreIdWithValidationsAsync(List<Integer> storeId, String appId, Integer page, Integer limit, final ApiCallback<RestApiPaginationResultStoreValidationConfig> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStoresByStoreIdWithValidationsValidateBeforeCall(storeId, appId, page, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiPaginationResultStoreValidationConfig>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for publishStore
     * @param storeId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call publishStoreCall(Integer storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/stores/{storeId}/publish"
            .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call publishStoreValidateBeforeCall(Integer storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling publishStore(Async)");
        }
        

        com.squareup.okhttp.Call call = publishStoreCall(storeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param storeId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void publishStore(Integer storeId) throws ApiException {
        publishStoreWithHttpInfo(storeId);
    }

    /**
     * 
     * 
     * @param storeId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> publishStoreWithHttpInfo(Integer storeId) throws ApiException {
        com.squareup.okhttp.Call call = publishStoreValidateBeforeCall(storeId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param storeId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call publishStoreAsync(Integer storeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = publishStoreValidateBeforeCall(storeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for setBusinessHours
     * @param storeId  (required)
     * @param deliveryType  (required)
     * @param businessHoursPeriod  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setBusinessHoursCall(Integer storeId, String deliveryType, BusinessHoursPeriodBase businessHoursPeriod, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = businessHoursPeriod;

        // create path and map variables
        String localVarPath = "/api/v1.0/stores/{storeId}/availability/{deliveryType}"
            .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()))
            .replaceAll("\\{" + "deliveryType" + "\\}", apiClient.escapeString(deliveryType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setBusinessHoursValidateBeforeCall(Integer storeId, String deliveryType, BusinessHoursPeriodBase businessHoursPeriod, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling setBusinessHours(Async)");
        }
        
        // verify the required parameter 'deliveryType' is set
        if (deliveryType == null) {
            throw new ApiException("Missing the required parameter 'deliveryType' when calling setBusinessHours(Async)");
        }
        
        // verify the required parameter 'businessHoursPeriod' is set
        if (businessHoursPeriod == null) {
            throw new ApiException("Missing the required parameter 'businessHoursPeriod' when calling setBusinessHours(Async)");
        }
        

        com.squareup.okhttp.Call call = setBusinessHoursCall(storeId, deliveryType, businessHoursPeriod, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param storeId  (required)
     * @param deliveryType  (required)
     * @param businessHoursPeriod  (required)
     * @return RestApiResultBusinessHoursPeriod
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultBusinessHoursPeriod setBusinessHours(Integer storeId, String deliveryType, BusinessHoursPeriodBase businessHoursPeriod) throws ApiException {
        ApiResponse<RestApiResultBusinessHoursPeriod> resp = setBusinessHoursWithHttpInfo(storeId, deliveryType, businessHoursPeriod);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param storeId  (required)
     * @param deliveryType  (required)
     * @param businessHoursPeriod  (required)
     * @return ApiResponse&lt;RestApiResultBusinessHoursPeriod&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultBusinessHoursPeriod> setBusinessHoursWithHttpInfo(Integer storeId, String deliveryType, BusinessHoursPeriodBase businessHoursPeriod) throws ApiException {
        com.squareup.okhttp.Call call = setBusinessHoursValidateBeforeCall(storeId, deliveryType, businessHoursPeriod, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultBusinessHoursPeriod>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param storeId  (required)
     * @param deliveryType  (required)
     * @param businessHoursPeriod  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setBusinessHoursAsync(Integer storeId, String deliveryType, BusinessHoursPeriodBase businessHoursPeriod, final ApiCallback<RestApiResultBusinessHoursPeriod> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setBusinessHoursValidateBeforeCall(storeId, deliveryType, businessHoursPeriod, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultBusinessHoursPeriod>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setPreOrdeEnabled
     * @param storeId  (required)
     * @param deliveryType  (required)
     * @param enabled  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setPreOrdeEnabledCall(Integer storeId, String deliveryType, Boolean enabled, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/stores/{storeId}/preorderconfig/{deliveryType}/enabled"
            .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()))
            .replaceAll("\\{" + "deliveryType" + "\\}", apiClient.escapeString(deliveryType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (enabled != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("enabled", enabled));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setPreOrdeEnabledValidateBeforeCall(Integer storeId, String deliveryType, Boolean enabled, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling setPreOrdeEnabled(Async)");
        }
        
        // verify the required parameter 'deliveryType' is set
        if (deliveryType == null) {
            throw new ApiException("Missing the required parameter 'deliveryType' when calling setPreOrdeEnabled(Async)");
        }
        
        // verify the required parameter 'enabled' is set
        if (enabled == null) {
            throw new ApiException("Missing the required parameter 'enabled' when calling setPreOrdeEnabled(Async)");
        }
        

        com.squareup.okhttp.Call call = setPreOrdeEnabledCall(storeId, deliveryType, enabled, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param storeId  (required)
     * @param deliveryType  (required)
     * @param enabled  (required)
     * @return RestApiArrayResultRestApiDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiArrayResultRestApiDefaultResponse setPreOrdeEnabled(Integer storeId, String deliveryType, Boolean enabled) throws ApiException {
        ApiResponse<RestApiArrayResultRestApiDefaultResponse> resp = setPreOrdeEnabledWithHttpInfo(storeId, deliveryType, enabled);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param storeId  (required)
     * @param deliveryType  (required)
     * @param enabled  (required)
     * @return ApiResponse&lt;RestApiArrayResultRestApiDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiArrayResultRestApiDefaultResponse> setPreOrdeEnabledWithHttpInfo(Integer storeId, String deliveryType, Boolean enabled) throws ApiException {
        com.squareup.okhttp.Call call = setPreOrdeEnabledValidateBeforeCall(storeId, deliveryType, enabled, null, null);
        Type localVarReturnType = new TypeToken<RestApiArrayResultRestApiDefaultResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param storeId  (required)
     * @param deliveryType  (required)
     * @param enabled  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setPreOrdeEnabledAsync(Integer storeId, String deliveryType, Boolean enabled, final ApiCallback<RestApiArrayResultRestApiDefaultResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setPreOrdeEnabledValidateBeforeCall(storeId, deliveryType, enabled, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiArrayResultRestApiDefaultResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for unpublishStore
     * @param storeId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call unpublishStoreCall(Integer storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/stores/{storeId}/unpublish"
            .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call unpublishStoreValidateBeforeCall(Integer storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling unpublishStore(Async)");
        }
        

        com.squareup.okhttp.Call call = unpublishStoreCall(storeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param storeId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void unpublishStore(Integer storeId) throws ApiException {
        unpublishStoreWithHttpInfo(storeId);
    }

    /**
     * 
     * 
     * @param storeId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> unpublishStoreWithHttpInfo(Integer storeId) throws ApiException {
        com.squareup.okhttp.Call call = unpublishStoreValidateBeforeCall(storeId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param storeId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call unpublishStoreAsync(Integer storeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = unpublishStoreValidateBeforeCall(storeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updatePreOrderConfig
     * @param storeId  (required)
     * @param deliveryType  (required)
     * @param preOrderConfig  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updatePreOrderConfigCall(Integer storeId, String deliveryType, PreOrderConfig preOrderConfig, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = preOrderConfig;

        // create path and map variables
        String localVarPath = "/api/v1.0/stores/{storeId}/preorderconfig/{deliveryType}"
            .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()))
            .replaceAll("\\{" + "deliveryType" + "\\}", apiClient.escapeString(deliveryType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updatePreOrderConfigValidateBeforeCall(Integer storeId, String deliveryType, PreOrderConfig preOrderConfig, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling updatePreOrderConfig(Async)");
        }
        
        // verify the required parameter 'deliveryType' is set
        if (deliveryType == null) {
            throw new ApiException("Missing the required parameter 'deliveryType' when calling updatePreOrderConfig(Async)");
        }
        
        // verify the required parameter 'preOrderConfig' is set
        if (preOrderConfig == null) {
            throw new ApiException("Missing the required parameter 'preOrderConfig' when calling updatePreOrderConfig(Async)");
        }
        

        com.squareup.okhttp.Call call = updatePreOrderConfigCall(storeId, deliveryType, preOrderConfig, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param storeId  (required)
     * @param deliveryType  (required)
     * @param preOrderConfig  (required)
     * @return RestApiArrayResultRestApiDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiArrayResultRestApiDefaultResponse updatePreOrderConfig(Integer storeId, String deliveryType, PreOrderConfig preOrderConfig) throws ApiException {
        ApiResponse<RestApiArrayResultRestApiDefaultResponse> resp = updatePreOrderConfigWithHttpInfo(storeId, deliveryType, preOrderConfig);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param storeId  (required)
     * @param deliveryType  (required)
     * @param preOrderConfig  (required)
     * @return ApiResponse&lt;RestApiArrayResultRestApiDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiArrayResultRestApiDefaultResponse> updatePreOrderConfigWithHttpInfo(Integer storeId, String deliveryType, PreOrderConfig preOrderConfig) throws ApiException {
        com.squareup.okhttp.Call call = updatePreOrderConfigValidateBeforeCall(storeId, deliveryType, preOrderConfig, null, null);
        Type localVarReturnType = new TypeToken<RestApiArrayResultRestApiDefaultResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param storeId  (required)
     * @param deliveryType  (required)
     * @param preOrderConfig  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updatePreOrderConfigAsync(Integer storeId, String deliveryType, PreOrderConfig preOrderConfig, final ApiCallback<RestApiArrayResultRestApiDefaultResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updatePreOrderConfigValidateBeforeCall(storeId, deliveryType, preOrderConfig, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiArrayResultRestApiDefaultResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateStore
     * @param storeId  (required)
     * @param store  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateStoreCall(Integer storeId, StoreBase store, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = store;

        // create path and map variables
        String localVarPath = "/api/v1.0/stores/{storeId}"
            .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateStoreValidateBeforeCall(Integer storeId, StoreBase store, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling updateStore(Async)");
        }
        
        // verify the required parameter 'store' is set
        if (store == null) {
            throw new ApiException("Missing the required parameter 'store' when calling updateStore(Async)");
        }
        

        com.squareup.okhttp.Call call = updateStoreCall(storeId, store, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param storeId  (required)
     * @param store  (required)
     * @return RestApiResultStore
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultStore updateStore(Integer storeId, StoreBase store) throws ApiException {
        ApiResponse<RestApiResultStore> resp = updateStoreWithHttpInfo(storeId, store);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param storeId  (required)
     * @param store  (required)
     * @return ApiResponse&lt;RestApiResultStore&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultStore> updateStoreWithHttpInfo(Integer storeId, StoreBase store) throws ApiException {
        com.squareup.okhttp.Call call = updateStoreValidateBeforeCall(storeId, store, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultStore>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param storeId  (required)
     * @param store  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateStoreAsync(Integer storeId, StoreBase store, final ApiCallback<RestApiResultStore> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateStoreValidateBeforeCall(storeId, store, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultStore>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateStoreAddress
     * @param storeId  (required)
     * @param storeAddress  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateStoreAddressCall(Integer storeId, StoreAddressBase storeAddress, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = storeAddress;

        // create path and map variables
        String localVarPath = "/api/v1.0/stores/{storeId}/address"
            .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateStoreAddressValidateBeforeCall(Integer storeId, StoreAddressBase storeAddress, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling updateStoreAddress(Async)");
        }
        
        // verify the required parameter 'storeAddress' is set
        if (storeAddress == null) {
            throw new ApiException("Missing the required parameter 'storeAddress' when calling updateStoreAddress(Async)");
        }
        

        com.squareup.okhttp.Call call = updateStoreAddressCall(storeId, storeAddress, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param storeId  (required)
     * @param storeAddress  (required)
     * @return RestApiResultStoreAddress
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultStoreAddress updateStoreAddress(Integer storeId, StoreAddressBase storeAddress) throws ApiException {
        ApiResponse<RestApiResultStoreAddress> resp = updateStoreAddressWithHttpInfo(storeId, storeAddress);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param storeId  (required)
     * @param storeAddress  (required)
     * @return ApiResponse&lt;RestApiResultStoreAddress&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultStoreAddress> updateStoreAddressWithHttpInfo(Integer storeId, StoreAddressBase storeAddress) throws ApiException {
        com.squareup.okhttp.Call call = updateStoreAddressValidateBeforeCall(storeId, storeAddress, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultStoreAddress>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param storeId  (required)
     * @param storeAddress  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateStoreAddressAsync(Integer storeId, StoreAddressBase storeAddress, final ApiCallback<RestApiResultStoreAddress> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateStoreAddressValidateBeforeCall(storeId, storeAddress, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultStoreAddress>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateStoreAddressCoordinates
     * @param storeId  (required)
     * @param coordinates  (required)
     * @param appNameId  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateStoreAddressCoordinatesCall(Integer storeId, Coordinates coordinates, String appNameId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = coordinates;

        // create path and map variables
        String localVarPath = "/api/v1.0/stores/{storeId}/address/coordinates"
            .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (appNameId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("appNameId", appNameId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateStoreAddressCoordinatesValidateBeforeCall(Integer storeId, Coordinates coordinates, String appNameId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling updateStoreAddressCoordinates(Async)");
        }
        
        // verify the required parameter 'coordinates' is set
        if (coordinates == null) {
            throw new ApiException("Missing the required parameter 'coordinates' when calling updateStoreAddressCoordinates(Async)");
        }
        

        com.squareup.okhttp.Call call = updateStoreAddressCoordinatesCall(storeId, coordinates, appNameId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param storeId  (required)
     * @param coordinates  (required)
     * @param appNameId  (optional)
     * @return RestApiResultCoordinates
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultCoordinates updateStoreAddressCoordinates(Integer storeId, Coordinates coordinates, String appNameId) throws ApiException {
        ApiResponse<RestApiResultCoordinates> resp = updateStoreAddressCoordinatesWithHttpInfo(storeId, coordinates, appNameId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param storeId  (required)
     * @param coordinates  (required)
     * @param appNameId  (optional)
     * @return ApiResponse&lt;RestApiResultCoordinates&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultCoordinates> updateStoreAddressCoordinatesWithHttpInfo(Integer storeId, Coordinates coordinates, String appNameId) throws ApiException {
        com.squareup.okhttp.Call call = updateStoreAddressCoordinatesValidateBeforeCall(storeId, coordinates, appNameId, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultCoordinates>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param storeId  (required)
     * @param coordinates  (required)
     * @param appNameId  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateStoreAddressCoordinatesAsync(Integer storeId, Coordinates coordinates, String appNameId, final ApiCallback<RestApiResultCoordinates> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateStoreAddressCoordinatesValidateBeforeCall(storeId, coordinates, appNameId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultCoordinates>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateStoreAddressForm
     * @param storeId  (required)
     * @param address  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateStoreAddressFormCall(Integer storeId, StoreAddressForm address, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = address;

        // create path and map variables
        String localVarPath = "/api/v1.0/stores/{storeId}/addressform"
            .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateStoreAddressFormValidateBeforeCall(Integer storeId, StoreAddressForm address, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling updateStoreAddressForm(Async)");
        }
        
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling updateStoreAddressForm(Async)");
        }
        

        com.squareup.okhttp.Call call = updateStoreAddressFormCall(storeId, address, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param storeId  (required)
     * @param address  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object updateStoreAddressForm(Integer storeId, StoreAddressForm address) throws ApiException {
        ApiResponse<Object> resp = updateStoreAddressFormWithHttpInfo(storeId, address);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param storeId  (required)
     * @param address  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> updateStoreAddressFormWithHttpInfo(Integer storeId, StoreAddressForm address) throws ApiException {
        com.squareup.okhttp.Call call = updateStoreAddressFormValidateBeforeCall(storeId, address, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param storeId  (required)
     * @param address  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateStoreAddressFormAsync(Integer storeId, StoreAddressForm address, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateStoreAddressFormValidateBeforeCall(storeId, address, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
