/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.flipdish.apiclient.api;

import com.flipdish.apiclient.ApiCallback;
import com.flipdish.apiclient.ApiClient;
import com.flipdish.apiclient.ApiException;
import com.flipdish.apiclient.ApiResponse;
import com.flipdish.apiclient.Configuration;
import com.flipdish.apiclient.Pair;
import com.flipdish.apiclient.ProgressRequestBody;
import com.flipdish.apiclient.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.threeten.bp.OffsetDateTime;
import com.flipdish.apiclient.model.RestApiArrayResultOrderBatchSummary;
import com.flipdish.apiclient.model.RestApiErrorResult;
import com.flipdish.apiclient.model.RestApiForbiddenResult;
import com.flipdish.apiclient.model.RestApiResultOrderBatch;
import com.flipdish.apiclient.model.RestApiUnauthorizedResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OrderBatchesApi {
    private ApiClient apiClient;

    public OrderBatchesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OrderBatchesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getAllOrderBatches
     * @param appId App Id (required)
     * @param storeId Store Id (required)
     * @param createdFrom Start date for retrieving the entries (optional)
     * @param createdTo End date for retrieving the entries (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllOrderBatchesCall(String appId, Integer storeId, OffsetDateTime createdFrom, OffsetDateTime createdTo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/stores/{storeId}/order-batches"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (createdFrom != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("createdFrom", createdFrom));
        if (createdTo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("createdTo", createdTo));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllOrderBatchesValidateBeforeCall(String appId, Integer storeId, OffsetDateTime createdFrom, OffsetDateTime createdTo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getAllOrderBatches(Async)");
        }
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling getAllOrderBatches(Async)");
        }
        

        com.squareup.okhttp.Call call = getAllOrderBatchesCall(appId, storeId, createdFrom, createdTo, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns order batches
     * Entries are sorted by date, from the most recent. At most 100 entries are returned.
     * @param appId App Id (required)
     * @param storeId Store Id (required)
     * @param createdFrom Start date for retrieving the entries (optional)
     * @param createdTo End date for retrieving the entries (optional)
     * @return RestApiArrayResultOrderBatchSummary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiArrayResultOrderBatchSummary getAllOrderBatches(String appId, Integer storeId, OffsetDateTime createdFrom, OffsetDateTime createdTo) throws ApiException {
        ApiResponse<RestApiArrayResultOrderBatchSummary> resp = getAllOrderBatchesWithHttpInfo(appId, storeId, createdFrom, createdTo);
        return resp.getData();
    }

    /**
     * Returns order batches
     * Entries are sorted by date, from the most recent. At most 100 entries are returned.
     * @param appId App Id (required)
     * @param storeId Store Id (required)
     * @param createdFrom Start date for retrieving the entries (optional)
     * @param createdTo End date for retrieving the entries (optional)
     * @return ApiResponse&lt;RestApiArrayResultOrderBatchSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiArrayResultOrderBatchSummary> getAllOrderBatchesWithHttpInfo(String appId, Integer storeId, OffsetDateTime createdFrom, OffsetDateTime createdTo) throws ApiException {
        com.squareup.okhttp.Call call = getAllOrderBatchesValidateBeforeCall(appId, storeId, createdFrom, createdTo, null, null);
        Type localVarReturnType = new TypeToken<RestApiArrayResultOrderBatchSummary>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns order batches (asynchronously)
     * Entries are sorted by date, from the most recent. At most 100 entries are returned.
     * @param appId App Id (required)
     * @param storeId Store Id (required)
     * @param createdFrom Start date for retrieving the entries (optional)
     * @param createdTo End date for retrieving the entries (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllOrderBatchesAsync(String appId, Integer storeId, OffsetDateTime createdFrom, OffsetDateTime createdTo, final ApiCallback<RestApiArrayResultOrderBatchSummary> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllOrderBatchesValidateBeforeCall(appId, storeId, createdFrom, createdTo, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiArrayResultOrderBatchSummary>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOrderBatch
     * @param appId App Id (required)
     * @param storeId Store Id (required)
     * @param orderBatchId Order Batch Id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOrderBatchCall(String appId, Integer storeId, Integer orderBatchId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/stores/{storeId}/order-batches/{orderBatchId}"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()))
            .replaceAll("\\{" + "orderBatchId" + "\\}", apiClient.escapeString(orderBatchId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOrderBatchValidateBeforeCall(String appId, Integer storeId, Integer orderBatchId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getOrderBatch(Async)");
        }
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling getOrderBatch(Async)");
        }
        
        // verify the required parameter 'orderBatchId' is set
        if (orderBatchId == null) {
            throw new ApiException("Missing the required parameter 'orderBatchId' when calling getOrderBatch(Async)");
        }
        

        com.squareup.okhttp.Call call = getOrderBatchCall(appId, storeId, orderBatchId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns the order batch details
     * 
     * @param appId App Id (required)
     * @param storeId Store Id (required)
     * @param orderBatchId Order Batch Id (required)
     * @return RestApiResultOrderBatch
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultOrderBatch getOrderBatch(String appId, Integer storeId, Integer orderBatchId) throws ApiException {
        ApiResponse<RestApiResultOrderBatch> resp = getOrderBatchWithHttpInfo(appId, storeId, orderBatchId);
        return resp.getData();
    }

    /**
     * Returns the order batch details
     * 
     * @param appId App Id (required)
     * @param storeId Store Id (required)
     * @param orderBatchId Order Batch Id (required)
     * @return ApiResponse&lt;RestApiResultOrderBatch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultOrderBatch> getOrderBatchWithHttpInfo(String appId, Integer storeId, Integer orderBatchId) throws ApiException {
        com.squareup.okhttp.Call call = getOrderBatchValidateBeforeCall(appId, storeId, orderBatchId, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultOrderBatch>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns the order batch details (asynchronously)
     * 
     * @param appId App Id (required)
     * @param storeId Store Id (required)
     * @param orderBatchId Order Batch Id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOrderBatchAsync(String appId, Integer storeId, Integer orderBatchId, final ApiCallback<RestApiResultOrderBatch> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOrderBatchValidateBeforeCall(appId, storeId, orderBatchId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultOrderBatch>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
