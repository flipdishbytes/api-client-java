/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.flipdish.apiclient.api;

import com.flipdish.apiclient.ApiCallback;
import com.flipdish.apiclient.ApiClient;
import com.flipdish.apiclient.ApiException;
import com.flipdish.apiclient.ApiResponse;
import com.flipdish.apiclient.Configuration;
import com.flipdish.apiclient.Pair;
import com.flipdish.apiclient.ProgressRequestBody;
import com.flipdish.apiclient.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.flipdish.apiclient.model.CreateLocation;
import com.flipdish.apiclient.model.LocationAreaLocation;
import com.flipdish.apiclient.model.RestApiErrorResult;
import com.flipdish.apiclient.model.RestApiForbiddenResult;
import com.flipdish.apiclient.model.RestApiUnauthorizedResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LocationApi {
    private ApiClient apiClient;

    public LocationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LocationApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createLocation
     * @param createLocationInput Input data for creating the Location (required)
     * @param locationAreaId Id of the Location area where the Location belongs (required)
     * @param appId AppId i.e: (fd1234) (required)
     * @param storeId Id of the Store (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createLocationCall(CreateLocation createLocationInput, Integer locationAreaId, String appId, Integer storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = createLocationInput;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/stores/{storeId}/location-areas/{locationAreaId}/location"
            .replaceAll("\\{" + "locationAreaId" + "\\}", apiClient.escapeString(locationAreaId.toString()))
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createLocationValidateBeforeCall(CreateLocation createLocationInput, Integer locationAreaId, String appId, Integer storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'createLocationInput' is set
        if (createLocationInput == null) {
            throw new ApiException("Missing the required parameter 'createLocationInput' when calling createLocation(Async)");
        }
        
        // verify the required parameter 'locationAreaId' is set
        if (locationAreaId == null) {
            throw new ApiException("Missing the required parameter 'locationAreaId' when calling createLocation(Async)");
        }
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling createLocation(Async)");
        }
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling createLocation(Async)");
        }
        

        com.squareup.okhttp.Call call = createLocationCall(createLocationInput, locationAreaId, appId, storeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a Location i.e: Table, Hotel Room, Car park space
     * 
     * @param createLocationInput Input data for creating the Location (required)
     * @param locationAreaId Id of the Location area where the Location belongs (required)
     * @param appId AppId i.e: (fd1234) (required)
     * @param storeId Id of the Store (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object createLocation(CreateLocation createLocationInput, Integer locationAreaId, String appId, Integer storeId) throws ApiException {
        ApiResponse<Object> resp = createLocationWithHttpInfo(createLocationInput, locationAreaId, appId, storeId);
        return resp.getData();
    }

    /**
     * Create a Location i.e: Table, Hotel Room, Car park space
     * 
     * @param createLocationInput Input data for creating the Location (required)
     * @param locationAreaId Id of the Location area where the Location belongs (required)
     * @param appId AppId i.e: (fd1234) (required)
     * @param storeId Id of the Store (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> createLocationWithHttpInfo(CreateLocation createLocationInput, Integer locationAreaId, String appId, Integer storeId) throws ApiException {
        com.squareup.okhttp.Call call = createLocationValidateBeforeCall(createLocationInput, locationAreaId, appId, storeId, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a Location i.e: Table, Hotel Room, Car park space (asynchronously)
     * 
     * @param createLocationInput Input data for creating the Location (required)
     * @param locationAreaId Id of the Location area where the Location belongs (required)
     * @param appId AppId i.e: (fd1234) (required)
     * @param storeId Id of the Store (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createLocationAsync(CreateLocation createLocationInput, Integer locationAreaId, String appId, Integer storeId, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createLocationValidateBeforeCall(createLocationInput, locationAreaId, appId, storeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
