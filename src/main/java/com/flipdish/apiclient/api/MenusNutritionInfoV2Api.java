/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.flipdish.apiclient.api;

import com.flipdish.apiclient.ApiCallback;
import com.flipdish.apiclient.ApiClient;
import com.flipdish.apiclient.ApiException;
import com.flipdish.apiclient.ApiResponse;
import com.flipdish.apiclient.Configuration;
import com.flipdish.apiclient.Pair;
import com.flipdish.apiclient.ProgressRequestBody;
import com.flipdish.apiclient.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.flipdish.apiclient.model.ItemNutritionInfoV2AddUpdateModel;
import com.flipdish.apiclient.model.RestApiArrayResultAllergen;
import com.flipdish.apiclient.model.RestApiErrorResult;
import com.flipdish.apiclient.model.RestApiForbiddenResult;
import com.flipdish.apiclient.model.RestApiResultNutritionInfoV2;
import com.flipdish.apiclient.model.RestApiUnauthorizedResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MenusNutritionInfoV2Api {
    private ApiClient apiClient;
    private Map<String, String> headers;

    public MenusNutritionInfoV2Api() {
        this(Configuration.getDefaultApiClient());
    }

    public MenusNutritionInfoV2Api(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public void setHeadersOverrides(Map<String, String> headers) {
        this.headers = headers;
    }

    /**
     * Build call for addOrUpdateMenuItemNutritionInfoV2
     * @param menuId Menu identifier (required)
     * @param publicId Menu item&#39;s publicId (required)
     * @param addOrUpdateModel Allergen ids (required)
     * @param appId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addOrUpdateMenuItemNutritionInfoV2Call(Integer menuId, String publicId, ItemNutritionInfoV2AddUpdateModel addOrUpdateModel, String appId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = addOrUpdateModel;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/menus/{menuId}/menuItem/{publicId}/nutritionv2"
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()))
            .replaceAll("\\{" + "publicId" + "\\}", apiClient.escapeString(publicId.toString()))
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addOrUpdateMenuItemNutritionInfoV2ValidateBeforeCall(Integer menuId, String publicId, ItemNutritionInfoV2AddUpdateModel addOrUpdateModel, String appId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling addOrUpdateMenuItemNutritionInfoV2(Async)");
        }
        
        // verify the required parameter 'publicId' is set
        if (publicId == null) {
            throw new ApiException("Missing the required parameter 'publicId' when calling addOrUpdateMenuItemNutritionInfoV2(Async)");
        }
        
        // verify the required parameter 'addOrUpdateModel' is set
        if (addOrUpdateModel == null) {
            throw new ApiException("Missing the required parameter 'addOrUpdateModel' when calling addOrUpdateMenuItemNutritionInfoV2(Async)");
        }
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling addOrUpdateMenuItemNutritionInfoV2(Async)");
        }
        

        com.squareup.okhttp.Call call = addOrUpdateMenuItemNutritionInfoV2Call(menuId, publicId, addOrUpdateModel, appId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add or update menuitem nutrition info by menu item&#39;s publicId
     * 
     * @param menuId Menu identifier (required)
     * @param publicId Menu item&#39;s publicId (required)
     * @param addOrUpdateModel Allergen ids (required)
     * @param appId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object addOrUpdateMenuItemNutritionInfoV2(Integer menuId, String publicId, ItemNutritionInfoV2AddUpdateModel addOrUpdateModel, String appId) throws ApiException {
        ApiResponse<Object> resp = addOrUpdateMenuItemNutritionInfoV2WithHttpInfo(menuId, publicId, addOrUpdateModel, appId);
        return resp.getData();
    }

    /**
     * Add or update menuitem nutrition info by menu item&#39;s publicId
     * 
     * @param menuId Menu identifier (required)
     * @param publicId Menu item&#39;s publicId (required)
     * @param addOrUpdateModel Allergen ids (required)
     * @param appId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> addOrUpdateMenuItemNutritionInfoV2WithHttpInfo(Integer menuId, String publicId, ItemNutritionInfoV2AddUpdateModel addOrUpdateModel, String appId) throws ApiException {
        com.squareup.okhttp.Call call = addOrUpdateMenuItemNutritionInfoV2ValidateBeforeCall(menuId, publicId, addOrUpdateModel, appId, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add or update menuitem nutrition info by menu item&#39;s publicId (asynchronously)
     * 
     * @param menuId Menu identifier (required)
     * @param publicId Menu item&#39;s publicId (required)
     * @param addOrUpdateModel Allergen ids (required)
     * @param appId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addOrUpdateMenuItemNutritionInfoV2Async(Integer menuId, String publicId, ItemNutritionInfoV2AddUpdateModel addOrUpdateModel, String appId, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addOrUpdateMenuItemNutritionInfoV2ValidateBeforeCall(menuId, publicId, addOrUpdateModel, appId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addOrUpdateMenuItemOptionSetItemNutritionInfoV2
     * @param menuId Menu identifier (required)
     * @param publicId Menu item option set item&#39;s publicId (required)
     * @param addOrUpdateModel Allergen ids (required)
     * @param appId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addOrUpdateMenuItemOptionSetItemNutritionInfoV2Call(Integer menuId, String publicId, ItemNutritionInfoV2AddUpdateModel addOrUpdateModel, String appId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = addOrUpdateModel;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/menus/{menuId}/menuItemOption/{publicId}/nutritionv2"
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()))
            .replaceAll("\\{" + "publicId" + "\\}", apiClient.escapeString(publicId.toString()))
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addOrUpdateMenuItemOptionSetItemNutritionInfoV2ValidateBeforeCall(Integer menuId, String publicId, ItemNutritionInfoV2AddUpdateModel addOrUpdateModel, String appId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling addOrUpdateMenuItemOptionSetItemNutritionInfoV2(Async)");
        }
        
        // verify the required parameter 'publicId' is set
        if (publicId == null) {
            throw new ApiException("Missing the required parameter 'publicId' when calling addOrUpdateMenuItemOptionSetItemNutritionInfoV2(Async)");
        }
        
        // verify the required parameter 'addOrUpdateModel' is set
        if (addOrUpdateModel == null) {
            throw new ApiException("Missing the required parameter 'addOrUpdateModel' when calling addOrUpdateMenuItemOptionSetItemNutritionInfoV2(Async)");
        }
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling addOrUpdateMenuItemOptionSetItemNutritionInfoV2(Async)");
        }
        

        com.squareup.okhttp.Call call = addOrUpdateMenuItemOptionSetItemNutritionInfoV2Call(menuId, publicId, addOrUpdateModel, appId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add or update menuitem option set item&#39;s nutrition info by its publicId
     * 
     * @param menuId Menu identifier (required)
     * @param publicId Menu item option set item&#39;s publicId (required)
     * @param addOrUpdateModel Allergen ids (required)
     * @param appId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object addOrUpdateMenuItemOptionSetItemNutritionInfoV2(Integer menuId, String publicId, ItemNutritionInfoV2AddUpdateModel addOrUpdateModel, String appId) throws ApiException {
        ApiResponse<Object> resp = addOrUpdateMenuItemOptionSetItemNutritionInfoV2WithHttpInfo(menuId, publicId, addOrUpdateModel, appId);
        return resp.getData();
    }

    /**
     * Add or update menuitem option set item&#39;s nutrition info by its publicId
     * 
     * @param menuId Menu identifier (required)
     * @param publicId Menu item option set item&#39;s publicId (required)
     * @param addOrUpdateModel Allergen ids (required)
     * @param appId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> addOrUpdateMenuItemOptionSetItemNutritionInfoV2WithHttpInfo(Integer menuId, String publicId, ItemNutritionInfoV2AddUpdateModel addOrUpdateModel, String appId) throws ApiException {
        com.squareup.okhttp.Call call = addOrUpdateMenuItemOptionSetItemNutritionInfoV2ValidateBeforeCall(menuId, publicId, addOrUpdateModel, appId, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add or update menuitem option set item&#39;s nutrition info by its publicId (asynchronously)
     * 
     * @param menuId Menu identifier (required)
     * @param publicId Menu item option set item&#39;s publicId (required)
     * @param addOrUpdateModel Allergen ids (required)
     * @param appId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addOrUpdateMenuItemOptionSetItemNutritionInfoV2Async(Integer menuId, String publicId, ItemNutritionInfoV2AddUpdateModel addOrUpdateModel, String appId, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addOrUpdateMenuItemOptionSetItemNutritionInfoV2ValidateBeforeCall(menuId, publicId, addOrUpdateModel, appId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAllergensV2
     * @param appId  (required)
     * @param languageId  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllergensV2Call(String appId, String languageId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/menus/nutritionv2/allergens"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (languageId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("languageId", languageId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllergensV2ValidateBeforeCall(String appId, String languageId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getAllergensV2(Async)");
        }
        

        com.squareup.okhttp.Call call = getAllergensV2Call(appId, languageId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get allergens
     * 
     * @param appId  (required)
     * @param languageId  (optional)
     * @return RestApiArrayResultAllergen
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiArrayResultAllergen getAllergensV2(String appId, String languageId) throws ApiException {
        ApiResponse<RestApiArrayResultAllergen> resp = getAllergensV2WithHttpInfo(appId, languageId);
        return resp.getData();
    }

    /**
     * Get allergens
     * 
     * @param appId  (required)
     * @param languageId  (optional)
     * @return ApiResponse&lt;RestApiArrayResultAllergen&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiArrayResultAllergen> getAllergensV2WithHttpInfo(String appId, String languageId) throws ApiException {
        com.squareup.okhttp.Call call = getAllergensV2ValidateBeforeCall(appId, languageId, null, null);
        Type localVarReturnType = new TypeToken<RestApiArrayResultAllergen>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get allergens (asynchronously)
     * 
     * @param appId  (required)
     * @param languageId  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllergensV2Async(String appId, String languageId, final ApiCallback<RestApiArrayResultAllergen> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllergensV2ValidateBeforeCall(appId, languageId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiArrayResultAllergen>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getMenuNutritionInfoV2ByMenuId
     * @param appId  (required)
     * @param menuId Menu identifier (required)
     * @param languageId  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMenuNutritionInfoV2ByMenuIdCall(String appId, Integer menuId, String languageId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1.0/{appId}/menus/{menuId}/nutritionv2"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "menuId" + "\\}", apiClient.escapeString(menuId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (languageId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("languageId", languageId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMenuNutritionInfoV2ByMenuIdValidateBeforeCall(String appId, Integer menuId, String languageId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getMenuNutritionInfoV2ByMenuId(Async)");
        }
        
        // verify the required parameter 'menuId' is set
        if (menuId == null) {
            throw new ApiException("Missing the required parameter 'menuId' when calling getMenuNutritionInfoV2ByMenuId(Async)");
        }
        

        com.squareup.okhttp.Call call = getMenuNutritionInfoV2ByMenuIdCall(appId, menuId, languageId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get menu nutrition by menuId
     * 
     * @param appId  (required)
     * @param menuId Menu identifier (required)
     * @param languageId  (optional)
     * @return RestApiResultNutritionInfoV2
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestApiResultNutritionInfoV2 getMenuNutritionInfoV2ByMenuId(String appId, Integer menuId, String languageId) throws ApiException {
        ApiResponse<RestApiResultNutritionInfoV2> resp = getMenuNutritionInfoV2ByMenuIdWithHttpInfo(appId, menuId, languageId);
        return resp.getData();
    }

    /**
     * Get menu nutrition by menuId
     * 
     * @param appId  (required)
     * @param menuId Menu identifier (required)
     * @param languageId  (optional)
     * @return ApiResponse&lt;RestApiResultNutritionInfoV2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestApiResultNutritionInfoV2> getMenuNutritionInfoV2ByMenuIdWithHttpInfo(String appId, Integer menuId, String languageId) throws ApiException {
        com.squareup.okhttp.Call call = getMenuNutritionInfoV2ByMenuIdValidateBeforeCall(appId, menuId, languageId, null, null);
        Type localVarReturnType = new TypeToken<RestApiResultNutritionInfoV2>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get menu nutrition by menuId (asynchronously)
     * 
     * @param appId  (required)
     * @param menuId Menu identifier (required)
     * @param languageId  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMenuNutritionInfoV2ByMenuIdAsync(String appId, Integer menuId, String languageId, final ApiCallback<RestApiResultNutritionInfoV2> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMenuNutritionInfoV2ByMenuIdValidateBeforeCall(appId, menuId, languageId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestApiResultNutritionInfoV2>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
