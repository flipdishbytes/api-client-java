/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.flipdish.apiclient.model;

import java.util.Objects;
import java.util.Arrays;
import com.flipdish.apiclient.model.AppInstall;
import com.flipdish.apiclient.model.DeliveryLocation;
import com.flipdish.apiclient.model.Language;
import com.flipdish.apiclient.model.PaymentAccount;
import com.flipdish.apiclient.model.UserMonthlyCommission;
import com.flipdish.apiclient.model.UserWhiteLabelInfo;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;

/**
 * User information
 */
@ApiModel(description = "User information")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2025-10-30T11:59:09.391Z")
public class UserInfo {
  @SerializedName("PhoneNumber")
  private String phoneNumber = null;

  @SerializedName("Email")
  private String email = null;

  @SerializedName("EmailConfirmed")
  private Boolean emailConfirmed = null;

  @SerializedName("PreventFromUsingCards")
  private Boolean preventFromUsingCards = null;

  @SerializedName("IsUserPhoneNumberBlocked")
  private Boolean isUserPhoneNumberBlocked = null;

  @SerializedName("UserWhiteLabels")
  private List<UserWhiteLabelInfo> userWhiteLabels = null;

  @SerializedName("UserId")
  private Integer userId = null;

  @SerializedName("UserName")
  private String userName = null;

  @SerializedName("CustomerName")
  private String customerName = null;

  @SerializedName("HasLoggedIn")
  private Boolean hasLoggedIn = null;

  @SerializedName("DisableAppRatingControl")
  private Boolean disableAppRatingControl = null;

  @SerializedName("GloballyOptedOut")
  private Boolean globallyOptedOut = null;

  @SerializedName("CompletedOrderCount")
  private Integer completedOrderCount = null;

  @SerializedName("CancelledOrderCount")
  private Integer cancelledOrderCount = null;

  @SerializedName("OrderTotalValue")
  private Double orderTotalValue = null;

  @SerializedName("TsMostRecentOrder")
  private OffsetDateTime tsMostRecentOrder = null;

  @SerializedName("TsFirstOrder")
  private OffsetDateTime tsFirstOrder = null;

  @SerializedName("IsRestaurantUser")
  private Boolean isRestaurantUser = null;

  @SerializedName("Installs")
  private List<AppInstall> installs = null;

  @SerializedName("DeliveryLocations")
  private List<DeliveryLocation> deliveryLocations = null;

  @SerializedName("PaymentAccounts")
  private List<PaymentAccount> paymentAccounts = null;

  @SerializedName("LanguageId")
  private String languageId = null;

  @SerializedName("CurrentLanguageName")
  private String currentLanguageName = null;

  @SerializedName("Languages")
  private List<Language> languages = null;

  @SerializedName("SalesForceContactId")
  private String salesForceContactId = null;

  @SerializedName("StripeCustomerId")
  private String stripeCustomerId = null;

  @SerializedName("UserMonthlyCommissions")
  private List<UserMonthlyCommission> userMonthlyCommissions = null;

  public UserInfo phoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

   /**
   * The user&#39;s phone number.
   * @return phoneNumber
  **/
  @ApiModelProperty(value = "The user's phone number.")
  public String getPhoneNumber() {
    return phoneNumber;
  }

  public void setPhoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
  }

  public UserInfo email(String email) {
    this.email = email;
    return this;
  }

   /**
   * The user&#39;s email address.
   * @return email
  **/
  @ApiModelProperty(value = "The user's email address.")
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }

  public UserInfo emailConfirmed(Boolean emailConfirmed) {
    this.emailConfirmed = emailConfirmed;
    return this;
  }

   /**
   * Indicates if the user&#39;s email address has been confirmed.
   * @return emailConfirmed
  **/
  @ApiModelProperty(value = "Indicates if the user's email address has been confirmed.")
  public Boolean isEmailConfirmed() {
    return emailConfirmed;
  }

  public void setEmailConfirmed(Boolean emailConfirmed) {
    this.emailConfirmed = emailConfirmed;
  }

  public UserInfo preventFromUsingCards(Boolean preventFromUsingCards) {
    this.preventFromUsingCards = preventFromUsingCards;
    return this;
  }

   /**
   * Indicates if the user is prevented from using cards.
   * @return preventFromUsingCards
  **/
  @ApiModelProperty(value = "Indicates if the user is prevented from using cards.")
  public Boolean isPreventFromUsingCards() {
    return preventFromUsingCards;
  }

  public void setPreventFromUsingCards(Boolean preventFromUsingCards) {
    this.preventFromUsingCards = preventFromUsingCards;
  }

  public UserInfo isUserPhoneNumberBlocked(Boolean isUserPhoneNumberBlocked) {
    this.isUserPhoneNumberBlocked = isUserPhoneNumberBlocked;
    return this;
  }

   /**
   * Indicates if the user&#39;s phone number is blocked.
   * @return isUserPhoneNumberBlocked
  **/
  @ApiModelProperty(value = "Indicates if the user's phone number is blocked.")
  public Boolean isIsUserPhoneNumberBlocked() {
    return isUserPhoneNumberBlocked;
  }

  public void setIsUserPhoneNumberBlocked(Boolean isUserPhoneNumberBlocked) {
    this.isUserPhoneNumberBlocked = isUserPhoneNumberBlocked;
  }

  public UserInfo userWhiteLabels(List<UserWhiteLabelInfo> userWhiteLabels) {
    this.userWhiteLabels = userWhiteLabels;
    return this;
  }

  public UserInfo addUserWhiteLabelsItem(UserWhiteLabelInfo userWhiteLabelsItem) {
    if (this.userWhiteLabels == null) {
      this.userWhiteLabels = new ArrayList<UserWhiteLabelInfo>();
    }
    this.userWhiteLabels.add(userWhiteLabelsItem);
    return this;
  }

   /**
   * List of white label information associated with the user.
   * @return userWhiteLabels
  **/
  @ApiModelProperty(value = "List of white label information associated with the user.")
  public List<UserWhiteLabelInfo> getUserWhiteLabels() {
    return userWhiteLabels;
  }

  public void setUserWhiteLabels(List<UserWhiteLabelInfo> userWhiteLabels) {
    this.userWhiteLabels = userWhiteLabels;
  }

  public UserInfo userId(Integer userId) {
    this.userId = userId;
    return this;
  }

   /**
   * The unique identifier for the user.
   * @return userId
  **/
  @ApiModelProperty(value = "The unique identifier for the user.")
  public Integer getUserId() {
    return userId;
  }

  public void setUserId(Integer userId) {
    this.userId = userId;
  }

  public UserInfo userName(String userName) {
    this.userName = userName;
    return this;
  }

   /**
   * The user&#39;s username.
   * @return userName
  **/
  @ApiModelProperty(value = "The user's username.")
  public String getUserName() {
    return userName;
  }

  public void setUserName(String userName) {
    this.userName = userName;
  }

  public UserInfo customerName(String customerName) {
    this.customerName = customerName;
    return this;
  }

   /**
   * The customer&#39;s name.
   * @return customerName
  **/
  @ApiModelProperty(value = "The customer's name.")
  public String getCustomerName() {
    return customerName;
  }

  public void setCustomerName(String customerName) {
    this.customerName = customerName;
  }

  public UserInfo hasLoggedIn(Boolean hasLoggedIn) {
    this.hasLoggedIn = hasLoggedIn;
    return this;
  }

   /**
   * Indicates if the user has logged in.
   * @return hasLoggedIn
  **/
  @ApiModelProperty(value = "Indicates if the user has logged in.")
  public Boolean isHasLoggedIn() {
    return hasLoggedIn;
  }

  public void setHasLoggedIn(Boolean hasLoggedIn) {
    this.hasLoggedIn = hasLoggedIn;
  }

  public UserInfo disableAppRatingControl(Boolean disableAppRatingControl) {
    this.disableAppRatingControl = disableAppRatingControl;
    return this;
  }

   /**
   * Indicates if the app rating control is disabled for the user.
   * @return disableAppRatingControl
  **/
  @ApiModelProperty(value = "Indicates if the app rating control is disabled for the user.")
  public Boolean isDisableAppRatingControl() {
    return disableAppRatingControl;
  }

  public void setDisableAppRatingControl(Boolean disableAppRatingControl) {
    this.disableAppRatingControl = disableAppRatingControl;
  }

  public UserInfo globallyOptedOut(Boolean globallyOptedOut) {
    this.globallyOptedOut = globallyOptedOut;
    return this;
  }

   /**
   * Indicates if the user has globally opted out.
   * @return globallyOptedOut
  **/
  @ApiModelProperty(value = "Indicates if the user has globally opted out.")
  public Boolean isGloballyOptedOut() {
    return globallyOptedOut;
  }

  public void setGloballyOptedOut(Boolean globallyOptedOut) {
    this.globallyOptedOut = globallyOptedOut;
  }

  public UserInfo completedOrderCount(Integer completedOrderCount) {
    this.completedOrderCount = completedOrderCount;
    return this;
  }

   /**
   * The number of completed orders by the user.
   * @return completedOrderCount
  **/
  @ApiModelProperty(value = "The number of completed orders by the user.")
  public Integer getCompletedOrderCount() {
    return completedOrderCount;
  }

  public void setCompletedOrderCount(Integer completedOrderCount) {
    this.completedOrderCount = completedOrderCount;
  }

  public UserInfo cancelledOrderCount(Integer cancelledOrderCount) {
    this.cancelledOrderCount = cancelledOrderCount;
    return this;
  }

   /**
   * The number of cancelled orders by the user.
   * @return cancelledOrderCount
  **/
  @ApiModelProperty(value = "The number of cancelled orders by the user.")
  public Integer getCancelledOrderCount() {
    return cancelledOrderCount;
  }

  public void setCancelledOrderCount(Integer cancelledOrderCount) {
    this.cancelledOrderCount = cancelledOrderCount;
  }

  public UserInfo orderTotalValue(Double orderTotalValue) {
    this.orderTotalValue = orderTotalValue;
    return this;
  }

   /**
   * The total value of orders placed by the user.
   * @return orderTotalValue
  **/
  @ApiModelProperty(value = "The total value of orders placed by the user.")
  public Double getOrderTotalValue() {
    return orderTotalValue;
  }

  public void setOrderTotalValue(Double orderTotalValue) {
    this.orderTotalValue = orderTotalValue;
  }

  public UserInfo tsMostRecentOrder(OffsetDateTime tsMostRecentOrder) {
    this.tsMostRecentOrder = tsMostRecentOrder;
    return this;
  }

   /**
   * The timestamp of the user&#39;s most recent order.
   * @return tsMostRecentOrder
  **/
  @ApiModelProperty(value = "The timestamp of the user's most recent order.")
  public OffsetDateTime getTsMostRecentOrder() {
    return tsMostRecentOrder;
  }

  public void setTsMostRecentOrder(OffsetDateTime tsMostRecentOrder) {
    this.tsMostRecentOrder = tsMostRecentOrder;
  }

  public UserInfo tsFirstOrder(OffsetDateTime tsFirstOrder) {
    this.tsFirstOrder = tsFirstOrder;
    return this;
  }

   /**
   * The timestamp of the user&#39;s first order.
   * @return tsFirstOrder
  **/
  @ApiModelProperty(value = "The timestamp of the user's first order.")
  public OffsetDateTime getTsFirstOrder() {
    return tsFirstOrder;
  }

  public void setTsFirstOrder(OffsetDateTime tsFirstOrder) {
    this.tsFirstOrder = tsFirstOrder;
  }

  public UserInfo isRestaurantUser(Boolean isRestaurantUser) {
    this.isRestaurantUser = isRestaurantUser;
    return this;
  }

   /**
   * Indicates if the user is a restaurant user.
   * @return isRestaurantUser
  **/
  @ApiModelProperty(value = "Indicates if the user is a restaurant user.")
  public Boolean isIsRestaurantUser() {
    return isRestaurantUser;
  }

  public void setIsRestaurantUser(Boolean isRestaurantUser) {
    this.isRestaurantUser = isRestaurantUser;
  }

  public UserInfo installs(List<AppInstall> installs) {
    this.installs = installs;
    return this;
  }

  public UserInfo addInstallsItem(AppInstall installsItem) {
    if (this.installs == null) {
      this.installs = new ArrayList<AppInstall>();
    }
    this.installs.add(installsItem);
    return this;
  }

   /**
   * List of app installs associated with the user.
   * @return installs
  **/
  @ApiModelProperty(value = "List of app installs associated with the user.")
  public List<AppInstall> getInstalls() {
    return installs;
  }

  public void setInstalls(List<AppInstall> installs) {
    this.installs = installs;
  }

  public UserInfo deliveryLocations(List<DeliveryLocation> deliveryLocations) {
    this.deliveryLocations = deliveryLocations;
    return this;
  }

  public UserInfo addDeliveryLocationsItem(DeliveryLocation deliveryLocationsItem) {
    if (this.deliveryLocations == null) {
      this.deliveryLocations = new ArrayList<DeliveryLocation>();
    }
    this.deliveryLocations.add(deliveryLocationsItem);
    return this;
  }

   /**
   * List of delivery locations associated with the user.
   * @return deliveryLocations
  **/
  @ApiModelProperty(value = "List of delivery locations associated with the user.")
  public List<DeliveryLocation> getDeliveryLocations() {
    return deliveryLocations;
  }

  public void setDeliveryLocations(List<DeliveryLocation> deliveryLocations) {
    this.deliveryLocations = deliveryLocations;
  }

  public UserInfo paymentAccounts(List<PaymentAccount> paymentAccounts) {
    this.paymentAccounts = paymentAccounts;
    return this;
  }

  public UserInfo addPaymentAccountsItem(PaymentAccount paymentAccountsItem) {
    if (this.paymentAccounts == null) {
      this.paymentAccounts = new ArrayList<PaymentAccount>();
    }
    this.paymentAccounts.add(paymentAccountsItem);
    return this;
  }

   /**
   * List of payment accounts associated with the user.
   * @return paymentAccounts
  **/
  @ApiModelProperty(value = "List of payment accounts associated with the user.")
  public List<PaymentAccount> getPaymentAccounts() {
    return paymentAccounts;
  }

  public void setPaymentAccounts(List<PaymentAccount> paymentAccounts) {
    this.paymentAccounts = paymentAccounts;
  }

  public UserInfo languageId(String languageId) {
    this.languageId = languageId;
    return this;
  }

   /**
   * The language identifier for the user.
   * @return languageId
  **/
  @ApiModelProperty(value = "The language identifier for the user.")
  public String getLanguageId() {
    return languageId;
  }

  public void setLanguageId(String languageId) {
    this.languageId = languageId;
  }

  public UserInfo currentLanguageName(String currentLanguageName) {
    this.currentLanguageName = currentLanguageName;
    return this;
  }

   /**
   * Current language name for the user.
   * @return currentLanguageName
  **/
  @ApiModelProperty(value = "Current language name for the user.")
  public String getCurrentLanguageName() {
    return currentLanguageName;
  }

  public void setCurrentLanguageName(String currentLanguageName) {
    this.currentLanguageName = currentLanguageName;
  }

  public UserInfo languages(List<Language> languages) {
    this.languages = languages;
    return this;
  }

  public UserInfo addLanguagesItem(Language languagesItem) {
    if (this.languages == null) {
      this.languages = new ArrayList<Language>();
    }
    this.languages.add(languagesItem);
    return this;
  }

   /**
   * Available languages that the user can choose from.
   * @return languages
  **/
  @ApiModelProperty(value = "Available languages that the user can choose from.")
  public List<Language> getLanguages() {
    return languages;
  }

  public void setLanguages(List<Language> languages) {
    this.languages = languages;
  }

  public UserInfo salesForceContactId(String salesForceContactId) {
    this.salesForceContactId = salesForceContactId;
    return this;
  }

   /**
   * The Salesforce contact ID for the user.
   * @return salesForceContactId
  **/
  @ApiModelProperty(value = "The Salesforce contact ID for the user.")
  public String getSalesForceContactId() {
    return salesForceContactId;
  }

  public void setSalesForceContactId(String salesForceContactId) {
    this.salesForceContactId = salesForceContactId;
  }

  public UserInfo stripeCustomerId(String stripeCustomerId) {
    this.stripeCustomerId = stripeCustomerId;
    return this;
  }

   /**
   * The Stripe customer ID for the user.
   * @return stripeCustomerId
  **/
  @ApiModelProperty(value = "The Stripe customer ID for the user.")
  public String getStripeCustomerId() {
    return stripeCustomerId;
  }

  public void setStripeCustomerId(String stripeCustomerId) {
    this.stripeCustomerId = stripeCustomerId;
  }

  public UserInfo userMonthlyCommissions(List<UserMonthlyCommission> userMonthlyCommissions) {
    this.userMonthlyCommissions = userMonthlyCommissions;
    return this;
  }

  public UserInfo addUserMonthlyCommissionsItem(UserMonthlyCommission userMonthlyCommissionsItem) {
    if (this.userMonthlyCommissions == null) {
      this.userMonthlyCommissions = new ArrayList<UserMonthlyCommission>();
    }
    this.userMonthlyCommissions.add(userMonthlyCommissionsItem);
    return this;
  }

   /**
   * User&#39;s monthly commissions.
   * @return userMonthlyCommissions
  **/
  @ApiModelProperty(value = "User's monthly commissions.")
  public List<UserMonthlyCommission> getUserMonthlyCommissions() {
    return userMonthlyCommissions;
  }

  public void setUserMonthlyCommissions(List<UserMonthlyCommission> userMonthlyCommissions) {
    this.userMonthlyCommissions = userMonthlyCommissions;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserInfo userInfo = (UserInfo) o;
    return Objects.equals(this.phoneNumber, userInfo.phoneNumber) &&
        Objects.equals(this.email, userInfo.email) &&
        Objects.equals(this.emailConfirmed, userInfo.emailConfirmed) &&
        Objects.equals(this.preventFromUsingCards, userInfo.preventFromUsingCards) &&
        Objects.equals(this.isUserPhoneNumberBlocked, userInfo.isUserPhoneNumberBlocked) &&
        Objects.equals(this.userWhiteLabels, userInfo.userWhiteLabels) &&
        Objects.equals(this.userId, userInfo.userId) &&
        Objects.equals(this.userName, userInfo.userName) &&
        Objects.equals(this.customerName, userInfo.customerName) &&
        Objects.equals(this.hasLoggedIn, userInfo.hasLoggedIn) &&
        Objects.equals(this.disableAppRatingControl, userInfo.disableAppRatingControl) &&
        Objects.equals(this.globallyOptedOut, userInfo.globallyOptedOut) &&
        Objects.equals(this.completedOrderCount, userInfo.completedOrderCount) &&
        Objects.equals(this.cancelledOrderCount, userInfo.cancelledOrderCount) &&
        Objects.equals(this.orderTotalValue, userInfo.orderTotalValue) &&
        Objects.equals(this.tsMostRecentOrder, userInfo.tsMostRecentOrder) &&
        Objects.equals(this.tsFirstOrder, userInfo.tsFirstOrder) &&
        Objects.equals(this.isRestaurantUser, userInfo.isRestaurantUser) &&
        Objects.equals(this.installs, userInfo.installs) &&
        Objects.equals(this.deliveryLocations, userInfo.deliveryLocations) &&
        Objects.equals(this.paymentAccounts, userInfo.paymentAccounts) &&
        Objects.equals(this.languageId, userInfo.languageId) &&
        Objects.equals(this.currentLanguageName, userInfo.currentLanguageName) &&
        Objects.equals(this.languages, userInfo.languages) &&
        Objects.equals(this.salesForceContactId, userInfo.salesForceContactId) &&
        Objects.equals(this.stripeCustomerId, userInfo.stripeCustomerId) &&
        Objects.equals(this.userMonthlyCommissions, userInfo.userMonthlyCommissions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(phoneNumber, email, emailConfirmed, preventFromUsingCards, isUserPhoneNumberBlocked, userWhiteLabels, userId, userName, customerName, hasLoggedIn, disableAppRatingControl, globallyOptedOut, completedOrderCount, cancelledOrderCount, orderTotalValue, tsMostRecentOrder, tsFirstOrder, isRestaurantUser, installs, deliveryLocations, paymentAccounts, languageId, currentLanguageName, languages, salesForceContactId, stripeCustomerId, userMonthlyCommissions);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserInfo {\n");
    
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    emailConfirmed: ").append(toIndentedString(emailConfirmed)).append("\n");
    sb.append("    preventFromUsingCards: ").append(toIndentedString(preventFromUsingCards)).append("\n");
    sb.append("    isUserPhoneNumberBlocked: ").append(toIndentedString(isUserPhoneNumberBlocked)).append("\n");
    sb.append("    userWhiteLabels: ").append(toIndentedString(userWhiteLabels)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    userName: ").append(toIndentedString(userName)).append("\n");
    sb.append("    customerName: ").append(toIndentedString(customerName)).append("\n");
    sb.append("    hasLoggedIn: ").append(toIndentedString(hasLoggedIn)).append("\n");
    sb.append("    disableAppRatingControl: ").append(toIndentedString(disableAppRatingControl)).append("\n");
    sb.append("    globallyOptedOut: ").append(toIndentedString(globallyOptedOut)).append("\n");
    sb.append("    completedOrderCount: ").append(toIndentedString(completedOrderCount)).append("\n");
    sb.append("    cancelledOrderCount: ").append(toIndentedString(cancelledOrderCount)).append("\n");
    sb.append("    orderTotalValue: ").append(toIndentedString(orderTotalValue)).append("\n");
    sb.append("    tsMostRecentOrder: ").append(toIndentedString(tsMostRecentOrder)).append("\n");
    sb.append("    tsFirstOrder: ").append(toIndentedString(tsFirstOrder)).append("\n");
    sb.append("    isRestaurantUser: ").append(toIndentedString(isRestaurantUser)).append("\n");
    sb.append("    installs: ").append(toIndentedString(installs)).append("\n");
    sb.append("    deliveryLocations: ").append(toIndentedString(deliveryLocations)).append("\n");
    sb.append("    paymentAccounts: ").append(toIndentedString(paymentAccounts)).append("\n");
    sb.append("    languageId: ").append(toIndentedString(languageId)).append("\n");
    sb.append("    currentLanguageName: ").append(toIndentedString(currentLanguageName)).append("\n");
    sb.append("    languages: ").append(toIndentedString(languages)).append("\n");
    sb.append("    salesForceContactId: ").append(toIndentedString(salesForceContactId)).append("\n");
    sb.append("    stripeCustomerId: ").append(toIndentedString(stripeCustomerId)).append("\n");
    sb.append("    userMonthlyCommissions: ").append(toIndentedString(userMonthlyCommissions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

